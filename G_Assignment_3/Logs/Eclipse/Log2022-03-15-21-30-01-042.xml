<Events startTimestamp="1647394201042" logVersion="1.0.0.202108012048">
  <Command __id="26" _type="ShellCommand" date="Tue Mar 15 21:30:02 EDT 2022" starttimestamp="1647394201042" timestamp="1881" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="28" _type="PauseCommand" date="Tue Mar 15 21:30:05 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="4545">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2660]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="32" _type="PauseCommand" date="Tue Mar 15 21:30:08 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="7908">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2889]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="31" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:30:08 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="7907" type="Run" />
  <Command __id="33" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:30:08 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="7922" type="Run" />
  <Command __id="35" _type="PauseCommand" date="Tue Mar 15 21:30:11 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="10692">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2770]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="34" _type="ShellCommand" date="Tue Mar 15 21:30:11 EDT 2022" starttimestamp="1647394201042" timestamp="10692" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="37" _type="PauseCommand" date="Tue Mar 15 21:30:13 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="12471">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1779]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="36" _type="ConsoleOutput" date="Tue Mar 15 21:30:13 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="12471" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):22
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="39" _type="PauseCommand" date="Tue Mar 15 21:30:14 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="13776">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1305]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="38" _type="ConsoleOutput" date="Tue Mar 15 21:30:14 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="13776" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***Port already in use: 1099; nested exception is: 
(MapReduce Server)	java.net.BindException: Address already in use: NET_Bind
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):22"), Diff(INSERT,"(MapReduce Server)E***Port already in use: 1099; nested exception is: ¶(MapReduce Server)	java.net.BindException: Address already in use: NET_Bind"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="41" _type="PauseCommand" date="Tue Mar 15 21:30:24 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="22963">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[9187]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="40" _type="ExceptionCommand" date="Tue Mar 15 21:30:24 EDT 2022" starttimestamp="1647394201042" timestamp="22963" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="43" _type="PauseCommand" date="Tue Mar 15 21:30:27 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="26867">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[3904]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="42" _type="ShellCommand" date="Tue Mar 15 21:30:27 EDT 2022" starttimestamp="1647394201042" timestamp="26867" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="45" _type="PauseCommand" date="Tue Mar 15 21:30:36 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="35028">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8161]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="44" _type="ShellCommand" date="Tue Mar 15 21:30:36 EDT 2022" starttimestamp="1647394201042" timestamp="35028" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="47" _type="PauseCommand" date="Tue Mar 15 21:30:52 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="51107">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16079]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="46" _type="ShellCommand" date="Tue Mar 15 21:30:52 EDT 2022" starttimestamp="1647394201042" timestamp="51107" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="48" _type="ShellCommand" date="Tue Mar 15 21:30:52 EDT 2022" starttimestamp="1647394201042" timestamp="51925" type="ECLIPSE_MINIMIZED" />
  <Command __id="49" _type="ShellCommand" date="Tue Mar 15 21:30:52 EDT 2022" starttimestamp="1647394201042" timestamp="51940" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="51" _type="PauseCommand" date="Tue Mar 15 21:30:56 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="54972">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3032]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="50" _type="ShellCommand" date="Tue Mar 15 21:30:56 EDT 2022" starttimestamp="1647394201042" timestamp="54972" type="ECLIPSE_MAXIMIZED" />
  <Command __id="52" _type="ShellCommand" date="Tue Mar 15 21:30:56 EDT 2022" starttimestamp="1647394201042" timestamp="55037" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="53" _type="ShellCommand" date="Tue Mar 15 21:30:56 EDT 2022" starttimestamp="1647394201042" timestamp="55569" type="ECLIPSE_MINIMIZED" />
  <Command __id="54" _type="ShellCommand" date="Tue Mar 15 21:30:56 EDT 2022" starttimestamp="1647394201042" timestamp="55579" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="56" _type="PauseCommand" date="Tue Mar 15 21:31:34 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="93692">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[38113]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="55" _type="ExceptionCommand" date="Tue Mar 15 21:31:34 EDT 2022" starttimestamp="1647394201042" timestamp="93692" type="Exception">
    <exceptionString><![CDATA[java.lang.AssertionError: MapReduce Server Output Did not match:.*Hogwarts.*5.*?%0.0
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at grader.basics.testcase.PassFailJUnitTestCase.assertTrue(PassFailJUnitTestCase.java:288)
	at gradingTools.shared.testcases.MethodExecutionTest.checkWithChecker(MethodExecutionTest.java:930)
	at gradingTools.comp533s19.assignment0.testcases.counts.standalone.SingleThreadTokenCountResult.isValidOutput(SingleThreadTokenCountResult.java:93)
	at gradingTools.shared.testcases.MethodExecutionTest.computeOutputErrorStatus(MethodExecutionTest.java:262)
	at gradingTools.shared.testcases.MethodExecutionTest.setOutputErrorStatus(MethodExecutionTest.java:241)
	at gradingTools.shared.testcases.MainMethodForkerTest.test(MainMethodForkerTest.java:105)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at gradingTools.comp533s19.assignment0.testcases.counts.distributed.DistributedTokenCountResult.defaultTest(DistributedTokenCountResult.java:121)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
]]></exceptionString>
    <language><![CDATA[SML]]></language>
  </Command>
  <Command __id="57" _type="ConsoleOutput" date="Tue Mar 15 21:31:34 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="93719" type="ConsoleOutput">
    <outputString><![CDATA[java.lang.AssertionError: MapReduce Server Output Did not match:.*Hogwarts.*5.*?%0.0
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at grader.basics.testcase.PassFailJUnitTestCase.assertTrue(PassFailJUnitTestCase.java:288)
	at gradingTools.shared.testcases.MethodExecutionTest.checkWithChecker(MethodExecutionTest.java:930)
	at gradingTools.comp533s19.assignment0.testcases.counts.standalone.SingleThreadTokenCountResult.isValidOutput(SingleThreadTokenCountResult.java:93)
	at gradingTools.shared.testcases.MethodExecutionTest.computeOutputErrorStatus(MethodExecutionTest.java:262)
	at gradingTools.shared.testcases.MethodExecutionTest.setOutputErrorStatus(MethodExecutionTest.java:241)
	at gradingTools.shared.testcases.MainMethodForkerTest.test(MainMethodForkerTest.java:105)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at gradingTools.comp533s19.assignment0.testcases.counts.distributed.DistributedTokenCountResult.defaultTest(DistributedTokenCountResult.java:121)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***Port already in use: 1099; nested exception is: ¶(MapReduce Server)	java.net.BindException: Address already in use: NET_Bind"), Diff(INSERT,"java.lang.AssertionError: MapReduce Server Output Did not match:.*Hogwarts.*5.*?%0.0¶	at org.junit.Assert.fail(Assert.java:88)¶	at org.junit.Assert.assertTrue(Assert.java:41)¶	at grader.basics.testcase.PassFailJUnitTestCase.assertTrue(PassFailJUnitTestCase.java:288)¶	at gradingTools.shared.testcases.MethodExecutionTest.checkWithChecker(MethodExecutionTest.java:930)¶	at gradingTools.comp533s19.assignment0.testcases.counts.standalone.SingleThreadTokenCountResult.isValidOutput(SingleThreadTokenCountResult.java:93)¶	at gradingTools.shared.testcases.MethodExecutionTest.computeOutputErrorStatus(MethodExecutionTest.java:262)¶	at gradingTools.shared.testcases.MethodExecutionTest.setOutputErrorStatus(MethodExecutionTest.java:241)¶	at gradingTools.shared.testcases.MainMethodForkerTest.test(MainMethodForkerTest.java:105)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)¶	at gradingTools.comp533s19.assignment0.testcases.counts.distributed.DistributedTokenCountResult.defaultTest(DistributedTokenCountResult.java:121)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="61" _type="PauseCommand" date="Tue Mar 15 21:31:43 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="102423">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4837]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="60" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:31:43 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="102423" type="Run" />
  <Command __id="62" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:31:43 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="102424" type="Run" />
  <Command __id="64" _type="PauseCommand" date="Tue Mar 15 21:31:48 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="107209">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4785]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="63" _type="ShellCommand" date="Tue Mar 15 21:31:48 EDT 2022" starttimestamp="1647394201042" timestamp="107209" type="ECLIPSE_MAXIMIZED" />
  <Command __id="65" _type="ShellCommand" date="Tue Mar 15 21:31:48 EDT 2022" starttimestamp="1647394201042" timestamp="107271" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="67" _type="PauseCommand" date="Tue Mar 15 21:32:19 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="138520">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[31248]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="68" _type="SelectTextCommand" caretOffset="1881" date="Tue Mar 15 21:32:19 EDT 2022" end="1881" start="1864" starttimestamp="1647394201042" timestamp="138662" />
  <Command __id="69" _type="SelectTextCommand" caretOffset="1881" date="Tue Mar 15 21:32:19 EDT 2022" end="1881" start="1864" starttimestamp="1647394201042" timestamp="138709" />
  <Command __id="70" _type="MoveCaretCommand" caretOffset="1890" date="Tue Mar 15 21:32:20 EDT 2022" docOffset="2661" starttimestamp="1647394201042" timestamp="139249" />
  <Command __id="71" _type="MoveCaretCommand" caretOffset="1890" date="Tue Mar 15 21:32:20 EDT 2022" docOffset="2661" starttimestamp="1647394201042" timestamp="139250" />
  <Command __id="72" _type="MoveCaretCommand" caretOffset="1915" date="Tue Mar 15 21:32:20 EDT 2022" docOffset="2686" starttimestamp="1647394201042" timestamp="139956" />
  <Command __id="73" _type="MoveCaretCommand" caretOffset="1915" date="Tue Mar 15 21:32:20 EDT 2022" docOffset="2686" starttimestamp="1647394201042" timestamp="139956" />
  <Command __id="75" _type="PauseCommand" date="Tue Mar 15 21:32:22 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="141369">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1413]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="74" _type="SelectTextCommand" caretOffset="1864" date="Tue Mar 15 21:32:22 EDT 2022" end="1892" start="1864" starttimestamp="1647394201042" timestamp="141369" />
  <Command __id="76" _type="SelectTextCommand" caretOffset="1864" date="Tue Mar 15 21:32:22 EDT 2022" end="1892" start="1864" starttimestamp="1647394201042" timestamp="141370" />
  <Command __id="78" _type="InsertStringCommand" date="Tue Mar 15 21:32:23 EDT 2022" starttimestamp="1647394201042" timestamp="142061" timestamp2="142061">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="79" _type="InsertStringCommand" date="Tue Mar 15 21:32:23 EDT 2022" starttimestamp="1647394201042" timestamp="142062" timestamp2="142062">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="80" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 21:32:23 EDT 2022" starttimestamp="1647394201042" timestamp="142594" />
  <Command __id="81" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:32:24 EDT 2022" starttimestamp="1647394201042" timestamp="143162" />
  <Command __id="82" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:32:24 EDT 2022" starttimestamp="1647394201042" timestamp="143310" />
  <Command __id="84" _type="MoveCaretCommand" caretOffset="1636" date="Tue Mar 15 21:32:25 EDT 2022" docOffset="2441" starttimestamp="1647394201042" timestamp="144100" />
  <Command __id="86" _type="PauseCommand" date="Tue Mar 15 21:32:29 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="148137">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4037]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="85" _type="MoveCaretCommand" caretOffset="1823" date="Tue Mar 15 21:32:29 EDT 2022" docOffset="2628" starttimestamp="1647394201042" timestamp="148137" />
  <Command __id="88" _type="PauseCommand" date="Tue Mar 15 21:32:31 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="150876">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2739]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="87" _type="SelectTextCommand" caretOffset="1636" date="Tue Mar 15 21:32:31 EDT 2022" end="1636" start="1608" starttimestamp="1647394201042" timestamp="150876" />
  <Command __id="90" _type="InsertStringCommand" date="Tue Mar 15 21:32:32 EDT 2022" starttimestamp="1647394201042" timestamp="150974" timestamp2="150974">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="91" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 21:32:32 EDT 2022" starttimestamp="1647394201042" timestamp="151613" />
  <Command __id="92" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:32:33 EDT 2022" starttimestamp="1647394201042" timestamp="152052" />
  <Command __id="93" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:32:33 EDT 2022" starttimestamp="1647394201042" timestamp="152103" />
  <Command __id="95" _type="SelectTextCommand" caretOffset="1718" date="Tue Mar 15 21:32:33 EDT 2022" end="1718" start="1690" starttimestamp="1647394201042" timestamp="152883" />
  <Command __id="96" _type="MoveCaretCommand" caretOffset="1692" date="Tue Mar 15 21:32:34 EDT 2022" docOffset="2534" starttimestamp="1647394201042" timestamp="153825" />
  <Command __id="112" _type="PauseCommand" date="Tue Mar 15 21:33:01 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="180203">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11282]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="111" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:33:01 EDT 2022" starttimestamp="1647394201042" timestamp="180203" />
  <Command __id="113" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:33:01 EDT 2022" starttimestamp="1647394201042" timestamp="180220" />
  <Command __id="115" _type="PauseCommand" date="Tue Mar 15 21:33:07 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="186626">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6406]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="116" _type="MoveCaretCommand" caretOffset="19" date="Tue Mar 15 21:33:08 EDT 2022" docOffset="19" starttimestamp="1647394201042" timestamp="186961" />
  <Command __id="118" _type="PauseCommand" date="Tue Mar 15 21:33:10 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="189818">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2857]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="117" _type="MoveCaretCommand" caretOffset="361" date="Tue Mar 15 21:33:10 EDT 2022" docOffset="929" starttimestamp="1647394201042" timestamp="189818" />
  <Command __id="119" _type="SelectTextCommand" caretOffset="363" date="Tue Mar 15 21:33:10 EDT 2022" end="363" start="359" starttimestamp="1647394201042" timestamp="189949" />
  <Command __id="121" _type="PauseCommand" date="Tue Mar 15 21:33:13 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="192314">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2365]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="122" _type="InsertStringCommand" date="Tue Mar 15 21:33:13 EDT 2022" starttimestamp="1647394201042" timestamp="192326" timestamp2="192326">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="124" _type="InsertStringCommand" date="Tue Mar 15 21:33:13 EDT 2022" starttimestamp="1647394201042" timestamp="192466" timestamp2="192466">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="126" _type="InsertStringCommand" date="Tue Mar 15 21:33:13 EDT 2022" starttimestamp="1647394201042" timestamp="192646" timestamp2="192646">
    <data><![CDATA[9]]></data>
  </Command>
  <Command __id="128" _type="InsertStringCommand" date="Tue Mar 15 21:33:13 EDT 2022" starttimestamp="1647394201042" timestamp="192766" timestamp2="192766">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="129" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 21:33:14 EDT 2022" starttimestamp="1647394201042" timestamp="193552" />
  <Command __id="130" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:33:14 EDT 2022" starttimestamp="1647394201042" timestamp="193689" />
  <Command __id="131" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:33:14 EDT 2022" starttimestamp="1647394201042" timestamp="193719" />
  <Command __id="133" _type="PauseCommand" date="Tue Mar 15 21:33:18 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="197472">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3753]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="134" _type="SelectTextCommand" caretOffset="622" date="Tue Mar 15 21:33:18 EDT 2022" end="622" start="576" starttimestamp="1647394201042" timestamp="197692" />
  <Command __id="136" _type="PauseCommand" date="Tue Mar 15 21:33:20 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="199010">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1318]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="135" _type="MoveCaretCommand" caretOffset="257" date="Tue Mar 15 21:33:20 EDT 2022" docOffset="765" starttimestamp="1647394201042" timestamp="199010" />
  <Command __id="137" _type="SelectTextCommand" caretOffset="259" date="Tue Mar 15 21:33:20 EDT 2022" end="259" start="255" starttimestamp="1647394201042" timestamp="199120" />
  <Command __id="139" _type="InsertStringCommand" date="Tue Mar 15 21:33:20 EDT 2022" starttimestamp="1647394201042" timestamp="199676" timestamp2="199676">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="141" _type="InsertStringCommand" date="Tue Mar 15 21:33:20 EDT 2022" starttimestamp="1647394201042" timestamp="199902" timestamp2="199902">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="143" _type="InsertStringCommand" date="Tue Mar 15 21:33:21 EDT 2022" starttimestamp="1647394201042" timestamp="200523" timestamp2="200523">
    <data><![CDATA[9]]></data>
  </Command>
  <Command __id="145" _type="InsertStringCommand" date="Tue Mar 15 21:33:21 EDT 2022" starttimestamp="1647394201042" timestamp="200684" timestamp2="200684">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="146" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 21:33:22 EDT 2022" starttimestamp="1647394201042" timestamp="201132" />
  <Command __id="147" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:33:22 EDT 2022" starttimestamp="1647394201042" timestamp="201220" />
  <Command __id="148" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:33:22 EDT 2022" starttimestamp="1647394201042" timestamp="201245" />
  <Command __id="150" _type="PauseCommand" date="Tue Mar 15 21:33:27 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="206244">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4999]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="151" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 15 21:33:27 EDT 2022" docOffset="0" starttimestamp="1647394201042" timestamp="206499" />
  <Command __id="153" _type="PauseCommand" date="Tue Mar 15 21:33:28 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="207549">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1050]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="152" _type="MoveCaretCommand" caretOffset="258" date="Tue Mar 15 21:33:28 EDT 2022" docOffset="800" starttimestamp="1647394201042" timestamp="207549" />
  <Command __id="154" _type="SelectTextCommand" caretOffset="261" date="Tue Mar 15 21:33:28 EDT 2022" end="261" start="257" starttimestamp="1647394201042" timestamp="207667" />
  <Command __id="156" _type="InsertStringCommand" date="Tue Mar 15 21:33:29 EDT 2022" starttimestamp="1647394201042" timestamp="208181" timestamp2="208181">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="158" _type="InsertStringCommand" date="Tue Mar 15 21:33:29 EDT 2022" starttimestamp="1647394201042" timestamp="208442" timestamp2="208442">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="160" _type="InsertStringCommand" date="Tue Mar 15 21:33:29 EDT 2022" starttimestamp="1647394201042" timestamp="208602" timestamp2="208602">
    <data><![CDATA[9]]></data>
  </Command>
  <Command __id="162" _type="InsertStringCommand" date="Tue Mar 15 21:33:29 EDT 2022" starttimestamp="1647394201042" timestamp="208711" timestamp2="208711">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="163" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 21:33:30 EDT 2022" starttimestamp="1647394201042" timestamp="209190" />
  <Command __id="164" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:33:30 EDT 2022" starttimestamp="1647394201042" timestamp="209321" />
  <Command __id="165" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:33:30 EDT 2022" starttimestamp="1647394201042" timestamp="209344" />
  <Command __id="167" _type="PauseCommand" date="Tue Mar 15 21:33:31 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="210848">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1504]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="168" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 15 21:33:32 EDT 2022" docOffset="0" starttimestamp="1647394201042" timestamp="211193" />
  <Command __id="169" _type="MoveCaretCommand" caretOffset="258" date="Tue Mar 15 21:33:32 EDT 2022" docOffset="766" starttimestamp="1647394201042" timestamp="211952" />
  <Command __id="170" _type="SelectTextCommand" caretOffset="260" date="Tue Mar 15 21:33:33 EDT 2022" end="260" start="256" starttimestamp="1647394201042" timestamp="212073" />
  <Command __id="172" _type="InsertStringCommand" date="Tue Mar 15 21:33:33 EDT 2022" starttimestamp="1647394201042" timestamp="212568" timestamp2="212568">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="174" _type="InsertStringCommand" date="Tue Mar 15 21:33:33 EDT 2022" starttimestamp="1647394201042" timestamp="212801" timestamp2="212801">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="176" _type="InsertStringCommand" date="Tue Mar 15 21:33:34 EDT 2022" starttimestamp="1647394201042" timestamp="212962" timestamp2="212962">
    <data><![CDATA[9]]></data>
  </Command>
  <Command __id="178" _type="InsertStringCommand" date="Tue Mar 15 21:33:34 EDT 2022" starttimestamp="1647394201042" timestamp="213071" timestamp2="213071">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="179" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 21:33:34 EDT 2022" starttimestamp="1647394201042" timestamp="213558" />
  <Command __id="180" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:33:34 EDT 2022" starttimestamp="1647394201042" timestamp="213660" />
  <Command __id="181" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:33:34 EDT 2022" starttimestamp="1647394201042" timestamp="213683" />
  <Command __id="183" _type="PauseCommand" date="Tue Mar 15 21:33:37 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="216604">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2921]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="182" _type="ShellCommand" date="Tue Mar 15 21:33:37 EDT 2022" starttimestamp="1647394201042" timestamp="216604" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="185" _type="PauseCommand" date="Tue Mar 15 21:33:44 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="223216">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6612]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="184" _type="ShellCommand" date="Tue Mar 15 21:33:44 EDT 2022" starttimestamp="1647394201042" timestamp="223216" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="187" _type="PauseCommand" date="Tue Mar 15 21:33:49 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="228285">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5069]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="188" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 15 21:33:49 EDT 2022" docOffset="0" starttimestamp="1647394201042" timestamp="228639" />
  <Command __id="204" _type="PauseCommand" date="Tue Mar 15 21:34:05 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="244193">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[10977]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="203" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:34:05 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="244193" type="Run" />
  <Command __id="205" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:34:05 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="244194" type="Run" />
  <Command __id="207" _type="PauseCommand" date="Tue Mar 15 21:34:08 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="247016">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2822]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="206" _type="ShellCommand" date="Tue Mar 15 21:34:08 EDT 2022" starttimestamp="1647394201042" timestamp="247016" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="209" _type="PauseCommand" date="Tue Mar 15 21:34:10 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="249421">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2405]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="208" _type="ConsoleOutput" date="Tue Mar 15 21:34:10 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="249421" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):21
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"E***Port already in use: 1099; nested exception is: ¶	java.net.BindException: Address already in use: NET_Bind"), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):21"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="211" _type="PauseCommand" date="Tue Mar 15 21:34:26 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="265859">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[16438]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="210" _type="ConsoleOutput" date="Tue Mar 15 21:34:26 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="265859" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):21"), Diff(INSERT,"Number of traces > 600  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="213" _type="PauseCommand" date="Tue Mar 15 21:34:29 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="268070">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2211]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="212" _type="ConsoleOutput" date="Tue Mar 15 21:34:29 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="268070" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="214" _type="ConsoleOutput" date="Tue Mar 15 21:34:29 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="268219" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶"), Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="241" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:35:00 EDT 2022" starttimestamp="1647394201042" timestamp="299380" />
  <Command __id="242" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:35:00 EDT 2022" starttimestamp="1647394201042" timestamp="299381" />
  <Command __id="243" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:35:00 EDT 2022" starttimestamp="1647394201042" timestamp="299386" />
  <Command __id="247" _type="PauseCommand" date="Tue Mar 15 21:35:44 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="343474">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10220]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="246" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:35:44 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="343474" type="Run" />
  <Command __id="248" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:35:44 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="343475" type="Run" />
  <Command __id="250" _type="PauseCommand" date="Tue Mar 15 21:35:47 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="346289">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2814]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="249" _type="MoveCaretCommand" caretOffset="1750" date="Tue Mar 15 21:35:47 EDT 2022" docOffset="2278" starttimestamp="1647394201042" timestamp="346289" />
  <Command __id="252" _type="PauseCommand" date="Tue Mar 15 21:35:50 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="349335">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3046]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="253" _type="MoveCaretCommand" caretOffset="260" date="Tue Mar 15 21:35:50 EDT 2022" docOffset="768" starttimestamp="1647394201042" timestamp="349488" />
  <Command __id="27" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:30:05 EDT 2022" docASTNodeCount="329" docActiveCodeLength="2406" docExpressionCount="226" docLength="2421" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4541">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\client\Client.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package comp533.client;


import comp533.reducer.ReducerInterface;
import comp533.reducer.ReducerFactory;
import comp533.keyValue.KeyValueInterface;
import comp533.main.TokenCounterModel;
import comp533.main.RemoteModel;
import comp533.main.ModelInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;


import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;
import java.util.Map;

public class Client extends AMapReduceTracer implements ClientInterface {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public static void main(String[] args) {
        try {
            Registry rmiRegistry = LocateRegistry.getRegistry(1099);
            Client remoteClient = new Client();
            UnicastRemoteObject.exportObject(remoteClient, 0);
            rmiRegistry.rebind(Client.class.getName(), remoteClient);
            
            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());
            counter1.registerClient(remoteClient);
            
            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
            System.out.println(counter1.toString());
            System.out.println(remoteClient.toString());
            System.out.println("?????????????????????????????????");
            
            remoteClient.synchronizedWait();
            AMapReduceTracer.traceExit(ModelInterface.class);
            System.exit(0);
        } catch (RemoteException | NotBoundException | InterruptedException ex) {
            ex.printStackTrace();
        }
    }

	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs) throws RemoteException {
    	this.trace("lalallaallalallaalallaalala");
        this.traceRemoteList(serializableKeyValuePairs);
        this.trace("bababababababbabababababababba");
        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();
        Map<String, Integer> result = reducer.reduce(serializableKeyValuePairs);
        this.traceRemoteResult(result);
        return result;
    }

    public void quit() {
        this.traceQuit();
        this.synchronizedNotify();
    }

	


}
]]></snapshot>
  </Command>
  <Command __id="29" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:30:05 EDT 2022" docASTNodeCount="1427" docActiveCodeLength="10203" docExpressionCount="887" docLength="10203" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4687">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\TokenCounterModel.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package comp533.main;

import comp533.barrier.BarrierInterface;
import comp533.barrier.Barrier;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.keyValue.KeyValue;
import comp533.joiner.Joiner;
import comp533.mapper.MapperInterface;
import comp533.mapper.Mapper;
import comp533.slave.SlaveInterface;
import comp533.slave.Slave;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

import java.rmi.RemoteException;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {
    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
    private Map<String, Integer> result;
    private int numThreads;
    private List<Thread> threads;
    private List<SlaveInterface> slaves;
    private String inputString;
    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;
    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;
    private JoinerInterface joiner;
    private BarrierInterface barrier;
    private List<ClientInterface> registeredClients;
    private Stack<SlaveInterface> unassignedSlaves;
    private Stack<ClientInterface> unassignedClients;


    public TokenCounterModel() {
        this.inputString = null;
        this.numThreads = 0;
        this.reductionQueueList = new ArrayList<>();
        this.slaves = new ArrayList<>();
        this.registeredClients = new ArrayList<>();
        this.unassignedSlaves = new Stack<>();
        this.unassignedClients = new Stack<>();
    }

    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        this.pcs.addPropertyChangeListener(listener);
    }

    public String getInputString() {
        return this.inputString;
    }

    public void matchSlavesToClients() {
        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {
        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
            System.out.println(unassignedSlaves.capacity());
            System.out.println(unassignedClients.capacity());
            System.out.println("################################");
            for (int i = 0; i < unassignedClients.capacity(); i++) {
            	
                
            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();
                ClientInterface unassignedClient = this.unassignedClients.pop();
            	
                unassignedSlave.setClient(unassignedClient);
            }
            
        } else {
        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        }
    }

    private void clearReductionQueues() {
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void unblockSlaveThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            SlaveInterface currentSlave = this.slaves.get(i);
            currentSlave.notifySlave();
        }
    }

    private void initializeStructures() {
        this.result = new HashMap<>();
        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {
        this.traceEnqueueRequest(keyValue);
        this.boundedBuffer.put(keyValue);
        this.traceEnqueue(this.boundedBuffer);
    }

    private void endEnqueue() {
        try {
            for (int i = 0; i < this.numThreads; i++) {
                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);
                this.traceEnqueueRequest(endKeyValue);
                this.boundedBuffer.put(endKeyValue);
            }
        } catch (InterruptedException ex) {
            Tracer.error(ex.getMessage());
        }
    }

    private void startThreads() {
        for (Thread currentThread: this.threads) {
            if (currentThread.getState() == Thread.State.NEW) {
                currentThread.start();
            }
        }
    }

    private void problemSplit() throws InterruptedException {
        String[] tokens = this.inputString.split(" ");
        MapperInterface<String, Integer> mapper = new Mapper();
        for (String token: tokens) {
            KeyValueInterface<String, Integer> keyValue = mapper.map(token);
            this.produceBoundedBuffer(keyValue);
        }
        this.endEnqueue();
    }

    private void mergeIntermediaryResults(ViewInterface view) {
        Map<String, Integer> oldResult = this.result;
        this.result = new HashMap<>();
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {
            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {
            	final String key = keyValues.getKey();
                final Integer value = keyValues.getValue();
                if (result.containsKey(key)) {
                	final int oldValue = result.get(key);
                	final int newValue = oldValue+value;
                	this.result.put(key, newValue);
                } else {
                	this.result.put(key, value);
                }
            }
        }
        this.traceRemoteResult(result);
        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",
                oldResult, this.result);
        this.pcs.firePropertyChange(updateResultEvent);
        view.propertyChange(updateResultEvent);
    }

    private void updateResult(ViewInterface view) throws InterruptedException {
        this.initializeStructures();
        this.clearReductionQueues();
        this.startThreads();
        this.unblockSlaveThreads();
        this.problemSplit();
        this.joiner.join();
        this.mergeIntermediaryResults(view);
    }

    public void setInputString(String newInputString, ViewInterface view) {
        try {
            String oldInputString = this.inputString;
            this.inputString = newInputString;
            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",
                    oldInputString, newInputString);
            this.pcs.firePropertyChange(updateInputStringEvent);
            view.propertyChange(updateInputStringEvent);
            this.updateResult(view);
        } catch (InterruptedException ex) {
            Tracer.error(Arrays.toString(ex.getStackTrace()));
        }
    }

    public int getNumThreads() {
        return this.numThreads;
    }

    public BarrierInterface getBarrier() {
        return this.barrier;
    }

    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {
        return this.boundedBuffer;
    }

    public JoinerInterface getJoiner() {
        return this.joiner;
    }

    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {
        return this.reductionQueueList;
    }

    public Map<String, Integer> getResult() {
        return this.result;
    }

    public void updateThreads() {
        List<Thread> oldThreads = this.threads;
        this.joiner = new Joiner(this.numThreads);
        this.barrier = new Barrier(this.numThreads);
        this.threads = new ArrayList<>(this.numThreads);
        for (int i = 0; i < this.numThreads; i++) {
            Slave slave = new Slave(i, this);
            this.slaves.add(slave);
            this.unassignedSlaves.add(slave);
            Thread newThread = new Thread(slave, "Slave" + i);
            this.threads.add(newThread);
            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();
            this.reductionQueueList.add(reductionQueue);
        }
        this.matchSlavesToClients();
        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",
                oldThreads, this.threads);
        this.pcs.firePropertyChange(updateThreadsEvent);
    }

    public void registerClient(ClientInterface clientToRegister) {
        this.traceRegister(clientToRegister);
        this.unassignedClients.add(clientToRegister);
        this.registeredClients.add(clientToRegister);
    }

    public void callClientQuit() throws RemoteException {
        for (ClientInterface registeredClient: registeredClients) {
            registeredClient.quit();
        }
    }

    public void interruptThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            this.slaves.get(i).signalQuit();
            this.threads.get(i).interrupt();
        }
    }

    public void setNumThreads(int numThreads, ViewInterface view) {
        int oldNumThreads = this.numThreads;
        this.numThreads = numThreads;
        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",
                oldNumThreads, numThreads);
        this.pcs.firePropertyChange(setNumThreadsEvent);
        this.updateThreads();
    }

    @Override
    public String toString() {
        return AMapReduceTracer.MODEL;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof TokenCounterModel)) {
            return false;
        }
        TokenCounterModel otherCounter = (TokenCounterModel) obj;
        return this.getResult() == otherCounter.getResult();
    }
}
]]></snapshot>
  </Command>
  <Command __id="66" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:32:19 EDT 2022" docASTNodeCount="1427" docActiveCodeLength="10203" docExpressionCount="887" docLength="10203" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="138519">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\TokenCounterModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.main;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, Integer> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<SlaveInterface> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<SlaveInterface> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public TokenCounterModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶            System.out.println(unassignedSlaves.capacity());¶            System.out.println(unassignedClients.capacity());¶            System.out.println("################################");¶            for (int i = 0; i < unassignedClients.capacity(); i++) {¶            	¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        MapperInterface<String, Integer> mapper = new Mapper();¶        for (String token: tokens) {¶            KeyValueInterface<String, Integer> keyValue = mapper.map(token);¶            this.produceBoundedBuffer(keyValue);¶        }¶        this.endEnqueue();¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, Integer> oldResult = this.result;¶        this.result = new HashMap<>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final Integer value = keyValues.getValue();¶                if (result.containsKey(key)) {¶                	final int oldValue = result.get(key);¶                	final int newValue = oldValue+value;¶                	this.result.put(key, newValue);¶                } else {¶                	this.result.put(key, value);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, Integer> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            Slave slave = new Slave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof TokenCounterModel)) {¶            return false;¶        }¶        TokenCounterModel otherCounter = (TokenCounterModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="77" _type="Replace" date="Tue Mar 15 21:32:23 EDT 2022" docASTNodeCount="1425" docActiveCodeLength="10176" docExpressionCount="885" docLength="10176" endLine="67" insertionLength="1" int_docASTNodeCount="1370" int_docActiveCodeLength="10175" int_docExpressionCount="842" int_docLength="10175" length="28" offset="2635" startLine="67" starttimestamp="1647394201042" timestamp="142041">
    <deletedText><![CDATA[unassignedClients.capacity()]]></deletedText>
    <insertedText><![CDATA[2]]></insertedText>
  </DocumentChange>
  <Command __id="83" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:32:24 EDT 2022" docASTNodeCount="1427" docActiveCodeLength="10200" docExpressionCount="886" docLength="10200" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="143896">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\SummerModel.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package comp533.main;

import comp533.barrier.BarrierInterface;
import comp533.barrier.Barrier;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.keyValue.KeyValue;
import comp533.joiner.Joiner;
import comp533.mapper.MapperInterface;
import comp533.mapper.SumMapper;
import comp533.mapper.Mapper;
import comp533.slave.SlaveInterface;
import comp533.slave.Slave;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

import java.rmi.RemoteException;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class SummerModel extends AMapReduceTracer implements ModelInterface, RemoteModel {
    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
    private Map<String, Integer> result;
    private int numThreads;
    private List<Thread> threads;
    private List<SlaveInterface> slaves;
    private String inputString;
    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;
    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;
    private JoinerInterface joiner;
    private BarrierInterface barrier;
    private List<ClientInterface> registeredClients;
    private Stack<SlaveInterface> unassignedSlaves;
    private Stack<ClientInterface> unassignedClients;


    public SummerModel() {
        this.inputString = null;
        this.numThreads = 0;
        this.reductionQueueList = new ArrayList<>();
        this.slaves = new ArrayList<>();
        this.registeredClients = new ArrayList<>();
        this.unassignedSlaves = new Stack<>();
        this.unassignedClients = new Stack<>();
    }

    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        this.pcs.addPropertyChangeListener(listener);
    }

    public String getInputString() {
        return this.inputString;
    }

    public void matchSlavesToClients() {
        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {
            
            for (int i = 0; i < unassignedClients.capacity(); i++) {
            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
                System.out.println(unassignedSlaves);
                System.out.println(unassignedClients);
                System.out.println("################################");
                
            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();
                ClientInterface unassignedClient = this.unassignedClients.pop();
            	
                unassignedSlave.setClient(unassignedClient);
            }
            
        } else {
        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        }
    }

    private void clearReductionQueues() {
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void unblockSlaveThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            SlaveInterface currentSlave = this.slaves.get(i);
            currentSlave.notifySlave();
        }
    }

    private void initializeStructures() {
        this.result = new HashMap<>();
        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {
        this.traceEnqueueRequest(keyValue);
        this.boundedBuffer.put(keyValue);
        this.traceEnqueue(this.boundedBuffer);
    }

    private void endEnqueue() {
        try {
            for (int i = 0; i < this.numThreads; i++) {
                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);
                this.traceEnqueueRequest(endKeyValue);
                this.boundedBuffer.put(endKeyValue);
            }
        } catch (InterruptedException ex) {
            Tracer.error(ex.getMessage());
        }
    }

    private void startThreads() {
        for (Thread currentThread: this.threads) {
            if (currentThread.getState() == Thread.State.NEW) {
                currentThread.start();
            }
        }
    }

    private void problemSplit() throws InterruptedException {
        String[] tokens = this.inputString.split(" ");
        MapperInterface<String, Integer> mapper = new SumMapper();
        for (String token: tokens) {
            KeyValueInterface<String, Integer> keyValue = mapper.map(token);
            this.produceBoundedBuffer(keyValue);
        }
        this.endEnqueue();
    }

    private void mergeIntermediaryResults(ViewInterface view) {
        Map<String, Integer> oldResult = this.result;
        this.result = new HashMap<>();
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {
            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {
            	final String key = keyValues.getKey();
                final Integer value = keyValues.getValue();
                if (result.containsKey(key)) {
                	final int oldValue = result.get(key);
                	final int newValue = oldValue+value;
                	this.result.put(key, newValue);
                } else {
                	this.result.put(key, value);
                }
            }
        }
        this.traceRemoteResult(result);
        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",
                oldResult, this.result);
        this.pcs.firePropertyChange(updateResultEvent);
        view.propertyChange(updateResultEvent);
    }

    private void updateResult(ViewInterface view) throws InterruptedException {
        this.initializeStructures();
        this.clearReductionQueues();
        this.startThreads();
        this.unblockSlaveThreads();
        this.problemSplit();
        this.joiner.join();
        this.mergeIntermediaryResults(view);
    }

    public void setInputString(String newInputString, ViewInterface view) {
        try {
            String oldInputString = this.inputString;
            this.inputString = newInputString;
            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",
                    oldInputString, newInputString);
            this.pcs.firePropertyChange(updateInputStringEvent);
            view.propertyChange(updateInputStringEvent);
            this.updateResult(view);
        } catch (InterruptedException ex) {
            Tracer.error(Arrays.toString(ex.getStackTrace()));
        }
    }

    public int getNumThreads() {
        return this.numThreads;
    }

    public BarrierInterface getBarrier() {
        return this.barrier;
    }

    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {
        return this.boundedBuffer;
    }

    public JoinerInterface getJoiner() {
        return this.joiner;
    }

    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {
        return this.reductionQueueList;
    }

    public Map<String, Integer> getResult() {
        return this.result;
    }

    public void updateThreads() {
        List<Thread> oldThreads = this.threads;
        this.joiner = new Joiner(this.numThreads);
        this.barrier = new Barrier(this.numThreads);
        this.threads = new ArrayList<>(this.numThreads);
        for (int i = 0; i < this.numThreads; i++) {
            Slave slave = new Slave(i, this);
            this.slaves.add(slave);
            this.unassignedSlaves.add(slave);
            Thread newThread = new Thread(slave, "Slave" + i);
            this.threads.add(newThread);
            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();
            this.reductionQueueList.add(reductionQueue);
        }
        this.matchSlavesToClients();
        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",
                oldThreads, this.threads);
        this.pcs.firePropertyChange(updateThreadsEvent);
    }

    
    
    public void registerClient(ClientInterface clientToRegister) {
        this.traceRegister(clientToRegister);
        this.unassignedClients.add(clientToRegister);
        this.registeredClients.add(clientToRegister);
    }

    public void callClientQuit() throws RemoteException {
        for (ClientInterface registeredClient: registeredClients) {
            registeredClient.quit();
        }
    }

    public void interruptThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            this.slaves.get(i).signalQuit();
            this.threads.get(i).interrupt();
        }
    }

    public void setNumThreads(int numThreads, ViewInterface view) {
        int oldNumThreads = this.numThreads;
        this.numThreads = numThreads;
        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",
                oldNumThreads, numThreads);
        this.pcs.firePropertyChange(setNumThreadsEvent);
        this.updateThreads();
    }

    public String toString() {
        return AMapReduceTracer.MODEL;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof SummerModel)) {
            return false;
        }
        SummerModel otherCounter = (SummerModel) obj;
        return this.getResult() == otherCounter.getResult();
    }
}
]]></snapshot>
  </Command>
  <DocumentChange __id="89" _type="Replace" date="Tue Mar 15 21:32:32 EDT 2022" docASTNodeCount="1425" docActiveCodeLength="10173" docExpressionCount="884" docLength="10173" endLine="65" insertionLength="1" int_docASTNodeCount="1342" int_docActiveCodeLength="10172" int_docExpressionCount="817" int_docLength="10172" length="28" offset="2413" startLine="65" starttimestamp="1647394201042" timestamp="150960">
    <deletedText><![CDATA[unassignedClients.capacity()]]></deletedText>
    <insertedText><![CDATA[2]]></insertedText>
  </DocumentChange>
  <Command __id="94" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:32:33 EDT 2022" docASTNodeCount="1627" docActiveCodeLength="11219" docExpressionCount="990" docLength="11234" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="152719">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookModel.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package facebook;

import comp533.barrier.BarrierInterface;
import comp533.barrier.Barrier;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.main.RemoteModel;
import comp533.keyValue.KeyValue;
import comp533.joiner.Joiner;
import comp533.mapper.MapperInterface;
import comp533.main.ModelInterface;
import comp533.mapper.Mapper;
import comp533.slave.SlaveInterface;
import comp533.slave.Slave;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

import java.rmi.RemoteException;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
    private Map<String, List<String>> result;
    private int numThreads;
    private List<Thread> threads;
    private List<FacebookSlave> slaves;
    private String inputString;
    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;
    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;
    private JoinerInterface joiner;
    private BarrierInterface barrier;
    private List<ClientInterface> registeredClients;
    private Stack<FacebookSlave> unassignedSlaves;
    private Stack<ClientInterface> unassignedClients;


    public FacebookModel() {
        this.inputString = null;
        this.numThreads = 0;
        this.reductionQueueList = new ArrayList<>();
        this.slaves = new ArrayList<>();
        this.registeredClients = new ArrayList<>();
        this.unassignedSlaves = new Stack<>();
        this.unassignedClients = new Stack<>();
    }

    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        this.pcs.addPropertyChangeListener(listener);
    }

    public String getInputString() {
        return this.inputString;
    }

    public void matchSlavesToClients() {
        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {
            
            for (int i = 0; i < unassignedClients.capacity(); i++) {
            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
                System.out.println(unassignedSlaves);
                System.out.println(unassignedClients);
                System.out.println("################################");
                
            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();
                ClientInterface unassignedClient = this.unassignedClients.pop();
            	
                unassignedSlave.setClient(unassignedClient);
            }
            
        } else {
        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        }
    }

    private void clearReductionQueues() {
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void unblockSlaveThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            SlaveInterface currentSlave = this.slaves.get(i);
            currentSlave.notifySlave();
        }
    }

    private void initializeStructures() {
        this.result = new HashMap<>();
        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {
        this.traceEnqueueRequest(keyValue);
        this.boundedBuffer.put(keyValue);
        this.traceEnqueue(this.boundedBuffer);
    }

    private void endEnqueue() {
        try {
            for (int i = 0; i < this.numThreads; i++) {
                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);
                this.traceEnqueueRequest(endKeyValue);
                this.boundedBuffer.put(endKeyValue);
            }
        } catch (InterruptedException ex) {
            Tracer.error(ex.getMessage());
        }
    }

    private void startThreads() {
        for (Thread currentThread: this.threads) {
            if (currentThread.getState() == Thread.State.NEW) {
                currentThread.start();
            }
        }
    }

    private void problemSplit() throws InterruptedException {
        String[] tokens = this.inputString.split(" ");
        FacebookMapper mapper = new FacebookMapper();
        for (String token: tokens) {
        	String[] all = token.split(",");
        	String user = all[0];
        	String[] friends = Arrays.copyOfRange(all, 1, all.length);
        	Arrays.sort(friends);
        	KeyValueInterface<String, List<String>> keyValue;
        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");
        	this.traceRemoteList(friends);
        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");
        	for (String friend: friends) {
        		keyValue = mapper.map(token, user, friend, friends);
        		this.produceBoundedBuffer(keyValue);
     
            }
            
        }
        this.endEnqueue();
        

    }

    private void mergeIntermediaryResults(ViewInterface view) {
        Map<String, List<String>> oldResult = this.result;
        this.result = new HashMap<String, List<String>>();
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {
            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {
            	final String key = keyValues.getKey();
                final List<String> value = keyValues.getValue();
                if (result.get(key) == null) {
                	result.put(key, value);
                } else {
                    final List<String> current = result.get(key);
                    
    				final List<String> newValue = intersection(current, value);
    				result.put(key, newValue);
                }
            }
        }
        this.traceRemoteResult(result);
        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",
                oldResult, this.result);
        this.pcs.firePropertyChange(updateResultEvent);
        view.propertyChange(updateResultEvent);
    }

    public static <T> List<T> intersection(List<T> list1, List<T> list2) {
        List<T> list = new ArrayList<T>();

        for (T t : list1) {
            if(list2.contains(t)) {
                list.add(t);
            }
        }

        return list;
    }
    
    private void updateResult(ViewInterface view) throws InterruptedException {
        this.initializeStructures();
        this.clearReductionQueues();
        this.startThreads();
        this.unblockSlaveThreads();
        this.problemSplit();
        this.joiner.join();
        this.mergeIntermediaryResults(view);
    }

    public void setInputString(String newInputString, ViewInterface view) {
        try {
            String oldInputString = this.inputString;
            this.inputString = newInputString;
            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",
                    oldInputString, newInputString);
            this.pcs.firePropertyChange(updateInputStringEvent);
            view.propertyChange(updateInputStringEvent);
            this.updateResult(view);
        } catch (InterruptedException ex) {
            Tracer.error(Arrays.toString(ex.getStackTrace()));
        }
    }

    public int getNumThreads() {
        return this.numThreads;
    }

    public BarrierInterface getBarrier() {
        return this.barrier;
    }

    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {
        return this.boundedBuffer;
    }

    public JoinerInterface getJoiner() {
        return this.joiner;
    }

    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {
        return this.reductionQueueList;
    }

    public Map<String, List<String>> getResult() {
        return this.result;
    }

    public void updateThreads() {
        List<Thread> oldThreads = this.threads;
        this.joiner = new Joiner(this.numThreads);
        this.barrier = new Barrier(this.numThreads);
        this.threads = new ArrayList<>(this.numThreads);
        for (int i = 0; i < this.numThreads; i++) {
            FacebookSlave slave = new FacebookSlave(i, this);
            this.slaves.add(slave);
            this.unassignedSlaves.add(slave);
            Thread newThread = new Thread(slave, "Slave" + i);
            this.threads.add(newThread);
            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();
            this.reductionQueueList.add(reductionQueue);
        }
        this.matchSlavesToClients();
        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",
                oldThreads, this.threads);
        this.pcs.firePropertyChange(updateThreadsEvent);
    }

    public void registerClient(ClientInterface clientToRegister) {
        this.traceRegister(clientToRegister);
        this.unassignedClients.add(clientToRegister);
        this.registeredClients.add(clientToRegister);
    }

    public void callClientQuit() throws RemoteException {
        for (ClientInterface registeredClient: registeredClients) {
            registeredClient.quit();
        }
    }

    public void interruptThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            this.slaves.get(i).signalQuit();
            this.threads.get(i).interrupt();
        }
    }

    public void setNumThreads(int numThreads, ViewInterface view) {
        int oldNumThreads = this.numThreads;
        this.numThreads = numThreads;
        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",
                oldNumThreads, numThreads);
        this.pcs.firePropertyChange(setNumThreadsEvent);
        this.updateThreads();
    }

    @Override
    public String toString() {
        return AMapReduceTracer.MODEL;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof FacebookModel)) {
            return false;
        }
        FacebookModel otherCounter = (FacebookModel) obj;
        return this.getResult() == otherCounter.getResult();
    }
}
]]></snapshot>
  </Command>
  <DocumentChange __id="97" _type="Replace" date="Tue Mar 15 21:32:36 EDT 2022" docASTNodeCount="1625" docActiveCodeLength="11192" docExpressionCount="988" docLength="11207" endLine="70" insertionLength="1" int_docASTNodeCount="1542" int_docActiveCodeLength="11191" int_docExpressionCount="921" int_docLength="11206" length="28" offset="2532" startLine="70" starttimestamp="1647394201042" timestamp="155371">
    <deletedText><![CDATA[unassignedClients.capacity()]]></deletedText>
    <insertedText><![CDATA[2]]></insertedText>
  </DocumentChange>
  <Command __id="114" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:33:07 EDT 2022" docASTNodeCount="380" docActiveCodeLength="2868" docExpressionCount="254" docLength="2917" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="186626">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\RemoteClientFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package facebook;


import comp533.reducer.ReducerInterface;
import comp533.reducer.ReducerFactory;
import comp533.client.ClientInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.main.TokenCounterModel;
import comp533.main.RemoteModel;
import comp533.main.ModelInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;


import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;
import java.util.Map;

public class RemoteClientFacebookMapReduce extends AMapReduceTracer implements ClientInterface {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public static void main(String[] args) {
        try {
            Registry rmiRegistry = LocateRegistry.getRegistry(1099);
            RemoteClientFacebookMapReduce remoteClient = new RemoteClientFacebookMapReduce();
            UnicastRemoteObject.exportObject(remoteClient, 0);
            rmiRegistry.rebind(RemoteClientFacebookMapReduce.class.getName(), remoteClient);
            
            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());
            counter1.registerClient(remoteClient);
            
            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
            System.out.println(counter1.toString());
            System.out.println(remoteClient.toString());
            System.out.println("?????????????????????????????????");
            
            remoteClient.synchronizedWait();
            AMapReduceTracer.traceExit(ModelInterface.class);
            System.exit(0);
        } catch (RemoteException | NotBoundException | InterruptedException ex) {
            ex.printStackTrace();
        }
    }

	public Map<String, List<String>> reduceNew(List<KeyValueInterface<String, List<String>>> keyValuePairs) throws RemoteException {
    	this.trace("clientreducenew5555555555555555555555555555");
        this.traceRemoteList(keyValuePairs);
        this.trace("clientreducenew66666666666666666666666666");
        FacebookReducer reducer = new FacebookReducer();
        Map<String, List<String>> result = reducer.reduce(keyValuePairs);
        this.traceRemoteResult(result);
        return result;
    }

    public void quit() {
        this.traceQuit();
        this.synchronizedNotify();
    }

	@Override
	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs)
			throws RemoteException {
		// TODO Auto-generated method stub
		this.trace("clientreducenew5555555555555555555555555555");
        this.traceRemoteList(serializableKeyValuePairs);
        this.trace("clientreducenew66666666666666666666666666");
		return null;
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="120" _type="Replace" date="Tue Mar 15 21:33:13 EDT 2022" docASTNodeCount="380" docActiveCodeLength="2865" docExpressionCount="254" docLength="2914" endLine="30" insertionLength="1" int_docASTNodeCount="379" int_docActiveCodeLength="2864" int_docExpressionCount="253" int_docLength="2913" length="4" offset="927" startLine="30" starttimestamp="1647394201042" timestamp="192314">
    <deletedText><![CDATA[1099]]></deletedText>
    <insertedText><![CDATA[1]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="123" _type="Insert" date="Tue Mar 15 21:33:13 EDT 2022" docASTNodeCount="380" docActiveCodeLength="2868" docExpressionCount="254" docLength="2917" length="3" offset="928" repeat="3" starttimestamp="1647394201042" timestamp="192462" timestamp2="192762">
    <text><![CDATA[091]]></text>
  </DocumentChange>
  <Command __id="132" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:33:18 EDT 2022" docASTNodeCount="190" docActiveCodeLength="1300" docExpressionCount="134" docLength="1300" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="197472">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\ServerFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package facebook;

import comp533.client.Client;
import comp533.controller.ControllerInterface;
import comp533.main.TokenCounterModel;
import comp533.main.RemoteModel;
import comp533.controller.Controller;
import comp533.view.View;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

public class ServerFacebookMapReduce {
    private static Registry rmiRegistry;

    public static void main(String[] args) {
        try {
            rmiRegistry = LocateRegistry.createRegistry(1099);
            RemoteModel counter1 = new FacebookModel();
            UnicastRemoteObject.exportObject(counter1, 0);
            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);
            ViewInterface view = new View();
            ControllerInterface controller = new Controller(counter1, view);
            controller.getUserInput(counter1);
            System.exit(0);
        	
        	
        } catch (RemoteException ex) {
            Tracer.error(ex.getMessage());
        }
    }
    
    
}
]]></snapshot>
  </Command>
  <DocumentChange __id="138" _type="Replace" date="Tue Mar 15 21:33:20 EDT 2022" docASTNodeCount="190" docActiveCodeLength="1297" docExpressionCount="134" docLength="1297" endLine="23" insertionLength="1" int_docASTNodeCount="189" int_docActiveCodeLength="1296" int_docExpressionCount="133" int_docLength="1296" length="4" offset="763" startLine="23" starttimestamp="1647394201042" timestamp="199667">
    <deletedText><![CDATA[1099]]></deletedText>
    <insertedText><![CDATA[1]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="140" _type="Insert" date="Tue Mar 15 21:33:20 EDT 2022" docASTNodeCount="190" docActiveCodeLength="1300" docExpressionCount="134" docLength="1300" length="3" offset="764" repeat="3" starttimestamp="1647394201042" timestamp="199898" timestamp2="200680">
    <text><![CDATA[091]]></text>
  </DocumentChange>
  <Command __id="149" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:33:27 EDT 2022" docASTNodeCount="198" docActiveCodeLength="1300" docExpressionCount="141" docLength="1300" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="206244">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\server\IntegerSummerServer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package comp533.server;

import comp533.client.Client;
import comp533.controller.ControllerInterface;
import comp533.main.TokenCounterModel;
import comp533.main.RemoteModel;
import comp533.main.SummerModel;
import comp533.controller.Controller;
import comp533.view.View;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

public class IntegerSummerServer {
    private static Registry rmiRegistry;

    public static void main(String[] args) {
        try {
            rmiRegistry = LocateRegistry.createRegistry(1099);
            RemoteModel counter1 = new SummerModel();
            UnicastRemoteObject.exportObject(counter1, 0);
            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);
            ViewInterface view = new View();
            ControllerInterface controller = new Controller(counter1, view);
            controller.getUserInput(counter1);
            System.exit(0);
        } catch (RemoteException ex) {
            Tracer.error(ex.getMessage());
        }
    }
}
]]></snapshot>
  </Command>
  <DocumentChange __id="155" _type="Replace" date="Tue Mar 15 21:33:29 EDT 2022" docASTNodeCount="198" docActiveCodeLength="1297" docExpressionCount="141" docLength="1297" endLine="24" insertionLength="1" int_docASTNodeCount="197" int_docActiveCodeLength="1296" int_docExpressionCount="140" int_docLength="1296" length="4" offset="799" startLine="24" starttimestamp="1647394201042" timestamp="208172">
    <deletedText><![CDATA[1099]]></deletedText>
    <insertedText><![CDATA[1]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="157" _type="Insert" date="Tue Mar 15 21:33:29 EDT 2022" docASTNodeCount="198" docActiveCodeLength="1300" docExpressionCount="141" docLength="1300" length="3" offset="800" repeat="3" starttimestamp="1647394201042" timestamp="208439" timestamp2="208708">
    <text><![CDATA[091]]></text>
  </DocumentChange>
  <Command __id="166" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:33:31 EDT 2022" docASTNodeCount="192" docActiveCodeLength="1271" docExpressionCount="136" docLength="1271" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="210848">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\server\TokenCounterServer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package comp533.server;

import comp533.client.Client;
import comp533.controller.ControllerInterface;
import comp533.main.TokenCounterModel;
import comp533.main.RemoteModel;
import comp533.controller.Controller;
import comp533.view.View;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

public class TokenCounterServer {
    private static Registry rmiRegistry;

    public static void main(String[] args) {
        try {
            rmiRegistry = LocateRegistry.createRegistry(1099);
            RemoteModel counter1 = new TokenCounterModel();
            UnicastRemoteObject.exportObject(counter1, 0);
            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);
            ViewInterface view = new View();
            ControllerInterface controller = new Controller(counter1, view);
            controller.getUserInput(counter1);
            System.exit(0);
        } catch (RemoteException ex) {
            Tracer.error(ex.getMessage());
        }
    }
}
]]></snapshot>
  </Command>
  <DocumentChange __id="171" _type="Replace" date="Tue Mar 15 21:33:33 EDT 2022" docASTNodeCount="192" docActiveCodeLength="1268" docExpressionCount="136" docLength="1268" endLine="23" insertionLength="1" int_docASTNodeCount="191" int_docActiveCodeLength="1267" int_docExpressionCount="135" int_docLength="1267" length="4" offset="764" startLine="23" starttimestamp="1647394201042" timestamp="212560">
    <deletedText><![CDATA[1099]]></deletedText>
    <insertedText><![CDATA[1]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="173" _type="Insert" date="Tue Mar 15 21:33:33 EDT 2022" docASTNodeCount="192" docActiveCodeLength="1271" docExpressionCount="136" docLength="1271" length="3" offset="765" repeat="3" starttimestamp="1647394201042" timestamp="212797" timestamp2="213068">
    <text><![CDATA[091]]></text>
  </DocumentChange>
  <Command __id="186" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:33:49 EDT 2022" docASTNodeCount="329" docActiveCodeLength="2406" docExpressionCount="226" docLength="2421" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="228285">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\client\Client.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.client;¶¶¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.main.ModelInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.List;¶import java.util.Map;¶¶public class Client extends AMapReduceTracer implements ClientInterface {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶¶	public static void main(String[] args) {¶        try {¶            Registry rmiRegistry = LocateRegistry.getRegistry(1099);¶            Client remoteClient = new Client();¶            UnicastRemoteObject.exportObject(remoteClient, 0);¶            rmiRegistry.rebind(Client.class.getName(), remoteClient);¶            ¶            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());¶            counter1.registerClient(remoteClient);¶            ¶            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");¶            System.out.println(counter1.toString());¶            System.out.println(remoteClient.toString());¶            System.out.println("?????????????????????????????????");¶            ¶            remoteClient.synchronizedWait();¶            AMapReduceTracer.traceExit(ModelInterface.class);¶            System.exit(0);¶        } catch (RemoteException | NotBoundException | InterruptedException ex) {¶            ex.printStackTrace();¶        }¶    }¶¶	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs) throws RemoteException {¶    	this.trace("lalallaallalallaalallaalala");¶        this.traceRemoteList(serializableKeyValuePairs);¶        this.trace("bababababababbabababababababba");¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        Map<String, Integer> result = reducer.reduce(serializableKeyValuePairs);¶        this.traceRemoteResult(result);¶        return result;¶    }¶¶    public void quit() {¶        this.traceQuit();¶        this.synchronizedNotify();¶    }¶¶	¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="192" _type="Replace" date="Tue Mar 15 21:33:53 EDT 2022" docASTNodeCount="329" docActiveCodeLength="2403" docExpressionCount="226" docLength="2418" endLine="29" insertionLength="1" int_docASTNodeCount="328" int_docActiveCodeLength="2402" int_docExpressionCount="225" int_docLength="2417" length="4" offset="870" startLine="29" starttimestamp="1647394201042" timestamp="232036">
    <deletedText><![CDATA[1099]]></deletedText>
    <insertedText><![CDATA[1]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="194" _type="Insert" date="Tue Mar 15 21:33:53 EDT 2022" docASTNodeCount="329" docActiveCodeLength="2406" docExpressionCount="226" docLength="2421" length="3" offset="871" repeat="3" starttimestamp="1647394201042" timestamp="232243" timestamp2="232525">
    <text><![CDATA[091]]></text>
  </DocumentChange>
  <Command __id="251" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:35:50 EDT 2022" docASTNodeCount="192" docActiveCodeLength="1271" docExpressionCount="136" docLength="1271" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="349335">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\server\TokenCounterServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.server;¶¶import comp533.client.Client;¶import comp533.controller.ControllerInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.controller.Controller;¶import comp533.view.View;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶public class TokenCounterServer {¶    private static Registry rmiRegistry;¶¶    public static void main(String[] args) {¶        try {¶            rmiRegistry = LocateRegistry.createRegistry(109"), Diff(DELETE,"9"), Diff(INSERT,"1"), Diff(EQUAL,");¶            RemoteModel counter1 = new TokenCounterModel();¶            UnicastRemoteObject.exportObject(counter1, 0);¶            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);¶            ViewInterface view = new View();¶            ControllerInterface controller = new Controller(counter1, view);¶            controller.getUserInput(counter1);¶            System.exit(0);¶        } catch (RemoteException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package comp533.server;

import comp533.client.Client;
import comp533.controller.ControllerInterface;
import comp533.main.TokenCounterModel;
import comp533.main.RemoteModel;
import comp533.controller.Controller;
import comp533.view.View;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

public class TokenCounterServer {
    private static Registry rmiRegistry;

    public static void main(String[] args) {
        try {
            rmiRegistry = LocateRegistry.createRegistry(1091);
            RemoteModel counter1 = new TokenCounterModel();
            UnicastRemoteObject.exportObject(counter1, 0);
            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);
            ViewInterface view = new View();
            ControllerInterface controller = new Controller(counter1, view);
            controller.getUserInput(counter1);
            System.exit(0);
        } catch (RemoteException ex) {
            Tracer.error(ex.getMessage());
        }
    }
}
]]></snapshot>
  </Command>
  <Command __id="255" _type="PauseCommand" date="Tue Mar 15 21:35:52 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="351336">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1848]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="256" _type="MoveCaretCommand" caretOffset="1865" date="Tue Mar 15 21:35:52 EDT 2022" docOffset="2636" starttimestamp="1647394201042" timestamp="351504" />
  <Command __id="270" _type="PauseCommand" date="Tue Mar 15 21:36:04 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="363379">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1052]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="269" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:36:04 EDT 2022" starttimestamp="1647394201042" timestamp="363379" />
  <Command __id="271" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:36:04 EDT 2022" starttimestamp="1647394201042" timestamp="363384" />
  <Command __id="272" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:36:05 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="364343" type="Run" />
  <Command __id="273" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:36:05 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="364344" type="Run" />
  <Command __id="275" _type="PauseCommand" date="Tue Mar 15 21:36:08 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="367042">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2698]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="274" _type="ShellCommand" date="Tue Mar 15 21:36:08 EDT 2022" starttimestamp="1647394201042" timestamp="367042" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="277" _type="PauseCommand" date="Tue Mar 15 21:36:10 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="369040">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1998]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="276" _type="ConsoleOutput" date="Tue Mar 15 21:36:10 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="369040" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):23
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):39348¶Number of traces > 600  turning tracing off¶Test execution time (ms):3¶Test execution time (ms):2¶Test execution time (ms):1"), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶"), Diff(EQUAL,"¶Test execution time (ms):2"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="279" _type="PauseCommand" date="Tue Mar 15 21:36:26 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="385503">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[16463]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="278" _type="ConsoleOutput" date="Tue Mar 15 21:36:26 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="385503" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):23"), Diff(INSERT,"Number of traces > 600  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="281" _type="PauseCommand" date="Tue Mar 15 21:36:28 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="387660">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2157]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="280" _type="ConsoleOutput" date="Tue Mar 15 21:36:28 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="387660" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="282" _type="ConsoleOutput" date="Tue Mar 15 21:36:28 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="387760" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="283" _type="ConsoleOutput" date="Tue Mar 15 21:36:28 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="387869" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="285" _type="PauseCommand" date="Tue Mar 15 21:36:42 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="401697">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13828]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="284" _type="ShellCommand" date="Tue Mar 15 21:36:42 EDT 2022" starttimestamp="1647394201042" timestamp="401697" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="286" _type="MoveCaretCommand" caretOffset="8633" date="Tue Mar 15 21:36:42 EDT 2022" docOffset="9404" starttimestamp="1647394201042" timestamp="401762" />
  <Command __id="287" _type="MoveCaretCommand" caretOffset="8633" date="Tue Mar 15 21:36:42 EDT 2022" docOffset="9404" starttimestamp="1647394201042" timestamp="401762" />
  <Command __id="289" _type="PauseCommand" date="Tue Mar 15 21:36:45 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="404192">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2430]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="288" _type="MoveCaretCommand" caretOffset="8631" date="Tue Mar 15 21:36:45 EDT 2022" docOffset="9402" starttimestamp="1647394201042" timestamp="404192" />
  <Command __id="290" _type="MoveCaretCommand" caretOffset="8631" date="Tue Mar 15 21:36:45 EDT 2022" docOffset="9402" starttimestamp="1647394201042" timestamp="404193" />
  <Command __id="292" _type="PauseCommand" date="Tue Mar 15 21:36:47 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="406154">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1961]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="291" _type="ShellCommand" date="Tue Mar 15 21:36:47 EDT 2022" starttimestamp="1647394201042" timestamp="406154" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="294" _type="PauseCommand" date="Tue Mar 15 21:37:31 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="450180">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[44026]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="293" _type="ConsoleOutput" date="Tue Mar 15 21:37:31 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="450180" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):81130
Number of traces > 600  turning tracing off
Test execution time (ms):4
DistributedTokenCountQuit did not pass completely:All Output Did not match:.*MapReduce Client.*main.*exit.*%0.0














































]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), g"), Diff(INSERT,"Test execution time (ms):81130¶Number of traces > 600  turning t"), Diff(EQUAL,"ra"), Diff(DELETE,"d"), Diff(INSERT,"c"), Diff(EQUAL,"ing"), Diff(DELETE,"Tools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(INSERT," off¶Test execution time (ms):4¶DistributedTokenCountQuit did not pass completely:All Output Did not match:.*MapReduce Client.*main.*exit.*%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="296" _type="PauseCommand" date="Tue Mar 15 21:37:43 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="462883">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[12703]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="295" _type="ShellCommand" date="Tue Mar 15 21:37:43 EDT 2022" starttimestamp="1647394201042" timestamp="462883" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="306" _type="PauseCommand" date="Tue Mar 15 21:38:08 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="487523">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1053]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="305" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:38:08 EDT 2022" starttimestamp="1647394201042" timestamp="487523" />
  <Command __id="307" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:38:08 EDT 2022" starttimestamp="1647394201042" timestamp="487527" />
  <Command __id="309" _type="PauseCommand" date="Tue Mar 15 21:38:42 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="521657">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[34130]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="308" _type="MoveCaretCommand" caretOffset="8408" date="Tue Mar 15 21:38:42 EDT 2022" docOffset="9179" starttimestamp="1647394201042" timestamp="521657" />
  <Command __id="310" _type="MoveCaretCommand" caretOffset="8408" date="Tue Mar 15 21:38:42 EDT 2022" docOffset="9179" starttimestamp="1647394201042" timestamp="521657" />
  <Command __id="312" _type="PauseCommand" date="Tue Mar 15 21:38:50 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="529181">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7524]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="313" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 15 21:38:50 EDT 2022" docOffset="0" starttimestamp="1647394201042" timestamp="529785" />
  <Command __id="315" _type="PauseCommand" date="Tue Mar 15 21:38:52 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="531009">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1224]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="314" _type="MoveCaretCommand" caretOffset="431" date="Tue Mar 15 21:38:52 EDT 2022" docOffset="619" starttimestamp="1647394201042" timestamp="531009" />
  <Command __id="317" _type="PauseCommand" date="Tue Mar 15 21:39:12 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="551001">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[19992]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="318" _type="MoveCaretCommand" caretOffset="2127" date="Tue Mar 15 21:39:12 EDT 2022" docOffset="2969" starttimestamp="1647394201042" timestamp="551339" />
  <Command __id="320" _type="PauseCommand" date="Tue Mar 15 21:39:28 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="567081">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[15742]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="321" _type="MoveCaretCommand" caretOffset="431" date="Tue Mar 15 21:39:28 EDT 2022" docOffset="619" starttimestamp="1647394201042" timestamp="567287" />
  <Command __id="323" _type="PauseCommand" date="Tue Mar 15 21:40:48 EDT 2022" range="1m-2m" starttimestamp="1647394201042" timestamp="647851">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[80564]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="324" _type="MoveCaretCommand" caretOffset="2127" date="Tue Mar 15 21:40:49 EDT 2022" docOffset="2969" starttimestamp="1647394201042" timestamp="648120" />
  <Command __id="326" _type="PauseCommand" date="Tue Mar 15 21:42:40 EDT 2022" range="1m-2m" starttimestamp="1647394201042" timestamp="759913">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[111793]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="327" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 15 21:42:41 EDT 2022" docOffset="0" starttimestamp="1647394201042" timestamp="760278" />
  <Command __id="329" _type="PauseCommand" date="Tue Mar 15 21:42:55 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="774461">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[14183]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="328" _type="MoveCaretCommand" caretOffset="332" date="Tue Mar 15 21:42:55 EDT 2022" docOffset="1094" starttimestamp="1647394201042" timestamp="774461" />
  <Command __id="331" _type="PauseCommand" date="Tue Mar 15 21:43:16 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="795096">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[20635]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="332" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 15 21:43:16 EDT 2022" docOffset="0" starttimestamp="1647394201042" timestamp="795339" />
  <Command __id="334" _type="PauseCommand" date="Tue Mar 15 21:43:30 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="809419">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[14080]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="333" _type="ShellCommand" date="Tue Mar 15 21:43:30 EDT 2022" starttimestamp="1647394201042" timestamp="809419" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="335" _type="ShellCommand" date="Tue Mar 15 21:43:30 EDT 2022" starttimestamp="1647394201042" timestamp="809514" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="336" _type="ShellCommand" date="Tue Mar 15 21:43:30 EDT 2022" starttimestamp="1647394201042" timestamp="809759" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="338" _type="PauseCommand" date="Tue Mar 15 21:43:32 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="811300">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1541]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="337" _type="ShellCommand" date="Tue Mar 15 21:43:32 EDT 2022" starttimestamp="1647394201042" timestamp="811300" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="340" _type="PauseCommand" date="Tue Mar 15 21:43:41 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="820719">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9419]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="341" _type="MoveCaretCommand" caretOffset="332" date="Tue Mar 15 21:43:42 EDT 2022" docOffset="1094" starttimestamp="1647394201042" timestamp="821147" />
  <Command __id="343" _type="PauseCommand" date="Tue Mar 15 21:43:58 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="837285">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[16138]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="344" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 15 21:43:58 EDT 2022" docOffset="0" starttimestamp="1647394201042" timestamp="837441" />
  <Command __id="346" _type="PauseCommand" date="Tue Mar 15 21:44:03 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="842372">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4931]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="347" _type="MoveCaretCommand" caretOffset="332" date="Tue Mar 15 21:44:03 EDT 2022" docOffset="1094" starttimestamp="1647394201042" timestamp="842558" />
  <Command __id="349" _type="PauseCommand" date="Tue Mar 15 21:44:09 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="848901">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6343]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="350" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 15 21:44:10 EDT 2022" docOffset="0" starttimestamp="1647394201042" timestamp="849049" />
  <Command __id="352" _type="PauseCommand" date="Tue Mar 15 21:44:13 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="852324">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3275]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="353" _type="MoveCaretCommand" caretOffset="332" date="Tue Mar 15 21:44:13 EDT 2022" docOffset="1094" starttimestamp="1647394201042" timestamp="852437" />
  <Command __id="355" _type="PauseCommand" date="Tue Mar 15 21:44:16 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="855879">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3442]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="354" _type="MoveCaretCommand" caretOffset="1603" date="Tue Mar 15 21:44:16 EDT 2022" docOffset="2365" starttimestamp="1647394201042" timestamp="855879" />
  <Command __id="356" _type="SelectTextCommand" caretOffset="1605" date="Tue Mar 15 21:44:17 EDT 2022" end="1605" start="1599" starttimestamp="1647394201042" timestamp="856022" />
  <Command __id="358" _type="PauseCommand" date="Tue Mar 15 21:44:52 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="891020">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[34998]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="357" _type="MoveCaretCommand" caretOffset="4987" date="Tue Mar 15 21:44:52 EDT 2022" docOffset="5749" starttimestamp="1647394201042" timestamp="891020" />
  <Command __id="359" _type="SelectTextCommand" caretOffset="4993" date="Tue Mar 15 21:44:52 EDT 2022" end="4993" start="4978" starttimestamp="1647394201042" timestamp="891159" />
  <Command __id="361" _type="PauseCommand" date="Tue Mar 15 21:44:55 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="894793">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3634]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="360" _type="CopyCommand" date="Tue Mar 15 21:44:55 EDT 2022" starttimestamp="1647394201042" timestamp="894793" />
  <Command __id="362" _type="MoveCaretCommand" caretOffset="2792" date="Tue Mar 15 21:44:56 EDT 2022" docOffset="3554" starttimestamp="1647394201042" timestamp="895355" />
  <Command __id="363" _type="MoveCaretCommand" caretOffset="2838" date="Tue Mar 15 21:44:56 EDT 2022" docOffset="3600" starttimestamp="1647394201042" timestamp="895845" />
  <Command __id="364" _type="SelectTextCommand" caretOffset="2849" date="Tue Mar 15 21:44:56 EDT 2022" end="2849" start="2820" starttimestamp="1647394201042" timestamp="895942" />
  <Command __id="366" _type="PasteCommand" date="Tue Mar 15 21:44:57 EDT 2022" starttimestamp="1647394201042" timestamp="896474" />
  <Command __id="368" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Tue Mar 15 21:44:58 EDT 2022" starttimestamp="1647394201042" timestamp="897060" />
  <Command __id="370" _type="PauseCommand" date="Tue Mar 15 21:44:59 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="898478">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1418]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="371" _type="UndoCommand" date="Tue Mar 15 21:44:59 EDT 2022" starttimestamp="1647394201042" timestamp="898487" />
  <Command __id="373" _type="PauseCommand" date="Tue Mar 15 21:45:00 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="899543">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1056]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="372" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 21:45:00 EDT 2022" starttimestamp="1647394201042" timestamp="899543" />
  <Command __id="374" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:45:00 EDT 2022" starttimestamp="1647394201042" timestamp="899629" />
  <Command __id="375" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:45:00 EDT 2022" starttimestamp="1647394201042" timestamp="899701" />
  <Command __id="377" _type="PauseCommand" date="Tue Mar 15 21:45:06 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="905600">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5899]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="376" _type="SelectTextCommand" caretOffset="4930" date="Tue Mar 15 21:45:06 EDT 2022" end="5035" start="4930" starttimestamp="1647394201042" timestamp="905600" />
  <Command __id="383" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Mar 15 21:45:07 EDT 2022" starttimestamp="1647394201042" timestamp="906202" />
  <Command __id="384" _type="MoveCaretCommand" caretOffset="4931" date="Tue Mar 15 21:45:07 EDT 2022" docOffset="5693" starttimestamp="1647394201042" timestamp="906921" />
  <Command __id="386" _type="PauseCommand" date="Tue Mar 15 21:45:09 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="908203">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1282]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="385" _type="SelectTextCommand" caretOffset="4941" date="Tue Mar 15 21:45:09 EDT 2022" end="4941" start="4932" starttimestamp="1647394201042" timestamp="908203" />
  <Command __id="387" _type="CopyCommand" date="Tue Mar 15 21:45:09 EDT 2022" starttimestamp="1647394201042" timestamp="908583" />
  <Command __id="389" _type="PauseCommand" date="Tue Mar 15 21:45:11 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="910191">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1608]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="388" _type="MoveCaretCommand" caretOffset="2820" date="Tue Mar 15 21:45:11 EDT 2022" docOffset="3582" starttimestamp="1647394201042" timestamp="910191" />
  <Command __id="390" _type="MoveCaretCommand" caretOffset="2792" date="Tue Mar 15 21:45:11 EDT 2022" docOffset="3554" starttimestamp="1647394201042" timestamp="910885" />
  <Command __id="392" _type="InsertStringCommand" date="Tue Mar 15 21:45:12 EDT 2022" starttimestamp="1647394201042" timestamp="911580" timestamp2="911580">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="394" _type="PasteCommand" date="Tue Mar 15 21:45:12 EDT 2022" starttimestamp="1647394201042" timestamp="911922" />
  <Command __id="395" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 21:45:13 EDT 2022" starttimestamp="1647394201042" timestamp="912904" />
  <Command __id="396" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:45:14 EDT 2022" starttimestamp="1647394201042" timestamp="912993" />
  <Command __id="397" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:45:14 EDT 2022" starttimestamp="1647394201042" timestamp="913027" />
  <Command __id="254" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:35:52 EDT 2022" docASTNodeCount="1425" docActiveCodeLength="10176" docExpressionCount="885" docLength="10176" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="351336">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\TokenCounterModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.main;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, Integer> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<SlaveInterface> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<SlaveInterface> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public TokenCounterModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶            System.out.println(unassignedSlaves.capacity());¶            System.out.println(unassignedClients.capacity());¶            System.out.println("################################");¶            for (int i = 0; i < "), Diff(DELETE,"unassignedClients.capacity()"), Diff(INSERT,"2"), Diff(EQUAL,"; i++) {¶            	¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        MapperInterface<String, Integer> mapper = new Mapper();¶        for (String token: tokens) {¶            KeyValueInterface<String, Integer> keyValue = mapper.map(token);¶            this.produceBoundedBuffer(keyValue);¶        }¶        this.endEnqueue();¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, Integer> oldResult = this.result;¶        this.result = new HashMap<>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final Integer value = keyValues.getValue();¶                if (result.containsKey(key)) {¶                	final int oldValue = result.get(key);¶                	final int newValue = oldValue+value;¶                	this.result.put(key, newValue);¶                } else {¶                	this.result.put(key, value);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, Integer> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            Slave slave = new Slave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof TokenCounterModel)) {¶            return false;¶        }¶        TokenCounterModel otherCounter = (TokenCounterModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package comp533.main;

import comp533.barrier.BarrierInterface;
import comp533.barrier.Barrier;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.keyValue.KeyValue;
import comp533.joiner.Joiner;
import comp533.mapper.MapperInterface;
import comp533.mapper.Mapper;
import comp533.slave.SlaveInterface;
import comp533.slave.Slave;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

import java.rmi.RemoteException;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {
    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
    private Map<String, Integer> result;
    private int numThreads;
    private List<Thread> threads;
    private List<SlaveInterface> slaves;
    private String inputString;
    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;
    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;
    private JoinerInterface joiner;
    private BarrierInterface barrier;
    private List<ClientInterface> registeredClients;
    private Stack<SlaveInterface> unassignedSlaves;
    private Stack<ClientInterface> unassignedClients;


    public TokenCounterModel() {
        this.inputString = null;
        this.numThreads = 0;
        this.reductionQueueList = new ArrayList<>();
        this.slaves = new ArrayList<>();
        this.registeredClients = new ArrayList<>();
        this.unassignedSlaves = new Stack<>();
        this.unassignedClients = new Stack<>();
    }

    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        this.pcs.addPropertyChangeListener(listener);
    }

    public String getInputString() {
        return this.inputString;
    }

    public void matchSlavesToClients() {
        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {
        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
            System.out.println(unassignedSlaves.capacity());
            System.out.println(unassignedClients.capacity());
            System.out.println("################################");
            for (int i = 0; i < 2; i++) {
            	
                
            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();
                ClientInterface unassignedClient = this.unassignedClients.pop();
            	
                unassignedSlave.setClient(unassignedClient);
            }
            
        } else {
        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        }
    }

    private void clearReductionQueues() {
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void unblockSlaveThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            SlaveInterface currentSlave = this.slaves.get(i);
            currentSlave.notifySlave();
        }
    }

    private void initializeStructures() {
        this.result = new HashMap<>();
        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {
        this.traceEnqueueRequest(keyValue);
        this.boundedBuffer.put(keyValue);
        this.traceEnqueue(this.boundedBuffer);
    }

    private void endEnqueue() {
        try {
            for (int i = 0; i < this.numThreads; i++) {
                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);
                this.traceEnqueueRequest(endKeyValue);
                this.boundedBuffer.put(endKeyValue);
            }
        } catch (InterruptedException ex) {
            Tracer.error(ex.getMessage());
        }
    }

    private void startThreads() {
        for (Thread currentThread: this.threads) {
            if (currentThread.getState() == Thread.State.NEW) {
                currentThread.start();
            }
        }
    }

    private void problemSplit() throws InterruptedException {
        String[] tokens = this.inputString.split(" ");
        MapperInterface<String, Integer> mapper = new Mapper();
        for (String token: tokens) {
            KeyValueInterface<String, Integer> keyValue = mapper.map(token);
            this.produceBoundedBuffer(keyValue);
        }
        this.endEnqueue();
    }

    private void mergeIntermediaryResults(ViewInterface view) {
        Map<String, Integer> oldResult = this.result;
        this.result = new HashMap<>();
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {
            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {
            	final String key = keyValues.getKey();
                final Integer value = keyValues.getValue();
                if (result.containsKey(key)) {
                	final int oldValue = result.get(key);
                	final int newValue = oldValue+value;
                	this.result.put(key, newValue);
                } else {
                	this.result.put(key, value);
                }
            }
        }
        this.traceRemoteResult(result);
        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",
                oldResult, this.result);
        this.pcs.firePropertyChange(updateResultEvent);
        view.propertyChange(updateResultEvent);
    }

    private void updateResult(ViewInterface view) throws InterruptedException {
        this.initializeStructures();
        this.clearReductionQueues();
        this.startThreads();
        this.unblockSlaveThreads();
        this.problemSplit();
        this.joiner.join();
        this.mergeIntermediaryResults(view);
    }

    public void setInputString(String newInputString, ViewInterface view) {
        try {
            String oldInputString = this.inputString;
            this.inputString = newInputString;
            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",
                    oldInputString, newInputString);
            this.pcs.firePropertyChange(updateInputStringEvent);
            view.propertyChange(updateInputStringEvent);
            this.updateResult(view);
        } catch (InterruptedException ex) {
            Tracer.error(Arrays.toString(ex.getStackTrace()));
        }
    }

    public int getNumThreads() {
        return this.numThreads;
    }

    public BarrierInterface getBarrier() {
        return this.barrier;
    }

    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {
        return this.boundedBuffer;
    }

    public JoinerInterface getJoiner() {
        return this.joiner;
    }

    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {
        return this.reductionQueueList;
    }

    public Map<String, Integer> getResult() {
        return this.result;
    }

    public void updateThreads() {
        List<Thread> oldThreads = this.threads;
        this.joiner = new Joiner(this.numThreads);
        this.barrier = new Barrier(this.numThreads);
        this.threads = new ArrayList<>(this.numThreads);
        for (int i = 0; i < this.numThreads; i++) {
            Slave slave = new Slave(i, this);
            this.slaves.add(slave);
            this.unassignedSlaves.add(slave);
            Thread newThread = new Thread(slave, "Slave" + i);
            this.threads.add(newThread);
            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();
            this.reductionQueueList.add(reductionQueue);
        }
        this.matchSlavesToClients();
        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",
                oldThreads, this.threads);
        this.pcs.firePropertyChange(updateThreadsEvent);
    }

    public void registerClient(ClientInterface clientToRegister) {
        this.traceRegister(clientToRegister);
        this.unassignedClients.add(clientToRegister);
        this.registeredClients.add(clientToRegister);
    }

    public void callClientQuit() throws RemoteException {
        for (ClientInterface registeredClient: registeredClients) {
            registeredClient.quit();
        }
    }

    public void interruptThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            this.slaves.get(i).signalQuit();
            this.threads.get(i).interrupt();
        }
    }

    public void setNumThreads(int numThreads, ViewInterface view) {
        int oldNumThreads = this.numThreads;
        this.numThreads = numThreads;
        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",
                oldNumThreads, numThreads);
        this.pcs.firePropertyChange(setNumThreadsEvent);
        this.updateThreads();
    }

    @Override
    public String toString() {
        return AMapReduceTracer.MODEL;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof TokenCounterModel)) {
            return false;
        }
        TokenCounterModel otherCounter = (TokenCounterModel) obj;
        return this.getResult() == otherCounter.getResult();
    }
}
]]></snapshot>
  </Command>
  <DocumentChange __id="260" _type="Insert" date="Tue Mar 15 21:36:02 EDT 2022" docASTNodeCount="1421" docActiveCodeLength="10152" docExpressionCount="882" docLength="10178" length="2" offset="9155" repeat="2" starttimestamp="1647394201042" timestamp="361813" timestamp2="361925">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="300" _type="Delete" date="Tue Mar 15 21:38:06 EDT 2022" docASTNodeCount="1425" docActiveCodeLength="10176" docExpressionCount="885" docLength="10176" endLine="237" length="2" offset="9155" startLine="237" starttimestamp="1647394201042" timestamp="485610">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="311" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:38:50 EDT 2022" docASTNodeCount="207" docActiveCodeLength="1523" docExpressionCount="135" docLength="1523" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="529181">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\controller\Controller.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package comp533.controller;

import comp533.main.RemoteModel;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.RemoteException;
import java.util.Scanner;

public class Controller extends AMapReduceTracer implements ControllerInterface {
    private Scanner inputHandler;
    private RemoteModel counter;
    private ViewInterface view;

    public Controller(RemoteModel counter, ViewInterface view) {
        this.inputHandler = new Scanner(System.in);
        this.counter = counter;
        this.view = view;
    }

    public void getUserInput(RemoteModel counter) {
        this.traceThreadPrompt();
        int numThreads = this.inputHandler.nextInt();
        this.inputHandler.nextLine();
        try {
            counter.setNumThreads(numThreads, this.view);
            while (true) {
                this.traceNumbersPrompt();
                String line = inputHandler.nextLine();
                if (line.equals(AMapReduceTracer.QUIT)) {
                    counter.interruptThreads();
                    counter.callClientQuit();
                    this.traceQuit();
                    break;
                }
                counter.setInputString(line, this.view);
            }
        } catch (RemoteException ex) {
            ex.getStackTrace();
        }
    }


    @Override
    public String toString() {
        return ControllerInterface.LABEL;
    }
}
]]></snapshot>
  </Command>
  <Command __id="316" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:39:12 EDT 2022" docASTNodeCount="1625" docActiveCodeLength="11192" docExpressionCount="988" docLength="11207" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="551001">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.RemoteModel;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.main.ModelInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, List<String>> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<FacebookSlave> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<FacebookSlave> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public FacebookModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶            ¶            for (int i = 0; i < "), Diff(DELETE,"unassignedClients.capacity()"), Diff(INSERT,"2"), Diff(EQUAL,"; i++) {¶            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶                System.out.println(unassignedSlaves);¶                System.out.println(unassignedClients);¶                System.out.println("################################");¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        FacebookMapper mapper = new FacebookMapper();¶        for (String token: tokens) {¶        	String[] all = token.split(",");¶        	String user = all[0];¶        	String[] friends = Arrays.copyOfRange(all, 1, all.length);¶        	Arrays.sort(friends);¶        	KeyValueInterface<String, List<String>> keyValue;¶        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");¶        	this.traceRemoteList(friends);¶        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");¶        	for (String friend: friends) {¶        		keyValue = mapper.map(token, user, friend, friends);¶        		this.produceBoundedBuffer(keyValue);¶     ¶            }¶            ¶        }¶        this.endEnqueue();¶        ¶¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, List<String>> oldResult = this.result;¶        this.result = new HashMap<String, List<String>>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final List<String> value = keyValues.getValue();¶                if (result.get(key) == null) {¶                	result.put(key, value);¶                } else {¶                    final List<String> current = result.get(key);¶                    ¶    				final List<String> newValue = intersection(current, value);¶    				result.put(key, newValue);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    public static <T> List<T> intersection(List<T> list1, List<T> list2) {¶        List<T> list = new ArrayList<T>();¶¶        for (T t : list1) {¶            if(list2.contains(t)) {¶                list.add(t);¶            }¶        }¶¶        return list;¶    }¶    ¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, List<String>> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            FacebookSlave slave = new FacebookSlave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof FacebookModel)) {¶            return false;¶        }¶        FacebookModel otherCounter = (FacebookModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package facebook;

import comp533.barrier.BarrierInterface;
import comp533.barrier.Barrier;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.main.RemoteModel;
import comp533.keyValue.KeyValue;
import comp533.joiner.Joiner;
import comp533.mapper.MapperInterface;
import comp533.main.ModelInterface;
import comp533.mapper.Mapper;
import comp533.slave.SlaveInterface;
import comp533.slave.Slave;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

import java.rmi.RemoteException;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
    private Map<String, List<String>> result;
    private int numThreads;
    private List<Thread> threads;
    private List<FacebookSlave> slaves;
    private String inputString;
    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;
    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;
    private JoinerInterface joiner;
    private BarrierInterface barrier;
    private List<ClientInterface> registeredClients;
    private Stack<FacebookSlave> unassignedSlaves;
    private Stack<ClientInterface> unassignedClients;


    public FacebookModel() {
        this.inputString = null;
        this.numThreads = 0;
        this.reductionQueueList = new ArrayList<>();
        this.slaves = new ArrayList<>();
        this.registeredClients = new ArrayList<>();
        this.unassignedSlaves = new Stack<>();
        this.unassignedClients = new Stack<>();
    }

    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        this.pcs.addPropertyChangeListener(listener);
    }

    public String getInputString() {
        return this.inputString;
    }

    public void matchSlavesToClients() {
        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {
            
            for (int i = 0; i < 2; i++) {
            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
                System.out.println(unassignedSlaves);
                System.out.println(unassignedClients);
                System.out.println("################################");
                
            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();
                ClientInterface unassignedClient = this.unassignedClients.pop();
            	
                unassignedSlave.setClient(unassignedClient);
            }
            
        } else {
        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        }
    }

    private void clearReductionQueues() {
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void unblockSlaveThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            SlaveInterface currentSlave = this.slaves.get(i);
            currentSlave.notifySlave();
        }
    }

    private void initializeStructures() {
        this.result = new HashMap<>();
        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {
        this.traceEnqueueRequest(keyValue);
        this.boundedBuffer.put(keyValue);
        this.traceEnqueue(this.boundedBuffer);
    }

    private void endEnqueue() {
        try {
            for (int i = 0; i < this.numThreads; i++) {
                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);
                this.traceEnqueueRequest(endKeyValue);
                this.boundedBuffer.put(endKeyValue);
            }
        } catch (InterruptedException ex) {
            Tracer.error(ex.getMessage());
        }
    }

    private void startThreads() {
        for (Thread currentThread: this.threads) {
            if (currentThread.getState() == Thread.State.NEW) {
                currentThread.start();
            }
        }
    }

    private void problemSplit() throws InterruptedException {
        String[] tokens = this.inputString.split(" ");
        FacebookMapper mapper = new FacebookMapper();
        for (String token: tokens) {
        	String[] all = token.split(",");
        	String user = all[0];
        	String[] friends = Arrays.copyOfRange(all, 1, all.length);
        	Arrays.sort(friends);
        	KeyValueInterface<String, List<String>> keyValue;
        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");
        	this.traceRemoteList(friends);
        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");
        	for (String friend: friends) {
        		keyValue = mapper.map(token, user, friend, friends);
        		this.produceBoundedBuffer(keyValue);
     
            }
            
        }
        this.endEnqueue();
        

    }

    private void mergeIntermediaryResults(ViewInterface view) {
        Map<String, List<String>> oldResult = this.result;
        this.result = new HashMap<String, List<String>>();
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {
            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {
            	final String key = keyValues.getKey();
                final List<String> value = keyValues.getValue();
                if (result.get(key) == null) {
                	result.put(key, value);
                } else {
                    final List<String> current = result.get(key);
                    
    				final List<String> newValue = intersection(current, value);
    				result.put(key, newValue);
                }
            }
        }
        this.traceRemoteResult(result);
        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",
                oldResult, this.result);
        this.pcs.firePropertyChange(updateResultEvent);
        view.propertyChange(updateResultEvent);
    }

    public static <T> List<T> intersection(List<T> list1, List<T> list2) {
        List<T> list = new ArrayList<T>();

        for (T t : list1) {
            if(list2.contains(t)) {
                list.add(t);
            }
        }

        return list;
    }
    
    private void updateResult(ViewInterface view) throws InterruptedException {
        this.initializeStructures();
        this.clearReductionQueues();
        this.startThreads();
        this.unblockSlaveThreads();
        this.problemSplit();
        this.joiner.join();
        this.mergeIntermediaryResults(view);
    }

    public void setInputString(String newInputString, ViewInterface view) {
        try {
            String oldInputString = this.inputString;
            this.inputString = newInputString;
            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",
                    oldInputString, newInputString);
            this.pcs.firePropertyChange(updateInputStringEvent);
            view.propertyChange(updateInputStringEvent);
            this.updateResult(view);
        } catch (InterruptedException ex) {
            Tracer.error(Arrays.toString(ex.getStackTrace()));
        }
    }

    public int getNumThreads() {
        return this.numThreads;
    }

    public BarrierInterface getBarrier() {
        return this.barrier;
    }

    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {
        return this.boundedBuffer;
    }

    public JoinerInterface getJoiner() {
        return this.joiner;
    }

    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {
        return this.reductionQueueList;
    }

    public Map<String, List<String>> getResult() {
        return this.result;
    }

    public void updateThreads() {
        List<Thread> oldThreads = this.threads;
        this.joiner = new Joiner(this.numThreads);
        this.barrier = new Barrier(this.numThreads);
        this.threads = new ArrayList<>(this.numThreads);
        for (int i = 0; i < this.numThreads; i++) {
            FacebookSlave slave = new FacebookSlave(i, this);
            this.slaves.add(slave);
            this.unassignedSlaves.add(slave);
            Thread newThread = new Thread(slave, "Slave" + i);
            this.threads.add(newThread);
            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();
            this.reductionQueueList.add(reductionQueue);
        }
        this.matchSlavesToClients();
        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",
                oldThreads, this.threads);
        this.pcs.firePropertyChange(updateThreadsEvent);
    }

    public void registerClient(ClientInterface clientToRegister) {
        this.traceRegister(clientToRegister);
        this.unassignedClients.add(clientToRegister);
        this.registeredClients.add(clientToRegister);
    }

    public void callClientQuit() throws RemoteException {
        for (ClientInterface registeredClient: registeredClients) {
            registeredClient.quit();
        }
    }

    public void interruptThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            this.slaves.get(i).signalQuit();
            this.threads.get(i).interrupt();
        }
    }

    public void setNumThreads(int numThreads, ViewInterface view) {
        int oldNumThreads = this.numThreads;
        this.numThreads = numThreads;
        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",
                oldNumThreads, numThreads);
        this.pcs.firePropertyChange(setNumThreadsEvent);
        this.updateThreads();
    }

    @Override
    public String toString() {
        return AMapReduceTracer.MODEL;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof FacebookModel)) {
            return false;
        }
        FacebookModel otherCounter = (FacebookModel) obj;
        return this.getResult() == otherCounter.getResult();
    }
}
]]></snapshot>
  </Command>
  <Command __id="319" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:39:28 EDT 2022" docASTNodeCount="207" docActiveCodeLength="1523" docExpressionCount="135" docLength="1523" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="567081">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\controller\Controller.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.controller;¶¶import comp533.main.RemoteModel;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.Scanner;¶¶public class Controller extends AMapReduceTracer implements ControllerInterface {¶    private Scanner inputHandler;¶    private RemoteModel counter;¶    private ViewInterface view;¶¶    public Controller(RemoteModel counter, ViewInterface view) {¶        this.inputHandler = new Scanner(System.in);¶        this.counter = counter;¶        this.view = view;¶    }¶¶    public void getUserInput(RemoteModel counter) {¶        this.traceThreadPrompt();¶        int numThreads = this.inputHandler.nextInt();¶        this.inputHandler.nextLine();¶        try {¶            counter.setNumThreads(numThreads, this.view);¶            while (true) {¶                this.traceNumbersPrompt();¶                String line = inputHandler.nextLine();¶                if (line.equals(AMapReduceTracer.QUIT)) {¶                    counter.interruptThreads();¶                    counter.callClientQuit();¶                    this.traceQuit();¶                    break;¶                }¶                counter.setInputString(line, this.view);¶            }¶        } catch (RemoteException ex) {¶            ex.getStackTrace();¶        }¶    }¶¶¶    @Override¶    public String toString() {¶        return ControllerInterface.LABEL;¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="322" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:40:48 EDT 2022" docASTNodeCount="1625" docActiveCodeLength="11192" docExpressionCount="988" docLength="11207" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="647851">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.RemoteModel;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.main.ModelInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, List<String>> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<FacebookSlave> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<FacebookSlave> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public FacebookModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶            ¶            for (int i = 0; i < 2; i++) {¶            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶                System.out.println(unassignedSlaves);¶                System.out.println(unassignedClients);¶                System.out.println("################################");¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        FacebookMapper mapper = new FacebookMapper();¶        for (String token: tokens) {¶        	String[] all = token.split(",");¶        	String user = all[0];¶        	String[] friends = Arrays.copyOfRange(all, 1, all.length);¶        	Arrays.sort(friends);¶        	KeyValueInterface<String, List<String>> keyValue;¶        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");¶        	this.traceRemoteList(friends);¶        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");¶        	for (String friend: friends) {¶        		keyValue = mapper.map(token, user, friend, friends);¶        		this.produceBoundedBuffer(keyValue);¶     ¶            }¶            ¶        }¶        this.endEnqueue();¶        ¶¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, List<String>> oldResult = this.result;¶        this.result = new HashMap<String, List<String>>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final List<String> value = keyValues.getValue();¶                if (result.get(key) == null) {¶                	result.put(key, value);¶                } else {¶                    final List<String> current = result.get(key);¶                    ¶    				final List<String> newValue = intersection(current, value);¶    				result.put(key, newValue);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    public static <T> List<T> intersection(List<T> list1, List<T> list2) {¶        List<T> list = new ArrayList<T>();¶¶        for (T t : list1) {¶            if(list2.contains(t)) {¶                list.add(t);¶            }¶        }¶¶        return list;¶    }¶    ¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, List<String>> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            FacebookSlave slave = new FacebookSlave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof FacebookModel)) {¶            return false;¶        }¶        FacebookModel otherCounter = (FacebookModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="325" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:42:40 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5748" docExpressionCount="518" docLength="5816" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="759913">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookSlave.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package facebook;

import comp533.barrier.BarrierInterface;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.main.ModelInterface;
import comp533.keyValue.KeyValue;
import comp533.partitioner.Partitioner;
import comp533.partitioner.PartitionerFactory;
import comp533.reducer.ReducerInterface;
import comp533.slave.SlaveInterface;
import comp533.reducer.ReducerFactory;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {
    private int threadId;
    private RemoteClientFacebookMapReduce client;
    private List<KeyValueInterface<String, List<String>>> keyValueList;
    private ModelInterface counter;

    public FacebookSlave(int threadId, ModelInterface counter) {
        this.threadId = threadId;
        this.counter = counter;
        this.keyValueList = new ArrayList<>();
    }

    public synchronized void notifySlave() {
        this.synchronizedNotify();
    }

    public void splitBoundedBuffer() throws InterruptedException {
        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();
        KeyValueInterface<String, List<String>> consumedItem = null;
        while(consumedItem == null || consumedItem.getKey() != null) {
            this.traceDequeueRequest(boundedBuffer);
            consumedItem = boundedBuffer.take();
            this.traceDequeue(consumedItem);
            if (consumedItem.getKey() != null) {
                this.keyValueList.add(consumedItem);
            }
        }
    }

    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {
        try {
        	System.out.println("slave3333333333333333333333333333");
            this.traceRemoteList(keyValuePairs);
            System.out.println("slave44444444444444444444444444444");
            return this.client.reduceNew(keyValuePairs);
        } catch (RemoteException | NullPointerException ex) {
            return reducer.reduce(keyValuePairs);
        }

    }

    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {
        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();
        FacebookPartitioner partitioner = new FacebookPartitioner();
        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {
            String key = entry.getKey();
            List<String> value = entry.getValue();
            if (key == null) {
                break;
            }
            int numOfPartitions = reduceQueueList.size();
            int index = partitioner.getPartition(key, value, numOfPartitions);
            this.tracePartitionAssigned(key, value, index, numOfPartitions);
            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);
            reduceQueueList.get(index).add(keyValue);
        }
        return reduceQueueList;
    }

    public void setClient(RemoteClientFacebookMapReduce client) {
    	System.out.println("*****************************");
    	System.out.println(client.getClass());
    	System.out.println(client.toString());
        this.client = client;
        this.traceClientAssignment(client);
    }

    public void signalQuit() {
        this.traceQuit();
    }

    @Override
    public void run() {
        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();
        FacebookReducer reducer = new FacebookReducer();
        while(true) {
            try {
                Map<String, Integer> originalMap = this.counter.getResult();
                this.splitBoundedBuffer();
                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);
                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);
                tokenCounterBarrier.barrier();
                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);
                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {
                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);
                    this.reduceList(reducer, keyValues);
                }
                JoinerInterface joiner = this.counter.getJoiner();
                joiner.finished();
                this.traceAddedToMap(originalMap, this.counter.getResult());
                this.traceRemoteResult(this.counter.getResult());
                this.synchronizedWait();
                this.keyValueList = new ArrayList<>();
            } catch (InterruptedException ex) {
                Tracer.error(Arrays.toString(ex.getStackTrace()));
                break;
            }
        }
    }

	@Override
	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,
			List<KeyValueInterface<String, Integer>> keyValuePairs) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setClient(ClientInterface client) {
		// TODO Auto-generated method stub
		
	}
}
]]></snapshot>
  </Command>
  <Command __id="330" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:43:16 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5214" docExpressionCount="468" docLength="5214" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="795096">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\slave\Slave.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package comp533.slave;

import comp533.barrier.BarrierInterface;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.main.ModelInterface;
import comp533.keyValue.KeyValue;
import comp533.partitioner.Partitioner;
import comp533.partitioner.PartitionerFactory;
import comp533.reducer.ReducerInterface;
import comp533.reducer.ReducerFactory;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class Slave extends AMapReduceTracer implements SlaveInterface {
    private int threadId;
    private ClientInterface client;
    private List<KeyValueInterface<String, Integer>> keyValueList;
    private ModelInterface counter;

    public Slave(int threadId, ModelInterface counter) {
        this.threadId = threadId;
        this.counter = counter;
        this.keyValueList = new ArrayList<>();
    }

    public synchronized void notifySlave() {
        this.synchronizedNotify();
    }

    public void splitBoundedBuffer() throws InterruptedException {
        ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer = this.counter.getBoundedBuffer();
        KeyValueInterface<String, Integer> consumedItem = null;
        while(consumedItem == null || consumedItem.getKey() != null) {
            this.traceDequeueRequest(boundedBuffer);
            consumedItem = boundedBuffer.take();
            this.traceDequeue(consumedItem);
            if (consumedItem.getKey() != null) {
                this.keyValueList.add(consumedItem);
            }
        }
    }

    public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer, List<KeyValueInterface<String, Integer>> keyValuePairs) {
        try {
            this.traceRemoteList(keyValuePairs);
            return this.client.reduce(keyValuePairs);
        } catch (RemoteException | NullPointerException ex) {
            return reducer.reduce(keyValuePairs);
        }

    }

    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> splitReduction(Map<String, Integer> partiallyReducedMap) {
        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reduceQueueList = this.counter.getReductionQueueList();
        Partitioner partitioner = PartitionerFactory.getPartitioner();
        for (Map.Entry<String, Integer> entry: partiallyReducedMap.entrySet()) {
            String key = entry.getKey();
            Integer value = entry.getValue();
            if (key == null) {
                break;
            }
            int numOfPartitions = reduceQueueList.size();
            int index = partitioner.getPartition(key, value, numOfPartitions);
            this.tracePartitionAssigned(key, value, index, numOfPartitions);
            KeyValueInterface<String, Integer> keyValue = new KeyValue<>(key, value);
            reduceQueueList.get(index).add(keyValue);
        }
        return reduceQueueList;
    }

    public void setClient(ClientInterface client) {
    	System.out.println("*****************************");
    	System.out.println(client.getClass());
    	System.out.println(client.toString());
        this.client = client;
        this.traceClientAssignment(client);
    }

    public void signalQuit() {
        this.traceQuit();
    }

    @Override
    public void run() {
        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();
        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();
        while(true) {
            try {
                Map<String, Integer> originalMap = this.counter.getResult();
                this.splitBoundedBuffer();
                Map<String, Integer> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);
                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList = this.splitReduction(partiallyReducedMap);
                tokenCounterBarrier.barrier();
                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);
                for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : reductionQueueList) {
                    List<KeyValueInterface<String, Integer>> keyValues = List.copyOf(reductionQueue);
                    this.reduceList(reducer, keyValues);
                }
                JoinerInterface joiner = this.counter.getJoiner();
                joiner.finished();
                this.traceAddedToMap(originalMap, this.counter.getResult());
                this.traceRemoteResult(this.counter.getResult());
                this.synchronizedWait();
                this.keyValueList = new ArrayList<>();
            } catch (InterruptedException ex) {
                Tracer.error(Arrays.toString(ex.getStackTrace()));
                break;
            }
        }
    }
}
]]></snapshot>
  </Command>
  <Command __id="339" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:43:41 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5748" docExpressionCount="518" docLength="5816" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="820719">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookSlave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.slave.SlaveInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Map.Entry;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private RemoteClientFacebookMapReduce client;¶    private List<KeyValueInterface<String, List<String>>> keyValueList;¶    private ModelInterface counter;¶¶    public FacebookSlave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, List<String>> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {¶        try {¶        	System.out.println("slave3333333333333333333333333333");¶            this.traceRemoteList(keyValuePairs);¶            System.out.println("slave44444444444444444444444444444");¶            return this.client.reduceNew(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();¶        FacebookPartitioner partitioner = new FacebookPartitioner();¶        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            List<String> value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶    public void setClient(RemoteClientFacebookMapReduce client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        FacebookReducer reducer = new FacebookReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶¶	@Override¶	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,¶			List<KeyValueInterface<String, Integer>> keyValuePairs) {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public void setClient(ClientInterface client) {¶		// TODO Auto-generated method stub¶		¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="342" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:43:58 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5214" docExpressionCount="468" docLength="5214" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="837285">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\slave\Slave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.slave;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class Slave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private ClientInterface client;¶    private List<KeyValueInterface<String, Integer>> keyValueList;¶    private ModelInterface counter;¶¶    public Slave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, Integer> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer, List<KeyValueInterface<String, Integer>> keyValuePairs) {¶        try {¶            this.traceRemoteList(keyValuePairs);¶            return this.client.reduce(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> splitReduction(Map<String, Integer> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reduceQueueList = this.counter.getReductionQueueList();¶        Partitioner partitioner = PartitionerFactory.getPartitioner();¶        for (Map.Entry<String, Integer> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            Integer value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, Integer> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶    public void setClient(ClientInterface client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, Integer> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, Integer>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="345" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:44:03 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5748" docExpressionCount="518" docLength="5816" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="842372">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookSlave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.slave.SlaveInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Map.Entry;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private RemoteClientFacebookMapReduce client;¶    private List<KeyValueInterface<String, List<String>>> keyValueList;¶    private ModelInterface counter;¶¶    public FacebookSlave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, List<String>> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {¶        try {¶        	System.out.println("slave3333333333333333333333333333");¶            this.traceRemoteList(keyValuePairs);¶            System.out.println("slave44444444444444444444444444444");¶            return this.client.reduceNew(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();¶        FacebookPartitioner partitioner = new FacebookPartitioner();¶        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            List<String> value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶    public void setClient(RemoteClientFacebookMapReduce client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        FacebookReducer reducer = new FacebookReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶¶	@Override¶	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,¶			List<KeyValueInterface<String, Integer>> keyValuePairs) {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public void setClient(ClientInterface client) {¶		// TODO Auto-generated method stub¶		¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="348" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:44:09 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5214" docExpressionCount="468" docLength="5214" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="848901">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\slave\Slave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.slave;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class Slave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private ClientInterface client;¶    private List<KeyValueInterface<String, Integer>> keyValueList;¶    private ModelInterface counter;¶¶    public Slave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, Integer> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer, List<KeyValueInterface<String, Integer>> keyValuePairs) {¶        try {¶            this.traceRemoteList(keyValuePairs);¶            return this.client.reduce(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> splitReduction(Map<String, Integer> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reduceQueueList = this.counter.getReductionQueueList();¶        Partitioner partitioner = PartitionerFactory.getPartitioner();¶        for (Map.Entry<String, Integer> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            Integer value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, Integer> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶    public void setClient(ClientInterface client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, Integer> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, Integer>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="351" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:44:13 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5748" docExpressionCount="518" docLength="5816" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="852324">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookSlave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.slave.SlaveInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Map.Entry;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private RemoteClientFacebookMapReduce client;¶    private List<KeyValueInterface<String, List<String>>> keyValueList;¶    private ModelInterface counter;¶¶    public FacebookSlave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, List<String>> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {¶        try {¶        	System.out.println("slave3333333333333333333333333333");¶            this.traceRemoteList(keyValuePairs);¶            System.out.println("slave44444444444444444444444444444");¶            return this.client.reduceNew(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();¶        FacebookPartitioner partitioner = new FacebookPartitioner();¶        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            List<String> value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶    public void setClient(RemoteClientFacebookMapReduce client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        FacebookReducer reducer = new FacebookReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶¶	@Override¶	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,¶			List<KeyValueInterface<String, Integer>> keyValuePairs) {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public void setClient(ClientInterface client) {¶		// TODO Auto-generated method stub¶		¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="365" _type="Replace" date="Tue Mar 15 21:44:57 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5734" docExpressionCount="518" docLength="5802" endLine="84" insertionLength="15" int_docASTNodeCount="806" int_docActiveCodeLength="5719" int_docExpressionCount="485" int_docLength="5787" length="29" offset="3582" startLine="84" starttimestamp="1647394201042" timestamp="896458">
    <deletedText><![CDATA[RemoteClientFacebookMapReduce]]></deletedText>
    <insertedText><![CDATA[ClientInterface]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="367" _type="Delete" date="Tue Mar 15 21:44:58 EDT 2022" docASTNodeCount="803" docActiveCodeLength="5681" docExpressionCount="484" docLength="5749" endLine="85" length="53" offset="3556" startLine="84" starttimestamp="1647394201042" timestamp="897056">
    <text><![CDATA[    public void setClient(ClientInterface client) {
]]></text>
  </DocumentChange>
  <DocumentChange __id="369" _type="Insert" date="Tue Mar 15 21:44:59 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5734" docExpressionCount="518" docLength="5802" length="53" offset="3556" starttimestamp="1647394201042" timestamp="898478">
    <text><![CDATA[    public void setClient(ClientInterface client) {
]]></text>
  </DocumentChange>
  <DocumentChange __id="378" _type="Insert" date="Tue Mar 15 21:45:07 EDT 2022" docASTNodeCount="844" docActiveCodeLength="5724" docExpressionCount="516" docLength="5804" length="2" offset="5691" starttimestamp="1647394201042" timestamp="906161">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="379" _type="Insert" date="Tue Mar 15 21:45:07 EDT 2022" docASTNodeCount="835" docActiveCodeLength="5676" docExpressionCount="513" docLength="5806" length="2" offset="5705" starttimestamp="1647394201042" timestamp="906165">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="380" _type="Insert" date="Tue Mar 15 21:45:07 EDT 2022" docASTNodeCount="835" docActiveCodeLength="5674" docExpressionCount="513" docLength="5808" length="2" offset="5757" starttimestamp="1647394201042" timestamp="906169">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="381" _type="Insert" date="Tue Mar 15 21:45:07 EDT 2022" docASTNodeCount="835" docActiveCodeLength="5672" docExpressionCount="513" docLength="5810" length="2" offset="5797" starttimestamp="1647394201042" timestamp="906172">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="382" _type="Insert" date="Tue Mar 15 21:45:07 EDT 2022" docASTNodeCount="835" docActiveCodeLength="5670" docExpressionCount="513" docLength="5812" length="2" offset="5803" starttimestamp="1647394201042" timestamp="906175">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="391" _type="Insert" date="Tue Mar 15 21:45:12 EDT 2022" docASTNodeCount="835" docActiveCodeLength="5676" docExpressionCount="513" docLength="5818" length="6" offset="3554" starttimestamp="1647394201042" timestamp="911570">
    <text><![CDATA[
    ]]></text>
  </DocumentChange>
  <DocumentChange __id="393" _type="Replace" date="Tue Mar 15 21:45:12 EDT 2022" docASTNodeCount="837" docActiveCodeLength="5685" docExpressionCount="515" docLength="5827" endLine="84" insertionLength="13" int_docASTNodeCount="835" int_docActiveCodeLength="5672" int_docExpressionCount="513" int_docLength="5814" length="4" offset="3556" startLine="84" starttimestamp="1647394201042" timestamp="911913">
    <deletedText><![CDATA[    ]]></deletedText>
    <insertedText><![CDATA[    @Override]]></insertedText>
  </DocumentChange>
  <Command __id="399" _type="PauseCommand" date="Tue Mar 15 21:45:28 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="927418">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[14391]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="398" _type="ShellCommand" date="Tue Mar 15 21:45:28 EDT 2022" starttimestamp="1647394201042" timestamp="927418" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="400" _type="ShellCommand" date="Tue Mar 15 21:45:28 EDT 2022" starttimestamp="1647394201042" timestamp="927517" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="405" _type="PauseCommand" date="Tue Mar 15 21:45:31 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="930066">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2445]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="404" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 21:45:31 EDT 2022" starttimestamp="1647394201042" timestamp="930066" />
  <Command __id="406" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:45:31 EDT 2022" starttimestamp="1647394201042" timestamp="930153" />
  <Command __id="407" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:45:31 EDT 2022" starttimestamp="1647394201042" timestamp="930186" />
  <Command __id="409" _type="PauseCommand" date="Tue Mar 15 21:45:41 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="940033">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[9847]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="410" _type="MoveCaretCommand" caretOffset="363" date="Tue Mar 15 21:45:41 EDT 2022" docOffset="931" starttimestamp="1647394201042" timestamp="940277" />
  <Command __id="412" _type="PauseCommand" date="Tue Mar 15 21:45:43 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="942894">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2617]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="413" _type="MoveCaretCommand" caretOffset="2807" date="Tue Mar 15 21:45:44 EDT 2022" docOffset="3569" starttimestamp="1647394201042" timestamp="943144" />
  <Command __id="420" _type="PauseCommand" date="Tue Mar 15 21:45:56 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="955692">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1580]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="419" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:45:56 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="955692" type="Run" />
  <Command __id="421" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:45:56 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="955692" type="Run" />
  <Command __id="423" _type="PauseCommand" date="Tue Mar 15 21:45:59 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="958304">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2612]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="422" _type="ShellCommand" date="Tue Mar 15 21:45:59 EDT 2022" starttimestamp="1647394201042" timestamp="958304" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="425" _type="PauseCommand" date="Tue Mar 15 21:46:12 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="971328">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13024]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="424" _type="ConsoleOutput" date="Tue Mar 15 21:46:12 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="971328" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):23
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):81130¶Number of traces > 600  turning tracing off¶Test execution time (ms):4¶DistributedTokenCountQuit did not pass completely:All Output Did not match:.*MapReduce Client.*main.*exit.*%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):23"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="427" _type="PauseCommand" date="Tue Mar 15 21:46:28 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="987566">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[16238]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="426" _type="ConsoleOutput" date="Tue Mar 15 21:46:28 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="987566" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):23"), Diff(INSERT,"Number of traces > 600  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="429" _type="PauseCommand" date="Tue Mar 15 21:46:38 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="997092">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[9526]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="428" _type="ConsoleOutput" date="Tue Mar 15 21:46:38 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="997092" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="430" _type="ConsoleOutput" date="Tue Mar 15 21:46:38 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="997191" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="431" _type="ConsoleOutput" date="Tue Mar 15 21:46:38 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="997293" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="432" _type="ExceptionCommand" date="Tue Mar 15 21:46:38 EDT 2022" starttimestamp="1647394201042" timestamp="997923" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="440" _type="PauseCommand" date="Tue Mar 15 21:47:07 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1026442">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2930]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="439" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:47:07 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1026442" type="Run" />
  <Command __id="441" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:47:07 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1026442" type="Run" />
  <Command __id="443" _type="PauseCommand" date="Tue Mar 15 21:47:10 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1029204">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2762]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="442" _type="ShellCommand" date="Tue Mar 15 21:47:10 EDT 2022" starttimestamp="1647394201042" timestamp="1029204" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="445" _type="PauseCommand" date="Tue Mar 15 21:47:17 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="1036490">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7286]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="444" _type="ConsoleOutput" date="Tue Mar 15 21:47:17 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1036490" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):21
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):46566¶Number of traces > 600  turning tracing off¶Test execution time (ms):6¶Test execution time (ms):3¶Test execution time (ms):2"), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶"), Diff(EQUAL,"¶Test execution time (ms):2"), Diff(INSERT,"1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="447" _type="PauseCommand" date="Tue Mar 15 21:47:33 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="1052883">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[16393]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="446" _type="ConsoleOutput" date="Tue Mar 15 21:47:33 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1052883" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):21"), Diff(INSERT,"Number of traces > 600  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="449" _type="PauseCommand" date="Tue Mar 15 21:47:36 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1055036">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2153]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="448" _type="ConsoleOutput" date="Tue Mar 15 21:47:36 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1055036" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="450" _type="ConsoleOutput" date="Tue Mar 15 21:47:36 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1055137" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="451" _type="ConsoleOutput" date="Tue Mar 15 21:47:36 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1055237" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="453" _type="PauseCommand" date="Tue Mar 15 21:47:56 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="1075840">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[20603]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="452" _type="ConsoleOutput" date="Tue Mar 15 21:47:56 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1075840" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):39341
Number of traces > 600  turning tracing off
Test execution time (ms):5
Test execution time (ms):3
Test execution time (ms):2
Test execution time (ms):3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Na"), Diff(INSERT,"Test execution "), Diff(EQUAL,"ti"), Diff(DELETE,"v"), Diff(INSERT,"m"), Diff(EQUAL,"e "), Diff(DELETE,"Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(INSERT,"(ms):39341¶Number of traces > 600  turning tracing off¶Test execution time (ms):5¶Test execution time (ms):3¶Test execution time (ms):2¶Test execution time (ms):3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="455" _type="PauseCommand" date="Tue Mar 15 21:48:21 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="1100089">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[24249]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="454" _type="ConsoleOutput" date="Tue Mar 15 21:48:21 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1100089" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):39341¶"), Diff(EQUAL,"Number of traces > 600  turning tracing off¶"), Diff(DELETE,"Test execution time (ms):5¶Test execution time (ms):3¶Test execution time (ms):2¶Test execution time (ms):3¶")]]]></diff>
  </Command>
  <Command __id="457" _type="PauseCommand" date="Tue Mar 15 21:48:30 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="1109572">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[9483]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="456" _type="ConsoleOutput" date="Tue Mar 15 21:48:30 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1109572" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="458" _type="ConsoleOutput" date="Tue Mar 15 21:48:30 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1109634" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="459" _type="ConsoleOutput" date="Tue Mar 15 21:48:30 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1109749" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="460" _type="ExceptionCommand" date="Tue Mar 15 21:48:31 EDT 2022" starttimestamp="1647394201042" timestamp="1110300" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="462" _type="PauseCommand" date="Tue Mar 15 21:48:51 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="1130330">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[20030]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="461" _type="ConsoleOutput" date="Tue Mar 15 21:48:51 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1130330" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):46877
Number of traces > 600  turning tracing off
Test execution time (ms):5
Test execution time (ms):3
Test execution time (ms):3
Test execution time (ms):3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Na"), Diff(INSERT,"Test execution "), Diff(EQUAL,"ti"), Diff(DELETE,"v"), Diff(INSERT,"m"), Diff(EQUAL,"e "), Diff(DELETE,"Method), java.base/java.lang.Object.wait(Object.java:328), g"), Diff(INSERT,"(ms):46877¶Number of traces > 600  turning t"), Diff(EQUAL,"ra"), Diff(DELETE,"d"), Diff(INSERT,"c"), Diff(EQUAL,"ing"), Diff(DELETE,"Tools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(INSERT," off¶Test execution time (ms):5¶Test execution time (ms):3¶Test execution time (ms):3¶Test execution time (ms):3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="464" _type="PauseCommand" date="Tue Mar 15 21:49:30 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="1169455">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[39125]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="463" _type="ConsoleOutput" date="Tue Mar 15 21:49:30 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1169455" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2
Test execution time (ms):2
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"46877¶Number of traces > 600  turning tracing off¶Test execution time (ms):5¶Test execution time (ms):3¶Test execution time (ms):3¶Test execution time (ms):3"), Diff(INSERT,"2¶Test execution time (ms):2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="466" _type="PauseCommand" date="Tue Mar 15 21:49:33 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1171958">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2503]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="465" _type="ConsoleOutput" date="Tue Mar 15 21:49:33 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1171958" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment3.A3ConfigurationProvided@79520935 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):2¶Test execution time (ms):2"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment3.A3ConfigurationProvided@79520935 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="468" _type="PauseCommand" date="Tue Mar 15 21:49:47 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="1186785">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[14827]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="467" _type="ExceptionCommand" date="Tue Mar 15 21:49:47 EDT 2022" starttimestamp="1647394201042" timestamp="1186785" type="Exception">
    <exceptionString><![CDATA[(MapReduce Server)Exception in thread "main" java.lang.ClassCastException: class com.sun.proxy.$Proxy1 cannot be cast to class facebook.RemoteClientFacebookMapReduce (com.sun.proxy.$Proxy1 and facebook.RemoteClientFacebookMapReduce are in unnamed module of loader 'app')
(MapReduce Server)	at facebook.FacebookSlave.setClient(FacebookSlave.java:90)
(MapReduce Server)	at facebook.FacebookModel.matchSlavesToClients(FacebookModel.java:80)
(MapReduce Server)	at facebook.FacebookModel.updateThreads(FacebookModel.java:257)
(MapReduce Server)	at facebook.FacebookModel.setNumThreads(FacebookModel.java:288)
(MapReduce Server)	at comp533.controller.Controller.getUserInput(Controller.java:27)
(MapReduce Server)	at facebook.ServerFacebookMapReduce.main(ServerFacebookMapReduce.java:30)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="472" _type="PauseCommand" date="Tue Mar 15 21:50:38 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="1237246">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9833]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="471" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:50:38 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1237246" type="Run" />
  <Command __id="473" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:50:38 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1237247" type="Run" />
  <Command __id="474" _type="MoveCaretCommand" caretOffset="2994" date="Tue Mar 15 21:50:39 EDT 2022" docOffset="3756" starttimestamp="1647394201042" timestamp="1237990" />
  <Command __id="476" _type="PauseCommand" date="Tue Mar 15 21:50:45 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="1244256">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6266]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="475" _type="MoveCaretCommand" caretOffset="3117" date="Tue Mar 15 21:50:45 EDT 2022" docOffset="3879" starttimestamp="1647394201042" timestamp="1244256" />
  <Command __id="478" _type="PauseCommand" date="Tue Mar 15 21:50:47 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1246882">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2626]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="477" _type="SelectTextCommand" caretOffset="3063" date="Tue Mar 15 21:50:47 EDT 2022" end="3063" start="3034" starttimestamp="1647394201042" timestamp="1246882" />
  <Command __id="479" _type="CopyCommand" date="Tue Mar 15 21:50:48 EDT 2022" starttimestamp="1647394201042" timestamp="1247499" />
  <Command __id="480" _type="MoveCaretCommand" caretOffset="2845" date="Tue Mar 15 21:50:48 EDT 2022" docOffset="3607" starttimestamp="1647394201042" timestamp="1247909" />
  <Command __id="481" _type="SelectTextCommand" caretOffset="2850" date="Tue Mar 15 21:50:49 EDT 2022" end="2850" start="2835" starttimestamp="1647394201042" timestamp="1248047" />
  <Command __id="483" _type="PasteCommand" date="Tue Mar 15 21:50:49 EDT 2022" starttimestamp="1647394201042" timestamp="1248311" />
  <Command __id="492" _type="PauseCommand" date="Tue Mar 15 21:50:54 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1253029">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1055]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="491" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:50:54 EDT 2022" starttimestamp="1647394201042" timestamp="1253029" />
  <Command __id="493" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:50:54 EDT 2022" starttimestamp="1647394201042" timestamp="1253035" />
  <Command __id="495" _type="PauseCommand" date="Tue Mar 15 21:50:55 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1254540">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1505]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="494" _type="SelectTextCommand" caretOffset="4958" date="Tue Mar 15 21:50:55 EDT 2022" end="5074" start="4958" starttimestamp="1647394201042" timestamp="1254540" />
  <Command __id="501" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Mar 15 21:50:56 EDT 2022" starttimestamp="1647394201042" timestamp="1255146" />
  <Command __id="502" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 21:50:56 EDT 2022" starttimestamp="1647394201042" timestamp="1255574" />
  <Command __id="503" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:50:56 EDT 2022" starttimestamp="1647394201042" timestamp="1255661" />
  <Command __id="504" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:50:56 EDT 2022" starttimestamp="1647394201042" timestamp="1255729" />
  <Command __id="506" _type="PauseCommand" date="Tue Mar 15 21:50:58 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1257661">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1932]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="505" _type="SelectTextCommand" caretOffset="2794" date="Tue Mar 15 21:50:58 EDT 2022" end="2807" start="2794" starttimestamp="1647394201042" timestamp="1257661" />
  <Command __id="508" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 21:50:59 EDT 2022" starttimestamp="1647394201042" timestamp="1258151" />
  <Command __id="509" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 21:50:59 EDT 2022" starttimestamp="1647394201042" timestamp="1258549" />
  <Command __id="510" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:50:59 EDT 2022" starttimestamp="1647394201042" timestamp="1258633" />
  <Command __id="511" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:50:59 EDT 2022" starttimestamp="1647394201042" timestamp="1258673" />
  <Command __id="513" _type="PauseCommand" date="Tue Mar 15 21:51:01 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1260504">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1831]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="512" _type="MoveCaretCommand" caretOffset="3161" date="Tue Mar 15 21:51:01 EDT 2022" docOffset="3923" starttimestamp="1647394201042" timestamp="1260504" />
  <Command __id="515" _type="PauseCommand" date="Tue Mar 15 21:51:10 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="1269179">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8675]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="516" _type="ShellCommand" date="Tue Mar 15 21:51:10 EDT 2022" starttimestamp="1647394201042" timestamp="1269606" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="517" _type="MoveCaretCommand" caretOffset="259" date="Tue Mar 15 21:51:10 EDT 2022" docOffset="767" starttimestamp="1647394201042" timestamp="1269730" />
  <Command __id="519" _type="PauseCommand" date="Tue Mar 15 21:51:45 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="1304501">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[34771]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="518" _type="ShellCommand" date="Tue Mar 15 21:51:45 EDT 2022" starttimestamp="1647394201042" timestamp="1304501" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="520" _type="MoveCaretCommand" caretOffset="258" date="Tue Mar 15 21:51:45 EDT 2022" docOffset="766" starttimestamp="1647394201042" timestamp="1304570" />
  <Command __id="522" _type="PauseCommand" date="Tue Mar 15 21:51:46 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1305713">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1143]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="521" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 15 21:51:46 EDT 2022" starttimestamp="1647394201042" timestamp="1305713" />
  <Command __id="524" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 21:51:46 EDT 2022" starttimestamp="1647394201042" timestamp="1305943" />
  <Command __id="526" _type="InsertStringCommand" date="Tue Mar 15 21:51:47 EDT 2022" starttimestamp="1647394201042" timestamp="1306444" timestamp2="1306444">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="527" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 21:51:48 EDT 2022" starttimestamp="1647394201042" timestamp="1307312" />
  <Command __id="528" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:51:48 EDT 2022" starttimestamp="1647394201042" timestamp="1307399" />
  <Command __id="529" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:51:48 EDT 2022" starttimestamp="1647394201042" timestamp="1307420" />
  <Command __id="531" _type="PauseCommand" date="Tue Mar 15 21:51:51 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1310780">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3360]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="532" _type="MoveCaretCommand" caretOffset="363" date="Tue Mar 15 21:51:52 EDT 2022" docOffset="931" starttimestamp="1647394201042" timestamp="1311024" />
  <Command __id="534" _type="PauseCommand" date="Tue Mar 15 21:51:54 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1313312">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2288]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="535" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 21:51:54 EDT 2022" starttimestamp="1647394201042" timestamp="1313325" />
  <Command __id="537" _type="InsertStringCommand" date="Tue Mar 15 21:51:54 EDT 2022" starttimestamp="1647394201042" timestamp="1313382" timestamp2="1313382">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="538" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 21:51:55 EDT 2022" starttimestamp="1647394201042" timestamp="1314344" />
  <Command __id="539" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:51:55 EDT 2022" starttimestamp="1647394201042" timestamp="1314432" />
  <Command __id="540" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:51:55 EDT 2022" starttimestamp="1647394201042" timestamp="1314455" />
  <Command __id="545" _type="PauseCommand" date="Tue Mar 15 21:52:00 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1319169">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3097]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="544" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:52:00 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1319169" type="Run" />
  <Command __id="546" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:52:00 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1319169" type="Run" />
  <Command __id="548" _type="PauseCommand" date="Tue Mar 15 21:52:02 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1321798">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2628]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="547" _type="ShellCommand" date="Tue Mar 15 21:52:02 EDT 2022" starttimestamp="1647394201042" timestamp="1321797" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="550" _type="PauseCommand" date="Tue Mar 15 21:52:05 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1324518">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2721]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="549" _type="ConsoleOutput" date="Tue Mar 15 21:52:05 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1324518" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):23
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s21.assignment3.A3ConfigurationProvided@79520935 . Results may change."), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):23"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="552" _type="PauseCommand" date="Tue Mar 15 21:52:21 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="1340877">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[16359]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="551" _type="ConsoleOutput" date="Tue Mar 15 21:52:21 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1340877" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):23"), Diff(INSERT,"Number of traces > 600  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="554" _type="PauseCommand" date="Tue Mar 15 21:52:24 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1343029">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2152]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="553" _type="ConsoleOutput" date="Tue Mar 15 21:52:24 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1343029" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="555" _type="ConsoleOutput" date="Tue Mar 15 21:52:24 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1343128" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="556" _type="ConsoleOutput" date="Tue Mar 15 21:52:24 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1343233" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="558" _type="PauseCommand" date="Tue Mar 15 21:52:44 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="1363843">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[20610]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="557" _type="ConsoleOutput" date="Tue Mar 15 21:52:44 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1363843" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):39314
Number of traces > 600  turning tracing off
Test execution time (ms):4
Test execution time (ms):2
Test execution time (ms):2
Test execution time (ms):2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), g"), Diff(INSERT,"Test execution time (ms):39314¶Number of traces > 600  turning t"), Diff(EQUAL,"ra"), Diff(DELETE,"d"), Diff(INSERT,"c"), Diff(EQUAL,"ing"), Diff(DELETE,"Tools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(INSERT," off¶Test execution time (ms):4¶Test execution time (ms):2¶Test execution time (ms):2¶Test execution time (ms):2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="560" _type="PauseCommand" date="Tue Mar 15 21:54:44 EDT 2022" range="1m-2m" starttimestamp="1647394201042" timestamp="1483450">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[119607]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="559" _type="ConsoleOutput" date="Tue Mar 15 21:54:44 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1483450" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):39314¶"), Diff(EQUAL,"Number of traces > 600  turning tracing off¶"), Diff(DELETE,"Test execution time (ms):4¶Test execution time (ms):2¶Test execution time (ms):2¶Test execution time (ms):2¶")]]]></diff>
  </Command>
  <Command __id="561" _type="ShellCommand" date="Tue Mar 15 21:54:44 EDT 2022" starttimestamp="1647394201042" timestamp="1483604" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="563" _type="PauseCommand" date="Tue Mar 15 21:54:49 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="1488850">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5246]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="562" _type="ShellCommand" date="Tue Mar 15 21:54:49 EDT 2022" starttimestamp="1647394201042" timestamp="1488850" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="565" _type="PauseCommand" date="Tue Mar 15 21:54:51 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1490026">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1176]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="564" _type="ShellCommand" date="Tue Mar 15 21:54:51 EDT 2022" starttimestamp="1647394201042" timestamp="1490026" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="567" _type="PauseCommand" date="Tue Mar 15 21:54:54 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1493410">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3384]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="566" _type="ShellCommand" date="Tue Mar 15 21:54:54 EDT 2022" starttimestamp="1647394201042" timestamp="1493410" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="569" _type="PauseCommand" date="Tue Mar 15 21:54:55 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1494465">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1055]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="568" _type="ConsoleOutput" date="Tue Mar 15 21:54:55 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1494465" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]
(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]¶(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="570" _type="ConsoleOutput" date="Tue Mar 15 21:54:55 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1494614" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]¶"), Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="572" _type="PauseCommand" date="Tue Mar 15 21:55:16 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="1515204">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[20590]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="571" _type="ConsoleOutput" date="Tue Mar 15 21:55:16 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1515204" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):50574
Number of traces > 600  turning tracing off
Number of traces > 600  turning tracing off
Test execution time (ms):4
Number of traces > 600  turning tracing off
Number of traces > 600  turning tracing off
DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0











































]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), g"), Diff(INSERT,"Test execution time (ms):50574¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning t"), Diff(EQUAL,"ra"), Diff(DELETE,"d"), Diff(INSERT,"c"), Diff(EQUAL,"ing"), Diff(DELETE,"Tools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(INSERT," off¶Test execution time (ms):4¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="574" _type="PauseCommand" date="Tue Mar 15 21:55:24 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="1523758">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8554]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="573" _type="ConsoleOutput" date="Tue Mar 15 21:55:24 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1523758" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment3.facebookMapReduce.tests.DistributedFacebookMapReducePartialReduce@34d4032 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):50574¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning t"), Diff(INSERT,"Re-running test g"), Diff(EQUAL,"ra"), Diff(DELETE,"c"), Diff(INSERT,"d"), Diff(EQUAL,"ing"), Diff(DELETE," off¶Test execution time (ms):4¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(INSERT,"Tools.comp533s21.assignment3.facebookMapReduce.tests.DistributedFacebookMapReducePartialReduce@34d4032 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="576" _type="PauseCommand" date="Tue Mar 15 21:55:32 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="1531072">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7314]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="575" _type="ShellCommand" date="Tue Mar 15 21:55:32 EDT 2022" starttimestamp="1647394201042" timestamp="1531072" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="578" _type="PauseCommand" date="Tue Mar 15 21:55:53 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="1552677">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[21605]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="577" _type="ShellCommand" date="Tue Mar 15 21:55:53 EDT 2022" starttimestamp="1647394201042" timestamp="1552677" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="580" _type="PauseCommand" date="Tue Mar 15 21:55:55 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1554544">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1867]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="579" _type="ShellCommand" date="Tue Mar 15 21:55:55 EDT 2022" starttimestamp="1647394201042" timestamp="1554544" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="582" _type="PauseCommand" date="Tue Mar 15 21:56:25 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="1584908">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[30364]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="581" _type="ShellCommand" date="Tue Mar 15 21:56:25 EDT 2022" starttimestamp="1647394201042" timestamp="1584908" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="584" _type="PauseCommand" date="Tue Mar 15 21:57:22 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="1641226">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[56318]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="583" _type="ShellCommand" date="Tue Mar 15 21:57:22 EDT 2022" starttimestamp="1647394201042" timestamp="1641226" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="586" _type="PauseCommand" date="Tue Mar 15 21:57:43 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="1662563">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[21336]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="585" _type="MoveCaretCommand" caretOffset="516" date="Tue Mar 15 21:57:43 EDT 2022" docOffset="1024" starttimestamp="1647394201042" timestamp="1662562" />
  <Command __id="588" _type="PauseCommand" date="Tue Mar 15 21:57:44 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1663860">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1298]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="587" _type="ShellCommand" date="Tue Mar 15 21:57:44 EDT 2022" starttimestamp="1647394201042" timestamp="1663860" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="590" _type="PauseCommand" date="Tue Mar 15 21:57:48 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1667604">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3744]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="589" _type="ConsoleOutput" date="Tue Mar 15 21:57:48 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1667604" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Tue Mar 15 21:57:48 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s21.assignment3.facebookMapReduce.tests.DistributedFacebookMapReducePartialReduce@34d4032 . Results may change."), Diff(INSERT,"Building symbol table and running first pass checks:Tue Mar 15 21:57:48 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="592" _type="PauseCommand" date="Tue Mar 15 21:57:50 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1669792">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2188]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="591" _type="ConsoleOutput" date="Tue Mar 15 21:57:50 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1669792" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:80
Running second pass checks Tue Mar 15 21:57:50 EDT 2022
Start O(n2) inter- and intra class method calls:Tue Mar 15 21:57:50 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and r"), Diff(INSERT,"size:80¶R"), Diff(EQUAL,"unning "), Diff(DELETE,"first"), Diff(INSERT,"second"), Diff(EQUAL," pass checks"), Diff(INSERT," Tue Mar 15 21:57:50 EDT 2022¶Start O(n2) inter- and intra class method calls"), Diff(EQUAL,":Tue Mar 15 21:57:"), Diff(DELETE,"48"), Diff(INSERT,"50"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="593" _type="ConsoleOutput" date="Tue Mar 15 21:57:50 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1669918" type="ConsoleOutput">
    <outputString><![CDATA[End O(n2) inter- and intra class method calls:Tue Mar 15 21:57:50 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:80¶Running second pass checks Tue Mar 15 21:57:50 EDT 2022¶Start"), Diff(INSERT,"End"), Diff(EQUAL," O(n2) inter- and intra class method calls:Tue Mar 15 21:57:50 EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="594" _type="ConsoleOutput" date="Tue Mar 15 21:57:51 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1670911" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Tue Mar 15 21:57:51 EDT 2022
Generating checks:Tue Mar 15 21:57:51 EDT 2022
Finished Generating checks:Tue Mar 15 21:57:51 EDT 2022
Generating externals:Tue Mar 15 21:57:51 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Finished second pass checks:Tue Mar 15 21:57:51 EDT 2022¶Generating checks:Tue Mar 15 21:57:51 EDT 2022¶Finished Generating checks:Tue Mar 15 21:57:51 EDT 2022¶Generating externa"), Diff(EQUAL,"ls:Tue Mar 15 21:57:5"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="595" _type="ConsoleOutput" date="Tue Mar 15 21:57:52 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1671137" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Tue Mar 15 21:57:52 EDT 2022
A3NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0

Test execution time (ms):3539
A3NamedConstants did not pass completely:See console trace about lines failing  this check%0.75

Test execution time (ms):18

A3PublicMethodsOverride did not pass completely:See console trace about lines failing  this check%0.25
Test execution time (ms):13
A3InterfaceAsType did not pass completely:See console trace about lines failing  this check%0.8712121212121212

Test execution time (ms):14
A3MnemonicNames did not pass completely:See console trace about lines failing  this check%0.966078697421981

Test execution time (ms):14
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Tue Mar 15 21:57:5"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Generating checks:Tue Mar 15 21:57:51 EDT 2022¶Finished Generating checks:Tue Mar 15 21:57:51 EDT 2022¶Generating externals:Tue Mar 15 21:57:51 EDT 2022"), Diff(INSERT,"A3NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0¶¶Test execution time (ms):3539¶A3NamedConstants did not pass completely:See console trace about lines failing  this check%0.75¶¶Test execution time (ms):18¶¶A3PublicMethodsOverride did not pass completely:See console trace about lines failing  this check%0.25¶Test execution time (ms):13¶A3InterfaceAsType did not pass completely:See console trace about lines failing  this check%0.8712121212121212¶¶Test execution time (ms):14¶A3MnemonicNames did not pass completely:See console trace about lines failing  this check%0.966078697421981¶¶Test execution time (ms):14"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="596" _type="ConsoleOutput" date="Tue Mar 15 21:57:52 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1671243" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):14
Test execution time (ms):13

A3ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.8846153846153846
Test execution time (ms):14
A3SpuriousCalls did not pass completely:See console trace about lines failing  this check%0.8

Test execution time (ms):14
A3ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.8333333333333334

Test execution time (ms):13
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Tue Mar 15 21:57:52 EDT 2022¶A3NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0¶¶Test execution time (ms):3539¶A3NamedConstants did not pass completely:See console trace about lines failing  this check%0.75¶"), Diff(INSERT,"Test execution time (ms):14"), Diff(EQUAL,"¶Test execution time (ms):1"), Diff(DELETE,"8"), Diff(INSERT,"3"), Diff(EQUAL,"¶¶A3"), Diff(DELETE,"PublicMethodsOverride"), Diff(INSERT,"ExpectedCalls"), Diff(EQUAL," did not pass completely:See console trace about lines failing  this check%0."), Diff(DELETE,"25"), Diff(INSERT,"8846153846153846"), Diff(EQUAL,"¶Test execution time (ms):1"), Diff(DELETE,"3"), Diff(INSERT,"4"), Diff(EQUAL,"¶A3"), Diff(DELETE,"InterfaceAsType"), Diff(INSERT,"SpuriousCalls"), Diff(EQUAL," did not pass completely:See console trace about lines failing  this check%0.8"), Diff(DELETE,"712121212121212"), Diff(EQUAL,"¶¶Test execution time (ms):14¶A3"), Diff(DELETE,"MnemonicNam"), Diff(INSERT,"ExpectedSignatur"), Diff(EQUAL,"es did not pass completely:See console trace about lines failing  this check%0."), Diff(DELETE,"966078697421981"), Diff(INSERT,"8333333333333334"), Diff(EQUAL,"¶¶Test execution time (ms):1"), Diff(DELETE,"4"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="598" _type="PauseCommand" date="Tue Mar 15 21:58:02 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="1681933">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[10690]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="597" _type="ConsoleOutput" date="Tue Mar 15 21:58:02 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1681933" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment3.style.A3ExpectedCalls@104dcace . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):14¶Test execution time (ms):13¶¶A3ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.8846153846153846¶Test execution time (ms):14¶A3SpuriousCalls did not pass completely:See console trace about lines failing  this check%0.8¶¶Test execution time (ms):14¶A3ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.8333333333333334¶¶Test execution time (ms):13"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment3.style.A3ExpectedCalls@104dcace . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="600" _type="PauseCommand" date="Tue Mar 15 21:58:04 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1683182">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1249]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="599" _type="ConsoleOutput" date="Tue Mar 15 21:58:04 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1683182" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment3.style.A3SpuriousCalls@21924258 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment3.style.A3"), Diff(DELETE,"ExpectedCalls@104dcace"), Diff(INSERT,"SpuriousCalls@21924258"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="602" _type="PauseCommand" date="Tue Mar 15 21:58:05 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1684524">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1342]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="601" _type="ConsoleOutput" date="Tue Mar 15 21:58:05 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1684524" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment3.style.A3ExpectedSignatures@7f4aaf8 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment3.style.A3"), Diff(DELETE,"SpuriousCalls@2192425"), Diff(INSERT,"ExpectedSignatures@7f4aaf"), Diff(EQUAL,"8 . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="604" _type="PauseCommand" date="Tue Mar 15 21:58:12 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="1691786">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7262]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="603" _type="ConsoleOutput" date="Tue Mar 15 21:58:12 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1691786" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s21.assignment3.style.A3ExpectedSignatures@7f4aaf8 . Results may change."), Diff(INSERT,"Test execution time (ms):2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="606" _type="PauseCommand" date="Tue Mar 15 21:58:16 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1695334">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3548]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="605" _type="ShellCommand" date="Tue Mar 15 21:58:16 EDT 2022" starttimestamp="1647394201042" timestamp="1695334" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="608" _type="PauseCommand" date="Tue Mar 15 21:58:17 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1696383">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1049]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="607" _type="MoveCaretCommand" caretOffset="662" date="Tue Mar 15 21:58:17 EDT 2022" docOffset="1170" starttimestamp="1647394201042" timestamp="1696383" />
  <Command __id="610" _type="PauseCommand" date="Tue Mar 15 21:58:22 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1701118">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4735]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="611" _type="MoveCaretCommand" caretOffset="2127" date="Tue Mar 15 21:58:22 EDT 2022" docOffset="2969" starttimestamp="1647394201042" timestamp="1701314" />
  <Command __id="613" _type="PauseCommand" date="Tue Mar 15 21:58:30 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="1709851">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8537]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="614" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 15 21:58:31 EDT 2022" docOffset="0" starttimestamp="1647394201042" timestamp="1710114" />
  <Command __id="615" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:58:32 EDT 2022" starttimestamp="1647394201042" timestamp="1711101" />
  <Command __id="616" _type="EclipseCommand" commandID="" date="Tue Mar 15 21:58:32 EDT 2022" starttimestamp="1647394201042" timestamp="1711106" />
  <Command __id="618" _type="PauseCommand" date="Tue Mar 15 21:58:38 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="1717507">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6401]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="617" _type="ConsoleOutput" date="Tue Mar 15 21:58:38 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1717507" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):2"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="619" _type="ConsoleOutput" date="Tue Mar 15 21:58:38 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1717571" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="620" _type="ConsoleOutput" date="Tue Mar 15 21:58:38 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1717708" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="621" _type="ExceptionCommand" date="Tue Mar 15 21:58:39 EDT 2022" starttimestamp="1647394201042" timestamp="1718287" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="622" _type="MoveCaretCommand" caretOffset="979" date="Tue Mar 15 21:58:40 EDT 2022" docOffset="1161" starttimestamp="1647394201042" timestamp="1719274" />
  <Command __id="624" _type="PauseCommand" date="Tue Mar 15 21:58:57 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="1736291">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[17017]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="623" _type="ShellCommand" date="Tue Mar 15 21:58:57 EDT 2022" starttimestamp="1647394201042" timestamp="1736291" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="626" _type="PauseCommand" date="Tue Mar 15 21:58:59 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1738213">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1922]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="625" _type="ConsoleOutput" date="Tue Mar 15 21:58:59 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1738213" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):46418
Test execution time (ms):46426
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), comp533.slave.Slave.run(Slave.java:113), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(INSERT,"Test execution time (ms):46418¶Test execution time (ms):46426"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="627" _type="ConsoleOutput" date="Tue Mar 15 21:58:59 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1738322" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s19.assignment0.testcases.sum.distributed.partitioned_reduce.ClientSumPartitionReduce@6755b0a6 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):46418¶Test execution time (ms):46426"), Diff(INSERT,"Re-running test gradingTools.comp533s19.assignment0.testcases.sum.distributed.partitioned_reduce.ClientSumPartitionReduce@6755b0a6 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="629" _type="PauseCommand" date="Tue Mar 15 21:59:01 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1740734">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2412]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="628" _type="ConsoleOutput" date="Tue Mar 15 21:59:01 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="1740734" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2
Test execution time (ms):2
Test execution time (ms):1
Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s19.assignment0.testcases.sum.distributed.partitioned_reduce.ClientSumPartitionReduce@6755b0a6 . Results may change."), Diff(INSERT,"Test execution time (ms):2¶Test execution time (ms):2¶Test execution time (ms):1¶Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="633" _type="PauseCommand" date="Tue Mar 15 21:59:36 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="1775643">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9187]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="632" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:59:36 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1775643" type="Run" />
  <Command __id="634" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 21:59:36 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1775644" type="Run" />
  <Command __id="636" _type="PauseCommand" date="Tue Mar 15 21:59:40 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1779151">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3507]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="635" _type="ShellCommand" date="Tue Mar 15 21:59:40 EDT 2022" starttimestamp="1647394201042" timestamp="1779151" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="638" _type="PauseCommand" date="Tue Mar 15 22:00:11 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="1809999">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[30848]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="637" _type="ShellCommand" date="Tue Mar 15 22:00:11 EDT 2022" starttimestamp="1647394201042" timestamp="1809999" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="640" _type="PauseCommand" date="Tue Mar 15 22:00:29 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="1828175">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18176]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="641" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 15 22:00:29 EDT 2022" docOffset="0" starttimestamp="1647394201042" timestamp="1828456" />
  <Command __id="643" _type="PauseCommand" date="Tue Mar 15 22:00:30 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1829525">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1069]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="644" _type="MoveCaretCommand" caretOffset="662" date="Tue Mar 15 22:00:30 EDT 2022" docOffset="1170" starttimestamp="1647394201042" timestamp="1829785" />
  <Command __id="646" _type="PauseCommand" date="Tue Mar 15 22:01:00 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="1859445">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[29660]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="647" _type="MoveCaretCommand" caretOffset="260" date="Tue Mar 15 22:01:00 EDT 2022" docOffset="768" starttimestamp="1647394201042" timestamp="1859826" />
  <DocumentChange __id="401" _type="Delete" date="Tue Mar 15 21:45:28 EDT 2022" docASTNodeCount="835" docActiveCodeLength="5679" docExpressionCount="514" docLength="5821" endLine="89" length="6" offset="3795" startLine="89" starttimestamp="1647394201042" timestamp="927614">
    <text><![CDATA[client]]></text>
  </DocumentChange>
  <DocumentChange __id="402" _type="Insert" date="Tue Mar 15 21:45:28 EDT 2022" docASTNodeCount="840" docActiveCodeLength="5717" docExpressionCount="517" docLength="5859" length="38" offset="3795" repeat="2" starttimestamp="1647394201042" timestamp="927621" timestamp2="927622">
    <text><![CDATA[(RemoteClientFacebookMapReduce) client]]></text>
  </DocumentChange>
  <Command __id="408" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:45:41 EDT 2022" docASTNodeCount="380" docActiveCodeLength="2868" docExpressionCount="254" docLength="2917" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="940033">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\RemoteClientFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import comp533.client.ClientInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.main.ModelInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.List;¶import java.util.Map;¶¶public class RemoteClientFacebookMapReduce extends AMapReduceTracer implements ClientInterface {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶¶	public static void main(String[] args) {¶        try {¶            Registry rmiRegistry = LocateRegistry.getRegistry(109"), Diff(DELETE,"9"), Diff(INSERT,"1"), Diff(EQUAL,");¶            RemoteClientFacebookMapReduce remoteClient = new RemoteClientFacebookMapReduce();¶            UnicastRemoteObject.exportObject(remoteClient, 0);¶            rmiRegistry.rebind(RemoteClientFacebookMapReduce.class.getName(), remoteClient);¶            ¶            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());¶            counter1.registerClient(remoteClient);¶            ¶            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");¶            System.out.println(counter1.toString());¶            System.out.println(remoteClient.toString());¶            System.out.println("?????????????????????????????????");¶            ¶            remoteClient.synchronizedWait();¶            AMapReduceTracer.traceExit(ModelInterface.class);¶            System.exit(0);¶        } catch (RemoteException | NotBoundException | InterruptedException ex) {¶            ex.printStackTrace();¶        }¶    }¶¶	public Map<String, List<String>> reduceNew(List<KeyValueInterface<String, List<String>>> keyValuePairs) throws RemoteException {¶    	this.trace("clientreducenew5555555555555555555555555555");¶        this.traceRemoteList(keyValuePairs);¶        this.trace("clientreducenew66666666666666666666666666");¶        FacebookReducer reducer = new FacebookReducer();¶        Map<String, List<String>> result = reducer.reduce(keyValuePairs);¶        this.traceRemoteResult(result);¶        return result;¶    }¶¶    public void quit() {¶        this.traceQuit();¶        this.synchronizedNotify();¶    }¶¶	@Override¶	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs)¶			throws RemoteException {¶		// TODO Auto-generated method stub¶		this.trace("clientreducenew5555555555555555555555555555");¶        this.traceRemoteList(serializableKeyValuePairs);¶        this.trace("clientreducenew66666666666666666666666666");¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package facebook;


import comp533.reducer.ReducerInterface;
import comp533.reducer.ReducerFactory;
import comp533.client.ClientInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.main.TokenCounterModel;
import comp533.main.RemoteModel;
import comp533.main.ModelInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;


import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;
import java.util.Map;

public class RemoteClientFacebookMapReduce extends AMapReduceTracer implements ClientInterface {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public static void main(String[] args) {
        try {
            Registry rmiRegistry = LocateRegistry.getRegistry(1091);
            RemoteClientFacebookMapReduce remoteClient = new RemoteClientFacebookMapReduce();
            UnicastRemoteObject.exportObject(remoteClient, 0);
            rmiRegistry.rebind(RemoteClientFacebookMapReduce.class.getName(), remoteClient);
            
            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());
            counter1.registerClient(remoteClient);
            
            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
            System.out.println(counter1.toString());
            System.out.println(remoteClient.toString());
            System.out.println("?????????????????????????????????");
            
            remoteClient.synchronizedWait();
            AMapReduceTracer.traceExit(ModelInterface.class);
            System.exit(0);
        } catch (RemoteException | NotBoundException | InterruptedException ex) {
            ex.printStackTrace();
        }
    }

	public Map<String, List<String>> reduceNew(List<KeyValueInterface<String, List<String>>> keyValuePairs) throws RemoteException {
    	this.trace("clientreducenew5555555555555555555555555555");
        this.traceRemoteList(keyValuePairs);
        this.trace("clientreducenew66666666666666666666666666");
        FacebookReducer reducer = new FacebookReducer();
        Map<String, List<String>> result = reducer.reduce(keyValuePairs);
        this.traceRemoteResult(result);
        return result;
    }

    public void quit() {
        this.traceQuit();
        this.synchronizedNotify();
    }

	@Override
	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs)
			throws RemoteException {
		// TODO Auto-generated method stub
		this.trace("clientreducenew5555555555555555555555555555");
        this.traceRemoteList(serializableKeyValuePairs);
        this.trace("clientreducenew66666666666666666666666666");
		return null;
	}

}
]]></snapshot>
  </Command>
  <Command __id="411" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:45:43 EDT 2022" docASTNodeCount="840" docActiveCodeLength="5717" docExpressionCount="517" docLength="5859" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="942894">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookSlave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.slave.SlaveInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Map.Entry;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private RemoteClientFacebookMapReduce client;¶    private List<KeyValueInterface<String, List<String>>> keyValueList;¶    private ModelInterface counter;¶¶    public FacebookSlave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, List<String>> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {¶        try {¶        	System.out.println("slave3333333333333333333333333333");¶            this.traceRemoteList(keyValuePairs);¶            System.out.println("slave44444444444444444444444444444");¶            return this.client.reduceNew(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();¶        FacebookPartitioner partitioner = new FacebookPartitioner();¶        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            List<String> value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶"), Diff(INSERT,"    @Override¶"), Diff(EQUAL,"    public void setClient("), Diff(DELETE,"RemoteClientFacebookMapRedu"), Diff(INSERT,"ClientInterfa"), Diff(EQUAL,"ce client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client ="), Diff(INSERT," (RemoteClientFacebookMapReduce)"), Diff(EQUAL," client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        FacebookReducer reducer = new FacebookReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶¶	@Override¶	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,¶			List<KeyValueInterface<String, Integer>> keyValuePairs) {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶"), Diff(INSERT,"//"), Diff(EQUAL,"	@Override¶"), Diff(INSERT,"//"), Diff(EQUAL,"	public void setClient(ClientInterface client) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"		// TODO Auto-generated method stub¶"), Diff(INSERT,"//"), Diff(EQUAL,"		¶"), Diff(INSERT,"//"), Diff(EQUAL,"	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package facebook;

import comp533.barrier.BarrierInterface;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.main.ModelInterface;
import comp533.keyValue.KeyValue;
import comp533.partitioner.Partitioner;
import comp533.partitioner.PartitionerFactory;
import comp533.reducer.ReducerInterface;
import comp533.slave.SlaveInterface;
import comp533.reducer.ReducerFactory;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {
    private int threadId;
    private RemoteClientFacebookMapReduce client;
    private List<KeyValueInterface<String, List<String>>> keyValueList;
    private ModelInterface counter;

    public FacebookSlave(int threadId, ModelInterface counter) {
        this.threadId = threadId;
        this.counter = counter;
        this.keyValueList = new ArrayList<>();
    }

    public synchronized void notifySlave() {
        this.synchronizedNotify();
    }

    public void splitBoundedBuffer() throws InterruptedException {
        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();
        KeyValueInterface<String, List<String>> consumedItem = null;
        while(consumedItem == null || consumedItem.getKey() != null) {
            this.traceDequeueRequest(boundedBuffer);
            consumedItem = boundedBuffer.take();
            this.traceDequeue(consumedItem);
            if (consumedItem.getKey() != null) {
                this.keyValueList.add(consumedItem);
            }
        }
    }

    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {
        try {
        	System.out.println("slave3333333333333333333333333333");
            this.traceRemoteList(keyValuePairs);
            System.out.println("slave44444444444444444444444444444");
            return this.client.reduceNew(keyValuePairs);
        } catch (RemoteException | NullPointerException ex) {
            return reducer.reduce(keyValuePairs);
        }

    }

    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {
        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();
        FacebookPartitioner partitioner = new FacebookPartitioner();
        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {
            String key = entry.getKey();
            List<String> value = entry.getValue();
            if (key == null) {
                break;
            }
            int numOfPartitions = reduceQueueList.size();
            int index = partitioner.getPartition(key, value, numOfPartitions);
            this.tracePartitionAssigned(key, value, index, numOfPartitions);
            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);
            reduceQueueList.get(index).add(keyValue);
        }
        return reduceQueueList;
    }

    @Override
    public void setClient(ClientInterface client) {
    	System.out.println("*****************************");
    	System.out.println(client.getClass());
    	System.out.println(client.toString());
        this.client = (RemoteClientFacebookMapReduce) client;
        this.traceClientAssignment(client);
    }

    public void signalQuit() {
        this.traceQuit();
    }

    @Override
    public void run() {
        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();
        FacebookReducer reducer = new FacebookReducer();
        while(true) {
            try {
                Map<String, Integer> originalMap = this.counter.getResult();
                this.splitBoundedBuffer();
                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);
                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);
                tokenCounterBarrier.barrier();
                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);
                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {
                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);
                    this.reduceList(reducer, keyValues);
                }
                JoinerInterface joiner = this.counter.getJoiner();
                joiner.finished();
                this.traceAddedToMap(originalMap, this.counter.getResult());
                this.traceRemoteResult(this.counter.getResult());
                this.synchronizedWait();
                this.keyValueList = new ArrayList<>();
            } catch (InterruptedException ex) {
                Tracer.error(Arrays.toString(ex.getStackTrace()));
                break;
            }
        }
    }

	@Override
	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,
			List<KeyValueInterface<String, Integer>> keyValuePairs) {
		// TODO Auto-generated method stub
		return null;
	}

//	@Override
//	public void setClient(ClientInterface client) {
//		// TODO Auto-generated method stub
//		
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="482" _type="Replace" date="Tue Mar 15 21:50:49 EDT 2022" docASTNodeCount="840" docActiveCodeLength="5731" docExpressionCount="517" docLength="5873" endLine="85" insertionLength="29" int_docASTNodeCount="797" int_docActiveCodeLength="5702" int_docExpressionCount="482" int_docLength="5844" length="15" offset="3597" startLine="85" starttimestamp="1647394201042" timestamp="1248297">
    <deletedText><![CDATA[ClientInterface]]></deletedText>
    <insertedText><![CDATA[RemoteClientFacebookMapReduce]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="486" _type="Delete" date="Tue Mar 15 21:50:52 EDT 2022" docASTNodeCount="837" docActiveCodeLength="5699" docExpressionCount="515" docLength="5841" endLine="89" length="32" offset="3809" startLine="89" starttimestamp="1647394201042" timestamp="1251378">
    <text><![CDATA[(RemoteClientFacebookMapReduce) ]]></text>
  </DocumentChange>
  <DocumentChange __id="496" _type="Delete" date="Tue Mar 15 21:50:56 EDT 2022" docASTNodeCount="837" docActiveCodeLength="5709" docExpressionCount="515" docLength="5839" endLine="133" length="2" offset="5720" startLine="133" starttimestamp="1647394201042" timestamp="1255102">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="497" _type="Delete" date="Tue Mar 15 21:50:56 EDT 2022" docASTNodeCount="848" docActiveCodeLength="5757" docExpressionCount="520" docLength="5837" endLine="134" length="2" offset="5732" startLine="134" starttimestamp="1647394201042" timestamp="1255109">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="498" _type="Delete" date="Tue Mar 15 21:50:56 EDT 2022" docASTNodeCount="848" docActiveCodeLength="5759" docExpressionCount="520" docLength="5835" endLine="135" length="2" offset="5782" startLine="135" starttimestamp="1647394201042" timestamp="1255112">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="499" _type="Delete" date="Tue Mar 15 21:50:56 EDT 2022" docASTNodeCount="848" docActiveCodeLength="5761" docExpressionCount="520" docLength="5833" endLine="136" length="2" offset="5820" startLine="136" starttimestamp="1647394201042" timestamp="1255115">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="500" _type="Delete" date="Tue Mar 15 21:50:56 EDT 2022" docASTNodeCount="848" docActiveCodeLength="5763" docExpressionCount="520" docLength="5831" endLine="137" length="2" offset="5824" startLine="137" starttimestamp="1647394201042" timestamp="1255118">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="507" _type="Delete" date="Tue Mar 15 21:50:59 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5750" docExpressionCount="518" docLength="5818" endLine="84" length="13" offset="3556" startLine="84" starttimestamp="1647394201042" timestamp="1258145">
    <text><![CDATA[    @Override]]></text>
  </DocumentChange>
  <Command __id="514" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:51:10 EDT 2022" docASTNodeCount="190" docActiveCodeLength="1300" docExpressionCount="134" docLength="1300" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1269179">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\ServerFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.client.Client;¶import comp533.controller.ControllerInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.controller.Controller;¶import comp533.view.View;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶public class ServerFacebookMapReduce {¶    private static Registry rmiRegistry;¶¶    public static void main(String[] args) {¶        try {¶            rmiRegistry = LocateRegistry.createRegistry(109"), Diff(DELETE,"9"), Diff(INSERT,"1"), Diff(EQUAL,");¶            RemoteModel counter1 = new FacebookModel();¶            UnicastRemoteObject.exportObject(counter1, 0);¶            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);¶            ViewInterface view = new View();¶            ControllerInterface controller = new Controller(counter1, view);¶            controller.getUserInput(counter1);¶            System.exit(0);¶        	¶        	¶        } catch (RemoteException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶    ¶    ¶}¶")]]]></diff>
    <snapshot><![CDATA[package facebook;

import comp533.client.Client;
import comp533.controller.ControllerInterface;
import comp533.main.TokenCounterModel;
import comp533.main.RemoteModel;
import comp533.controller.Controller;
import comp533.view.View;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

public class ServerFacebookMapReduce {
    private static Registry rmiRegistry;

    public static void main(String[] args) {
        try {
            rmiRegistry = LocateRegistry.createRegistry(1091);
            RemoteModel counter1 = new FacebookModel();
            UnicastRemoteObject.exportObject(counter1, 0);
            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);
            ViewInterface view = new View();
            ControllerInterface controller = new Controller(counter1, view);
            controller.getUserInput(counter1);
            System.exit(0);
        	
        	
        } catch (RemoteException ex) {
            Tracer.error(ex.getMessage());
        }
    }
    
    
}
]]></snapshot>
  </Command>
  <DocumentChange __id="523" _type="Delete" date="Tue Mar 15 21:51:46 EDT 2022" docASTNodeCount="190" docActiveCodeLength="1299" docExpressionCount="134" docLength="1299" endLine="23" length="1" offset="766" startLine="23" starttimestamp="1647394201042" timestamp="1305937">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <DocumentChange __id="525" _type="Insert" date="Tue Mar 15 21:51:47 EDT 2022" docASTNodeCount="190" docActiveCodeLength="1300" docExpressionCount="134" docLength="1300" length="1" offset="766" starttimestamp="1647394201042" timestamp="1306441">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <Command __id="530" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:51:51 EDT 2022" docASTNodeCount="380" docActiveCodeLength="2868" docExpressionCount="254" docLength="2917" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1310780">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\RemoteClientFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import comp533.client.ClientInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.main.ModelInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.List;¶import java.util.Map;¶¶public class RemoteClientFacebookMapReduce extends AMapReduceTracer implements ClientInterface {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶¶	public static void main(String[] args) {¶        try {¶            Registry rmiRegistry = LocateRegistry.getRegistry(1091);¶            RemoteClientFacebookMapReduce remoteClient = new RemoteClientFacebookMapReduce();¶            UnicastRemoteObject.exportObject(remoteClient, 0);¶            rmiRegistry.rebind(RemoteClientFacebookMapReduce.class.getName(), remoteClient);¶            ¶            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());¶            counter1.registerClient(remoteClient);¶            ¶            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");¶            System.out.println(counter1.toString());¶            System.out.println(remoteClient.toString());¶            System.out.println("?????????????????????????????????");¶            ¶            remoteClient.synchronizedWait();¶            AMapReduceTracer.traceExit(ModelInterface.class);¶            System.exit(0);¶        } catch (RemoteException | NotBoundException | InterruptedException ex) {¶            ex.printStackTrace();¶        }¶    }¶¶	public Map<String, List<String>> reduceNew(List<KeyValueInterface<String, List<String>>> keyValuePairs) throws RemoteException {¶    	this.trace("clientreducenew5555555555555555555555555555");¶        this.traceRemoteList(keyValuePairs);¶        this.trace("clientreducenew66666666666666666666666666");¶        FacebookReducer reducer = new FacebookReducer();¶        Map<String, List<String>> result = reducer.reduce(keyValuePairs);¶        this.traceRemoteResult(result);¶        return result;¶    }¶¶    public void quit() {¶        this.traceQuit();¶        this.synchronizedNotify();¶    }¶¶	@Override¶	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs)¶			throws RemoteException {¶		// TODO Auto-generated method stub¶		this.trace("clientreducenew5555555555555555555555555555");¶        this.traceRemoteList(serializableKeyValuePairs);¶        this.trace("clientreducenew66666666666666666666666666");¶		return null;¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="533" _type="Delete" date="Tue Mar 15 21:51:54 EDT 2022" docASTNodeCount="380" docActiveCodeLength="2867" docExpressionCount="254" docLength="2916" endLine="30" length="1" offset="930" startLine="30" starttimestamp="1647394201042" timestamp="1313312">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <DocumentChange __id="536" _type="Insert" date="Tue Mar 15 21:51:54 EDT 2022" docASTNodeCount="380" docActiveCodeLength="2868" docExpressionCount="254" docLength="2917" length="1" offset="930" starttimestamp="1647394201042" timestamp="1313378">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <Command __id="541" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:51:56 EDT 2022" docASTNodeCount="190" docActiveCodeLength="1300" docExpressionCount="134" docLength="1300" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1315845">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\ServerFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.client.Client;¶import comp533.controller.ControllerInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.controller.Controller;¶import comp533.view.View;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶public class ServerFacebookMapReduce {¶    private static Registry rmiRegistry;¶¶    public static void main(String[] args) {¶        try {¶            rmiRegistry = LocateRegistry.createRegistry(109"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,");¶            RemoteModel counter1 = new FacebookModel();¶            UnicastRemoteObject.exportObject(counter1, 0);¶            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);¶            ViewInterface view = new View();¶            ControllerInterface controller = new Controller(counter1, view);¶            controller.getUserInput(counter1);¶            System.exit(0);¶        	¶        	¶        } catch (RemoteException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶    ¶    ¶}¶")]]]></diff>
    <snapshot><![CDATA[package facebook;

import comp533.client.Client;
import comp533.controller.ControllerInterface;
import comp533.main.TokenCounterModel;
import comp533.main.RemoteModel;
import comp533.controller.Controller;
import comp533.view.View;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

public class ServerFacebookMapReduce {
    private static Registry rmiRegistry;

    public static void main(String[] args) {
        try {
            rmiRegistry = LocateRegistry.createRegistry(1092);
            RemoteModel counter1 = new FacebookModel();
            UnicastRemoteObject.exportObject(counter1, 0);
            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);
            ViewInterface view = new View();
            ControllerInterface controller = new Controller(counter1, view);
            controller.getUserInput(counter1);
            System.exit(0);
        	
        	
        } catch (RemoteException ex) {
            Tracer.error(ex.getMessage());
        }
    }
    
    
}
]]></snapshot>
  </Command>
  <Command __id="609" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:58:22 EDT 2022" docASTNodeCount="1625" docActiveCodeLength="11192" docExpressionCount="988" docLength="11207" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1701118">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.RemoteModel;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.main.ModelInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, List<String>> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<FacebookSlave> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<FacebookSlave> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public FacebookModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶            ¶            for (int i = 0; i < 2; i++) {¶            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶                System.out.println(unassignedSlaves);¶                System.out.println(unassignedClients);¶                System.out.println("################################");¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        FacebookMapper mapper = new FacebookMapper();¶        for (String token: tokens) {¶        	String[] all = token.split(",");¶        	String user = all[0];¶        	String[] friends = Arrays.copyOfRange(all, 1, all.length);¶        	Arrays.sort(friends);¶        	KeyValueInterface<String, List<String>> keyValue;¶        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");¶        	this.traceRemoteList(friends);¶        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");¶        	for (String friend: friends) {¶        		keyValue = mapper.map(token, user, friend, friends);¶        		this.produceBoundedBuffer(keyValue);¶     ¶            }¶            ¶        }¶        this.endEnqueue();¶        ¶¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, List<String>> oldResult = this.result;¶        this.result = new HashMap<String, List<String>>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final List<String> value = keyValues.getValue();¶                if (result.get(key) == null) {¶                	result.put(key, value);¶                } else {¶                    final List<String> current = result.get(key);¶                    ¶    				final List<String> newValue = intersection(current, value);¶    				result.put(key, newValue);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    public static <T> List<T> intersection(List<T> list1, List<T> list2) {¶        List<T> list = new ArrayList<T>();¶¶        for (T t : list1) {¶            if(list2.contains(t)) {¶                list.add(t);¶            }¶        }¶¶        return list;¶    }¶    ¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, List<String>> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            FacebookSlave slave = new FacebookSlave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof FacebookModel)) {¶            return false;¶        }¶        FacebookModel otherCounter = (FacebookModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="612" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 21:58:30 EDT 2022" docASTNodeCount="292" docActiveCodeLength="1656" docExpressionCount="174" docLength="1656" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1709851">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookReducer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package facebook;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import comp533.keyValue.KeyValueInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;

public class FacebookReducer extends AMapReduceTracer{
	public Map<String, List<String>> reduce(final List<KeyValueInterface<String, List<String>>> friends) {
		System.out.println("****************");
		System.out.println(friends);
        final Map<String, List<String>> newMap = new HashMap<>();
        for (KeyValueInterface<String, List<String>> keyValue: friends) {
            final String key = keyValue.getKey();
            final List<String> value = keyValue.getValue();

            if (newMap.get(key) == null) {
            	newMap.put(key, value);
            } else {
                final List<String> current = newMap.get(key);
                
				final List<String> newValue = intersection(current, value);
				newMap.put(key, newValue);
            }
        }
        this.traceReduce(friends, newMap);
        System.out.println("reducer11111111111111111111111111111111111111");
    	this.traceRemoteList(friends);
    	System.out.println("reducer2222222222222222222222222222222222222222");
        System.out.println("map");
        System.out.println(friends);
        return newMap;
    }
	
	
	public static <T> List<T> intersection(List<T> list1, List<T> list2) {
        List<T> list = new ArrayList<T>();

        for (T t : list1) {
            if(list2.contains(t)) {
                list.add(t);
            }
        }

        return list;
    }
}
]]></snapshot>
  </Command>
  <Command __id="639" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:00:29 EDT 2022" docASTNodeCount="421" docActiveCodeLength="2638" docExpressionCount="254" docLength="2676" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1828175">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\StandAloneFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package facebook;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.stream.Collectors;

import gradingTools.comp533s19.assignment0.AMapReduceTracer;

public class StandAloneFacebookMapReduce extends AMapReduceTracer {
	final static String QUIT = "quit";
	final static Scanner SCAN = new Scanner(System.in);
	public static void main(final String[] args) {
		final StandAloneFacebookMapReduce counter = new StandAloneFacebookMapReduce();
        while (true)  {
        	System.out.println("Please enter quit or a line of tokens to be processed separated by spaces");
        	counter.traceNumbersPrompt();
        	
            final String line = SCAN.nextLine();
            if (QUIT.equals(line)) {
            	SCAN.close();
                return;
            }
            
            final String[] tokens = line.split(" ");
            
            final Map<String, List<String>> tokenMap = new HashMap<String, List<String>>();
            for (String token: tokens) {
            	String[] all = token.split(",");
            	String user = all[0];
            	String[] friends = Arrays.copyOfRange(all, 1, all.length);
            	for (String friend: friends) {
            		List<String> value = Arrays.asList(friends);
        			String key = buildKey(user, friend);
        			System.out.println(key +" " + value);
        			
            		if (tokenMap.get(key) == null) {
            			tokenMap.put(key, value);
                    } else {
                        final List<String> current = tokenMap.get(key);
                        
						final List<String> newValue = intersection(current, value);
                        tokenMap.put(key, newValue);
                    }
            		
        			
        			
            	}
//            	System.out.println("");
                
            }
            
            
            System.out.println("Output:");
            final String result = tokenMap.toString();
            System.out.println(result.substring(1, result.length() - 1));
        }
    }
	
	public static String buildKey(String user, String friend) {
		if (user.compareTo(friend) < 0) {
			return user+"_"+friend;
		} else {
			return friend+"_"+user;
		}
		
	}
	
	public static <T> List<T> intersection(List<T> list1, List<T> list2) {
        List<T> list = new ArrayList<T>();

        for (T t : list1) {
            if(list2.contains(t)) {
                list.add(t);
            }
        }

        return list;
    }
}
]]></snapshot>
  </Command>
  <Command __id="642" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:00:30 EDT 2022" docASTNodeCount="190" docActiveCodeLength="1300" docExpressionCount="134" docLength="1300" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1829525">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\ServerFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.client.Client;¶import comp533.controller.ControllerInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.controller.Controller;¶import comp533.view.View;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶public class ServerFacebookMapReduce {¶    private static Registry rmiRegistry;¶¶    public static void main(String[] args) {¶        try {¶            rmiRegistry = LocateRegistry.createRegistry(1092);¶            RemoteModel counter1 = new FacebookModel();¶            UnicastRemoteObject.exportObject(counter1, 0);¶            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);¶            ViewInterface view = new View();¶            ControllerInterface controller = new Controller(counter1, view);¶            controller.getUserInput(counter1);¶            System.exit(0);¶        	¶        	¶        } catch (RemoteException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶    ¶    ¶}¶")]]]></diff>
  </Command>
  <Command __id="645" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:01:00 EDT 2022" docASTNodeCount="192" docActiveCodeLength="1271" docExpressionCount="136" docLength="1271" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1859445">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\server\TokenCounterServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.server;¶¶import comp533.client.Client;¶import comp533.controller.ControllerInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.controller.Controller;¶import comp533.view.View;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶public class TokenCounterServer {¶    private static Registry rmiRegistry;¶¶    public static void main(String[] args) {¶        try {¶            rmiRegistry = LocateRegistry.createRegistry(1091);¶            RemoteModel counter1 = new TokenCounterModel();¶            UnicastRemoteObject.exportObject(counter1, 0);¶            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);¶            ViewInterface view = new View();¶            ControllerInterface controller = new Controller(counter1, view);¶            controller.getUserInput(counter1);¶            System.exit(0);¶        } catch (RemoteException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="649" _type="PauseCommand" date="Tue Mar 15 22:01:03 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1862227">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2401]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="651" _type="MoveCaretCommand" caretOffset="662" date="Tue Mar 15 22:01:03 EDT 2022" docOffset="1170" starttimestamp="1647394201042" timestamp="1862898" />
  <Command __id="652" _type="MoveCaretCommand" caretOffset="260" date="Tue Mar 15 22:01:03 EDT 2022" docOffset="768" starttimestamp="1647394201042" timestamp="1862904" />
  <Command __id="654" _type="PauseCommand" date="Tue Mar 15 22:01:27 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="1886394">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[23490]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="655" _type="MoveCaretCommand" caretOffset="662" date="Tue Mar 15 22:01:27 EDT 2022" docOffset="1170" starttimestamp="1647394201042" timestamp="1886602" />
  <Command __id="657" _type="PauseCommand" date="Tue Mar 15 22:01:46 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="1905654">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[19052]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="656" _type="SelectTextCommand" caretOffset="21" date="Tue Mar 15 22:01:46 EDT 2022" end="50" start="21" starttimestamp="1647394201042" timestamp="1905654" />
  <Command __id="658" _type="SelectTextCommand" caretOffset="21" date="Tue Mar 15 22:01:46 EDT 2022" end="50" start="21" starttimestamp="1647394201042" timestamp="1905655" />
  <Command __id="660" _type="PauseCommand" date="Tue Mar 15 22:01:48 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1907227">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1572]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="659" _type="ShellCommand" date="Tue Mar 15 22:01:48 EDT 2022" starttimestamp="1647394201042" timestamp="1907227" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="661" _type="ShellCommand" date="Tue Mar 15 22:01:48 EDT 2022" starttimestamp="1647394201042" timestamp="1907330" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="665" _type="PauseCommand" date="Tue Mar 15 22:01:50 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1909635">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[2286]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="664" _type="ShellCommand" date="Tue Mar 15 22:01:50 EDT 2022" starttimestamp="1647394201042" timestamp="1909635" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="666" _type="ShellCommand" date="Tue Mar 15 22:01:50 EDT 2022" starttimestamp="1647394201042" timestamp="1909729" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="670" _type="MoveCaretCommand" caretOffset="737" date="Tue Mar 15 22:01:50 EDT 2022" docOffset="737" starttimestamp="1647394201042" timestamp="1909887" />
  <Command __id="672" _type="PauseCommand" date="Tue Mar 15 22:01:53 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1912018">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2131]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="671" _type="ShellCommand" date="Tue Mar 15 22:01:53 EDT 2022" starttimestamp="1647394201042" timestamp="1912018" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="673" _type="ShellCommand" date="Tue Mar 15 22:01:53 EDT 2022" starttimestamp="1647394201042" timestamp="1912113" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="677" _type="MoveCaretCommand" caretOffset="21" date="Tue Mar 15 22:01:53 EDT 2022" docOffset="21" starttimestamp="1647394201042" timestamp="1912268" />
  <Command __id="679" _type="PauseCommand" date="Tue Mar 15 22:01:55 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1914477">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2209]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="678" _type="ShellCommand" date="Tue Mar 15 22:01:55 EDT 2022" starttimestamp="1647394201042" timestamp="1914477" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="680" _type="ShellCommand" date="Tue Mar 15 22:01:55 EDT 2022" starttimestamp="1647394201042" timestamp="1914576" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="684" _type="PauseCommand" date="Tue Mar 15 22:01:57 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1916785">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[2197]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="683" _type="ShellCommand" date="Tue Mar 15 22:01:57 EDT 2022" starttimestamp="1647394201042" timestamp="1916785" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="685" _type="ShellCommand" date="Tue Mar 15 22:01:57 EDT 2022" starttimestamp="1647394201042" timestamp="1916875" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="689" _type="PauseCommand" date="Tue Mar 15 22:02:00 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1918993">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[2107]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="688" _type="ShellCommand" date="Tue Mar 15 22:02:00 EDT 2022" starttimestamp="1647394201042" timestamp="1918993" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="690" _type="ShellCommand" date="Tue Mar 15 22:02:00 EDT 2022" starttimestamp="1647394201042" timestamp="1919102" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="694" _type="MoveCaretCommand" caretOffset="675" date="Tue Mar 15 22:02:00 EDT 2022" docOffset="675" starttimestamp="1647394201042" timestamp="1919266" />
  <Command __id="696" _type="PauseCommand" date="Tue Mar 15 22:02:01 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="1920666">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1400]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="695" _type="ShellCommand" date="Tue Mar 15 22:02:01 EDT 2022" starttimestamp="1647394201042" timestamp="1920666" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="697" _type="ShellCommand" date="Tue Mar 15 22:02:01 EDT 2022" starttimestamp="1647394201042" timestamp="1920765" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="700" _type="MoveCaretCommand" caretOffset="276" date="Tue Mar 15 22:02:02 EDT 2022" docOffset="276" starttimestamp="1647394201042" timestamp="1921450" />
  <Command __id="701" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 22:02:03 EDT 2022" starttimestamp="1647394201042" timestamp="1922319" />
  <Command __id="702" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:02:03 EDT 2022" starttimestamp="1647394201042" timestamp="1922407" />
  <Command __id="703" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:02:03 EDT 2022" starttimestamp="1647394201042" timestamp="1922429" />
  <Command __id="705" _type="MoveCaretCommand" caretOffset="389" date="Tue Mar 15 22:02:03 EDT 2022" docOffset="389" starttimestamp="1647394201042" timestamp="1922860" />
  <Command __id="706" _type="MoveCaretCommand" caretOffset="389" date="Tue Mar 15 22:02:03 EDT 2022" docOffset="389" starttimestamp="1647394201042" timestamp="1922892" />
  <Command __id="707" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 22:02:04 EDT 2022" starttimestamp="1647394201042" timestamp="1923113" />
  <Command __id="708" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:02:04 EDT 2022" starttimestamp="1647394201042" timestamp="1923431" />
  <Command __id="709" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:02:04 EDT 2022" starttimestamp="1647394201042" timestamp="1923449" />
  <Command __id="711" _type="PauseCommand" date="Tue Mar 15 22:02:12 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="1931422">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7973]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="712" _type="MoveCaretCommand" caretOffset="1750" date="Tue Mar 15 22:02:12 EDT 2022" docOffset="2278" starttimestamp="1647394201042" timestamp="1931663" />
  <Command __id="714" _type="PauseCommand" date="Tue Mar 15 22:02:17 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1936322">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4659]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="715" _type="MoveCaretCommand" caretOffset="363" date="Tue Mar 15 22:02:17 EDT 2022" docOffset="931" starttimestamp="1647394201042" timestamp="1936674" />
  <Command __id="717" _type="PauseCommand" date="Tue Mar 15 22:02:20 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1939552">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2878]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="719" _type="MoveCaretCommand" caretOffset="1750" date="Tue Mar 15 22:02:20 EDT 2022" docOffset="2278" starttimestamp="1647394201042" timestamp="1939817" />
  <Command __id="720" _type="MoveCaretCommand" caretOffset="363" date="Tue Mar 15 22:02:20 EDT 2022" docOffset="931" starttimestamp="1647394201042" timestamp="1939825" />
  <Command __id="722" _type="PauseCommand" date="Tue Mar 15 22:02:50 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="1969481">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[29656]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="723" _type="MoveCaretCommand" caretOffset="1750" date="Tue Mar 15 22:02:50 EDT 2022" docOffset="2278" starttimestamp="1647394201042" timestamp="1969811" />
  <Command __id="725" _type="PauseCommand" date="Tue Mar 15 22:02:54 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="1973117">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3306]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="726" _type="MoveCaretCommand" caretOffset="363" date="Tue Mar 15 22:02:54 EDT 2022" docOffset="931" starttimestamp="1647394201042" timestamp="1973184" />
  <Command __id="731" _type="PauseCommand" date="Tue Mar 15 22:03:56 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="2035386">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[39673]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="730" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:03:56 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2035386" type="Run" />
  <Command __id="732" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:03:56 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2035386" type="Run" />
  <Command __id="734" _type="PauseCommand" date="Tue Mar 15 22:03:59 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2038086">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2700]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="733" _type="ShellCommand" date="Tue Mar 15 22:03:59 EDT 2022" starttimestamp="1647394201042" timestamp="2038086" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="736" _type="PauseCommand" date="Tue Mar 15 22:04:00 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2039721">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1635]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="735" _type="ConsoleOutput" date="Tue Mar 15 22:04:00 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="2039721" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):24
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):2¶Test execution time (ms):2¶Test execution time (ms):1"), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"24"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="738" _type="PauseCommand" date="Tue Mar 15 22:04:02 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2040977">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1256]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="737" _type="ShellCommand" date="Tue Mar 15 22:04:02 EDT 2022" starttimestamp="1647394201042" timestamp="2040977" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="740" _type="PauseCommand" date="Tue Mar 15 22:04:18 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="2057930">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16953]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="739" _type="ConsoleOutput" date="Tue Mar 15 22:04:18 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="2057930" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):24"), Diff(INSERT,"Number of traces > 600  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="742" _type="PauseCommand" date="Tue Mar 15 22:04:24 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="2063344">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5414]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="743" _type="MoveCaretCommand" caretOffset="8408" date="Tue Mar 15 22:04:24 EDT 2022" docOffset="9179" starttimestamp="1647394201042" timestamp="2063612" />
  <Command __id="745" _type="PauseCommand" date="Tue Mar 15 22:04:29 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2067964">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4352]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="746" _type="MoveCaretCommand" caretOffset="2127" date="Tue Mar 15 22:04:29 EDT 2022" docOffset="2969" starttimestamp="1647394201042" timestamp="2068293" />
  <Command __id="748" _type="PauseCommand" date="Tue Mar 15 22:04:30 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2069767">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1474]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="747" _type="ConsoleOutput" date="Tue Mar 15 22:04:30 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="2069767" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]
(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]
(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]¶(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]¶(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="750" _type="PauseCommand" date="Tue Mar 15 22:04:31 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2070873">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1106]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="752" _type="MoveCaretCommand" caretOffset="8408" date="Tue Mar 15 22:04:32 EDT 2022" docOffset="9179" starttimestamp="1647394201042" timestamp="2071282" />
  <Command __id="753" _type="MoveCaretCommand" caretOffset="2127" date="Tue Mar 15 22:04:32 EDT 2022" docOffset="2969" starttimestamp="1647394201042" timestamp="2071285" />
  <Command __id="648" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:01:03 EDT 2022" docASTNodeCount="190" docActiveCodeLength="1300" docExpressionCount="134" docLength="1300" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1862227">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\ServerFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.client.Client;¶import comp533.controller.ControllerInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.controller.Controller;¶import comp533.view.View;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶public class ServerFacebookMapReduce {¶    private static Registry rmiRegistry;¶¶    public static void main(String[] args) {¶        try {¶            rmiRegistry = LocateRegistry.createRegistry(1092);¶            RemoteModel counter1 = new FacebookModel();¶            UnicastRemoteObject.exportObject(counter1, 0);¶            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);¶            ViewInterface view = new View();¶            ControllerInterface controller = new Controller(counter1, view);¶            controller.getUserInput(counter1);¶            System.exit(0);¶        	¶        	¶        } catch (RemoteException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶    ¶    ¶}¶")]]]></diff>
  </Command>
  <Command __id="650" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:01:03 EDT 2022" docASTNodeCount="192" docActiveCodeLength="1271" docExpressionCount="136" docLength="1271" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1862335">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\server\TokenCounterServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.server;¶¶import comp533.client.Client;¶import comp533.controller.ControllerInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.controller.Controller;¶import comp533.view.View;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶public class TokenCounterServer {¶    private static Registry rmiRegistry;¶¶    public static void main(String[] args) {¶        try {¶            rmiRegistry = LocateRegistry.createRegistry(1091);¶            RemoteModel counter1 = new TokenCounterModel();¶            UnicastRemoteObject.exportObject(counter1, 0);¶            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);¶            ViewInterface view = new View();¶            ControllerInterface controller = new Controller(counter1, view);¶            controller.getUserInput(counter1);¶            System.exit(0);¶        } catch (RemoteException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="653" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:01:27 EDT 2022" docASTNodeCount="190" docActiveCodeLength="1300" docExpressionCount="134" docLength="1300" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1886394">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\ServerFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.client.Client;¶import comp533.controller.ControllerInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.controller.Controller;¶import comp533.view.View;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶public class ServerFacebookMapReduce {¶    private static Registry rmiRegistry;¶¶    public static void main(String[] args) {¶        try {¶            rmiRegistry = LocateRegistry.createRegistry(1092);¶            RemoteModel counter1 = new FacebookModel();¶            UnicastRemoteObject.exportObject(counter1, 0);¶            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);¶            ViewInterface view = new View();¶            ControllerInterface controller = new Controller(counter1, view);¶            controller.getUserInput(counter1);¶            System.exit(0);¶        	¶        	¶        } catch (RemoteException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶    ¶    ¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="662" _type="Delete" date="Tue Mar 15 22:01:48 EDT 2022" docASTNodeCount="184" docActiveCodeLength="1269" docExpressionCount="129" docLength="1269" endLine="3" length="31" offset="21" repeat="2" startLine="2" starttimestamp="1647394201042" timestamp="1907349" timestamp2="1907353">
    <text><![CDATA[import comp533.client.Client;
]]></text>
  </DocumentChange>
  <Command __id="667" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:01:50 EDT 2022" docASTNodeCount="192" docActiveCodeLength="1271" docExpressionCount="136" docLength="1271" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1909759">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\server\TokenCounterServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.server;¶¶import comp533.client.Client;¶import comp533.controller.ControllerInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.controller.Controller;¶import comp533.view.View;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶public class TokenCounterServer {¶    private static Registry rmiRegistry;¶¶    public static void main(String[] args) {¶        try {¶            rmiRegistry = LocateRegistry.createRegistry(1091);¶            RemoteModel counter1 = new TokenCounterModel();¶            UnicastRemoteObject.exportObject(counter1, 0);¶            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);¶            ViewInterface view = new View();¶            ControllerInterface controller = new Controller(counter1, view);¶            controller.getUserInput(counter1);¶            System.exit(0);¶        } catch (RemoteException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="668" _type="Delete" date="Tue Mar 15 22:01:50 EDT 2022" docASTNodeCount="186" docActiveCodeLength="1240" docExpressionCount="131" docLength="1240" endLine="3" length="31" offset="27" repeat="2" startLine="2" starttimestamp="1647394201042" timestamp="1909774" timestamp2="1909778">
    <text><![CDATA[import comp533.client.Client;
]]></text>
  </DocumentChange>
  <Command __id="674" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:01:53 EDT 2022" docASTNodeCount="184" docActiveCodeLength="1269" docExpressionCount="129" docLength="1269" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1912146">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\ServerFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶"), Diff(DELETE,"import comp533.client.Client;¶"), Diff(EQUAL,"import comp533.controller.ControllerInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.controller.Controller;¶import comp533.view.View;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶public class ServerFacebookMapReduce {¶    private static Registry rmiRegistry;¶¶    public static void main(String[] args) {¶        try {¶            rmiRegistry = LocateRegistry.createRegistry(1092);¶            RemoteModel counter1 = new FacebookModel();¶            UnicastRemoteObject.exportObject(counter1, 0);¶            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);¶            ViewInterface view = new View();¶            ControllerInterface controller = new Controller(counter1, view);¶            controller.getUserInput(counter1);¶            System.exit(0);¶        	¶        	¶        } catch (RemoteException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶    ¶    ¶}¶")]]]></diff>
    <snapshot><![CDATA[package facebook;

import comp533.controller.ControllerInterface;
import comp533.main.TokenCounterModel;
import comp533.main.RemoteModel;
import comp533.controller.Controller;
import comp533.view.View;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

public class ServerFacebookMapReduce {
    private static Registry rmiRegistry;

    public static void main(String[] args) {
        try {
            rmiRegistry = LocateRegistry.createRegistry(1092);
            RemoteModel counter1 = new FacebookModel();
            UnicastRemoteObject.exportObject(counter1, 0);
            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);
            ViewInterface view = new View();
            ControllerInterface controller = new Controller(counter1, view);
            controller.getUserInput(counter1);
            System.exit(0);
        	
        	
        } catch (RemoteException ex) {
            Tracer.error(ex.getMessage());
        }
    }
    
    
}
]]></snapshot>
  </Command>
  <DocumentChange __id="675" _type="Delete" date="Tue Mar 15 22:01:53 EDT 2022" docASTNodeCount="178" docActiveCodeLength="1229" docExpressionCount="124" docLength="1229" endLine="4" length="40" offset="69" repeat="2" startLine="3" starttimestamp="1647394201042" timestamp="1912162" timestamp2="1912163">
    <text><![CDATA[import comp533.main.TokenCounterModel;
]]></text>
  </DocumentChange>
  <DocumentChange __id="681" _type="Delete" date="Tue Mar 15 22:01:55 EDT 2022" docASTNodeCount="170" docActiveCodeLength="1167" docExpressionCount="117" docLength="1167" endLine="8" length="62" offset="205" repeat="2" startLine="7" starttimestamp="1647394201042" timestamp="1914588" timestamp2="1914589">
    <text><![CDATA[import gradingTools.comp533s19.assignment0.AMapReduceTracer;
]]></text>
  </DocumentChange>
  <DocumentChange __id="686" _type="Delete" date="Tue Mar 15 22:01:57 EDT 2022" docASTNodeCount="164" docActiveCodeLength="1131" docExpressionCount="112" docLength="1131" endLine="10" length="36" offset="234" repeat="2" startLine="9" starttimestamp="1647394201042" timestamp="1916886" timestamp2="1916887">
    <text><![CDATA[import java.rmi.NotBoundException;
]]></text>
  </DocumentChange>
  <Command __id="691" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:02:00 EDT 2022" docASTNodeCount="186" docActiveCodeLength="1240" docExpressionCount="131" docLength="1240" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1919137">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\server\TokenCounterServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.server;¶¶"), Diff(DELETE,"import comp533.client.Client;¶"), Diff(EQUAL,"import comp533.controller.ControllerInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.controller.Controller;¶import comp533.view.View;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶public class TokenCounterServer {¶    private static Registry rmiRegistry;¶¶    public static void main(String[] args) {¶        try {¶            rmiRegistry = LocateRegistry.createRegistry(1091);¶            RemoteModel counter1 = new TokenCounterModel();¶            UnicastRemoteObject.exportObject(counter1, 0);¶            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);¶            ViewInterface view = new View();¶            ControllerInterface controller = new Controller(counter1, view);¶            controller.getUserInput(counter1);¶            System.exit(0);¶        } catch (RemoteException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package comp533.server;

import comp533.controller.ControllerInterface;
import comp533.main.TokenCounterModel;
import comp533.main.RemoteModel;
import comp533.controller.Controller;
import comp533.view.View;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

public class TokenCounterServer {
    private static Registry rmiRegistry;

    public static void main(String[] args) {
        try {
            rmiRegistry = LocateRegistry.createRegistry(1091);
            RemoteModel counter1 = new TokenCounterModel();
            UnicastRemoteObject.exportObject(counter1, 0);
            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);
            ViewInterface view = new View();
            ControllerInterface controller = new Controller(counter1, view);
            controller.getUserInput(counter1);
            System.exit(0);
        } catch (RemoteException ex) {
            Tracer.error(ex.getMessage());
        }
    }
}
]]></snapshot>
  </Command>
  <DocumentChange __id="692" _type="Delete" date="Tue Mar 15 22:02:00 EDT 2022" docASTNodeCount="178" docActiveCodeLength="1178" docExpressionCount="124" docLength="1178" endLine="9" length="62" offset="251" repeat="2" startLine="8" starttimestamp="1647394201042" timestamp="1919151" timestamp2="1919152">
    <text><![CDATA[import gradingTools.comp533s19.assignment0.AMapReduceTracer;
]]></text>
  </DocumentChange>
  <DocumentChange __id="698" _type="Delete" date="Tue Mar 15 22:02:01 EDT 2022" docASTNodeCount="172" docActiveCodeLength="1142" docExpressionCount="119" docLength="1142" endLine="11" length="36" offset="280" repeat="2" startLine="10" starttimestamp="1647394201042" timestamp="1920777" timestamp2="1920777">
    <text><![CDATA[import java.rmi.NotBoundException;
]]></text>
  </DocumentChange>
  <Command __id="704" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:02:03 EDT 2022" docASTNodeCount="164" docActiveCodeLength="1131" docExpressionCount="112" docLength="1131" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1922809">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\ServerFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.controller.ControllerInterface;¶"), Diff(DELETE,"import comp533.main.TokenCounterModel;¶"), Diff(EQUAL,"import comp533.main.RemoteModel;¶import comp533.controller.Controller;¶import comp533.view.View;¶import comp533.view.ViewInterface;¶import "), Diff(DELETE,"gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.NotBoundException;"), Diff(INSERT,"util.trace.Tracer;¶"), Diff(EQUAL,"¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶public class ServerFacebookMapReduce {¶    private static Registry rmiRegistry;¶¶    public static void main(String[] args) {¶        try {¶            rmiRegistry = LocateRegistry.createRegistry(1092);¶            RemoteModel counter1 = new FacebookModel();¶            UnicastRemoteObject.exportObject(counter1, 0);¶            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);¶            ViewInterface view = new View();¶            ControllerInterface controller = new Controller(counter1, view);¶            controller.getUserInput(counter1);¶            System.exit(0);¶        	¶        	¶        } catch (RemoteException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶    ¶    ¶}¶")]]]></diff>
    <snapshot><![CDATA[package facebook;

import comp533.controller.ControllerInterface;
import comp533.main.RemoteModel;
import comp533.controller.Controller;
import comp533.view.View;
import comp533.view.ViewInterface;
import util.trace.Tracer;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

public class ServerFacebookMapReduce {
    private static Registry rmiRegistry;

    public static void main(String[] args) {
        try {
            rmiRegistry = LocateRegistry.createRegistry(1092);
            RemoteModel counter1 = new FacebookModel();
            UnicastRemoteObject.exportObject(counter1, 0);
            rmiRegistry.rebind(RemoteModel.class.getName(), counter1);
            ViewInterface view = new View();
            ControllerInterface controller = new Controller(counter1, view);
            controller.getUserInput(counter1);
            System.exit(0);
        	
        	
        } catch (RemoteException ex) {
            Tracer.error(ex.getMessage());
        }
    }
    
    
}
]]></snapshot>
  </Command>
  <Command __id="710" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:02:12 EDT 2022" docASTNodeCount="329" docActiveCodeLength="2406" docExpressionCount="226" docLength="2421" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1931422">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\client\Client.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.client;¶¶¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.main.ModelInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.List;¶import java.util.Map;¶¶public class Client extends AMapReduceTracer implements ClientInterface {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶¶	public static void main(String[] args) {¶        try {¶            Registry rmiRegistry = LocateRegistry.getRegistry(109"), Diff(DELETE,"9"), Diff(INSERT,"1"), Diff(EQUAL,");¶            Client remoteClient = new Client();¶            UnicastRemoteObject.exportObject(remoteClient, 0);¶            rmiRegistry.rebind(Client.class.getName(), remoteClient);¶            ¶            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());¶            counter1.registerClient(remoteClient);¶            ¶            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");¶            System.out.println(counter1.toString());¶            System.out.println(remoteClient.toString());¶            System.out.println("?????????????????????????????????");¶            ¶            remoteClient.synchronizedWait();¶            AMapReduceTracer.traceExit(ModelInterface.class);¶            System.exit(0);¶        } catch (RemoteException | NotBoundException | InterruptedException ex) {¶            ex.printStackTrace();¶        }¶    }¶¶	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs) throws RemoteException {¶    	this.trace("lalallaallalallaalallaalala");¶        this.traceRemoteList(serializableKeyValuePairs);¶        this.trace("bababababababbabababababababba");¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        Map<String, Integer> result = reducer.reduce(serializableKeyValuePairs);¶        this.traceRemoteResult(result);¶        return result;¶    }¶¶    public void quit() {¶        this.traceQuit();¶        this.synchronizedNotify();¶    }¶¶	¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package comp533.client;


import comp533.reducer.ReducerInterface;
import comp533.reducer.ReducerFactory;
import comp533.keyValue.KeyValueInterface;
import comp533.main.TokenCounterModel;
import comp533.main.RemoteModel;
import comp533.main.ModelInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;


import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;
import java.util.Map;

public class Client extends AMapReduceTracer implements ClientInterface {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public static void main(String[] args) {
        try {
            Registry rmiRegistry = LocateRegistry.getRegistry(1091);
            Client remoteClient = new Client();
            UnicastRemoteObject.exportObject(remoteClient, 0);
            rmiRegistry.rebind(Client.class.getName(), remoteClient);
            
            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());
            counter1.registerClient(remoteClient);
            
            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
            System.out.println(counter1.toString());
            System.out.println(remoteClient.toString());
            System.out.println("?????????????????????????????????");
            
            remoteClient.synchronizedWait();
            AMapReduceTracer.traceExit(ModelInterface.class);
            System.exit(0);
        } catch (RemoteException | NotBoundException | InterruptedException ex) {
            ex.printStackTrace();
        }
    }

	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs) throws RemoteException {
    	this.trace("lalallaallalallaalallaalala");
        this.traceRemoteList(serializableKeyValuePairs);
        this.trace("bababababababbabababababababba");
        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();
        Map<String, Integer> result = reducer.reduce(serializableKeyValuePairs);
        this.traceRemoteResult(result);
        return result;
    }

    public void quit() {
        this.traceQuit();
        this.synchronizedNotify();
    }

	


}
]]></snapshot>
  </Command>
  <Command __id="713" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:02:17 EDT 2022" docASTNodeCount="380" docActiveCodeLength="2868" docExpressionCount="254" docLength="2917" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1936322">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\RemoteClientFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import comp533.client.ClientInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.main.ModelInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.List;¶import java.util.Map;¶¶public class RemoteClientFacebookMapReduce extends AMapReduceTracer implements ClientInterface {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶¶	public static void main(String[] args) {¶        try {¶            Registry rmiRegistry = LocateRegistry.getRegistry(109"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,");¶            RemoteClientFacebookMapReduce remoteClient = new RemoteClientFacebookMapReduce();¶            UnicastRemoteObject.exportObject(remoteClient, 0);¶            rmiRegistry.rebind(RemoteClientFacebookMapReduce.class.getName(), remoteClient);¶            ¶            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());¶            counter1.registerClient(remoteClient);¶            ¶            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");¶            System.out.println(counter1.toString());¶            System.out.println(remoteClient.toString());¶            System.out.println("?????????????????????????????????");¶            ¶            remoteClient.synchronizedWait();¶            AMapReduceTracer.traceExit(ModelInterface.class);¶            System.exit(0);¶        } catch (RemoteException | NotBoundException | InterruptedException ex) {¶            ex.printStackTrace();¶        }¶    }¶¶	public Map<String, List<String>> reduceNew(List<KeyValueInterface<String, List<String>>> keyValuePairs) throws RemoteException {¶    	this.trace("clientreducenew5555555555555555555555555555");¶        this.traceRemoteList(keyValuePairs);¶        this.trace("clientreducenew66666666666666666666666666");¶        FacebookReducer reducer = new FacebookReducer();¶        Map<String, List<String>> result = reducer.reduce(keyValuePairs);¶        this.traceRemoteResult(result);¶        return result;¶    }¶¶    public void quit() {¶        this.traceQuit();¶        this.synchronizedNotify();¶    }¶¶	@Override¶	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs)¶			throws RemoteException {¶		// TODO Auto-generated method stub¶		this.trace("clientreducenew5555555555555555555555555555");¶        this.traceRemoteList(serializableKeyValuePairs);¶        this.trace("clientreducenew66666666666666666666666666");¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package facebook;


import comp533.reducer.ReducerInterface;
import comp533.reducer.ReducerFactory;
import comp533.client.ClientInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.main.TokenCounterModel;
import comp533.main.RemoteModel;
import comp533.main.ModelInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;


import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;
import java.util.Map;

public class RemoteClientFacebookMapReduce extends AMapReduceTracer implements ClientInterface {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public static void main(String[] args) {
        try {
            Registry rmiRegistry = LocateRegistry.getRegistry(1092);
            RemoteClientFacebookMapReduce remoteClient = new RemoteClientFacebookMapReduce();
            UnicastRemoteObject.exportObject(remoteClient, 0);
            rmiRegistry.rebind(RemoteClientFacebookMapReduce.class.getName(), remoteClient);
            
            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());
            counter1.registerClient(remoteClient);
            
            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
            System.out.println(counter1.toString());
            System.out.println(remoteClient.toString());
            System.out.println("?????????????????????????????????");
            
            remoteClient.synchronizedWait();
            AMapReduceTracer.traceExit(ModelInterface.class);
            System.exit(0);
        } catch (RemoteException | NotBoundException | InterruptedException ex) {
            ex.printStackTrace();
        }
    }

	public Map<String, List<String>> reduceNew(List<KeyValueInterface<String, List<String>>> keyValuePairs) throws RemoteException {
    	this.trace("clientreducenew5555555555555555555555555555");
        this.traceRemoteList(keyValuePairs);
        this.trace("clientreducenew66666666666666666666666666");
        FacebookReducer reducer = new FacebookReducer();
        Map<String, List<String>> result = reducer.reduce(keyValuePairs);
        this.traceRemoteResult(result);
        return result;
    }

    public void quit() {
        this.traceQuit();
        this.synchronizedNotify();
    }

	@Override
	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs)
			throws RemoteException {
		// TODO Auto-generated method stub
		this.trace("clientreducenew5555555555555555555555555555");
        this.traceRemoteList(serializableKeyValuePairs);
        this.trace("clientreducenew66666666666666666666666666");
		return null;
	}

}
]]></snapshot>
  </Command>
  <Command __id="716" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:02:20 EDT 2022" docASTNodeCount="329" docActiveCodeLength="2406" docExpressionCount="226" docLength="2421" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1939552">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\client\Client.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.client;¶¶¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.main.ModelInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.List;¶import java.util.Map;¶¶public class Client extends AMapReduceTracer implements ClientInterface {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶¶	public static void main(String[] args) {¶        try {¶            Registry rmiRegistry = LocateRegistry.getRegistry(1091);¶            Client remoteClient = new Client();¶            UnicastRemoteObject.exportObject(remoteClient, 0);¶            rmiRegistry.rebind(Client.class.getName(), remoteClient);¶            ¶            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());¶            counter1.registerClient(remoteClient);¶            ¶            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");¶            System.out.println(counter1.toString());¶            System.out.println(remoteClient.toString());¶            System.out.println("?????????????????????????????????");¶            ¶            remoteClient.synchronizedWait();¶            AMapReduceTracer.traceExit(ModelInterface.class);¶            System.exit(0);¶        } catch (RemoteException | NotBoundException | InterruptedException ex) {¶            ex.printStackTrace();¶        }¶    }¶¶	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs) throws RemoteException {¶    	this.trace("lalallaallalallaalallaalala");¶        this.traceRemoteList(serializableKeyValuePairs);¶        this.trace("bababababababbabababababababba");¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        Map<String, Integer> result = reducer.reduce(serializableKeyValuePairs);¶        this.traceRemoteResult(result);¶        return result;¶    }¶¶    public void quit() {¶        this.traceQuit();¶        this.synchronizedNotify();¶    }¶¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="718" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:02:20 EDT 2022" docASTNodeCount="380" docActiveCodeLength="2868" docExpressionCount="254" docLength="2917" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1939626">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\RemoteClientFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import comp533.client.ClientInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.main.ModelInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.List;¶import java.util.Map;¶¶public class RemoteClientFacebookMapReduce extends AMapReduceTracer implements ClientInterface {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶¶	public static void main(String[] args) {¶        try {¶            Registry rmiRegistry = LocateRegistry.getRegistry(1092);¶            RemoteClientFacebookMapReduce remoteClient = new RemoteClientFacebookMapReduce();¶            UnicastRemoteObject.exportObject(remoteClient, 0);¶            rmiRegistry.rebind(RemoteClientFacebookMapReduce.class.getName(), remoteClient);¶            ¶            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());¶            counter1.registerClient(remoteClient);¶            ¶            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");¶            System.out.println(counter1.toString());¶            System.out.println(remoteClient.toString());¶            System.out.println("?????????????????????????????????");¶            ¶            remoteClient.synchronizedWait();¶            AMapReduceTracer.traceExit(ModelInterface.class);¶            System.exit(0);¶        } catch (RemoteException | NotBoundException | InterruptedException ex) {¶            ex.printStackTrace();¶        }¶    }¶¶	public Map<String, List<String>> reduceNew(List<KeyValueInterface<String, List<String>>> keyValuePairs) throws RemoteException {¶    	this.trace("clientreducenew5555555555555555555555555555");¶        this.traceRemoteList(keyValuePairs);¶        this.trace("clientreducenew66666666666666666666666666");¶        FacebookReducer reducer = new FacebookReducer();¶        Map<String, List<String>> result = reducer.reduce(keyValuePairs);¶        this.traceRemoteResult(result);¶        return result;¶    }¶¶    public void quit() {¶        this.traceQuit();¶        this.synchronizedNotify();¶    }¶¶	@Override¶	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs)¶			throws RemoteException {¶		// TODO Auto-generated method stub¶		this.trace("clientreducenew5555555555555555555555555555");¶        this.traceRemoteList(serializableKeyValuePairs);¶        this.trace("clientreducenew66666666666666666666666666");¶		return null;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="721" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:02:50 EDT 2022" docASTNodeCount="329" docActiveCodeLength="2406" docExpressionCount="226" docLength="2421" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1969481">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\client\Client.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.client;¶¶¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.main.ModelInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.List;¶import java.util.Map;¶¶public class Client extends AMapReduceTracer implements ClientInterface {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶¶	public static void main(String[] args) {¶        try {¶            Registry rmiRegistry = LocateRegistry.getRegistry(1091);¶            Client remoteClient = new Client();¶            UnicastRemoteObject.exportObject(remoteClient, 0);¶            rmiRegistry.rebind(Client.class.getName(), remoteClient);¶            ¶            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());¶            counter1.registerClient(remoteClient);¶            ¶            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");¶            System.out.println(counter1.toString());¶            System.out.println(remoteClient.toString());¶            System.out.println("?????????????????????????????????");¶            ¶            remoteClient.synchronizedWait();¶            AMapReduceTracer.traceExit(ModelInterface.class);¶            System.exit(0);¶        } catch (RemoteException | NotBoundException | InterruptedException ex) {¶            ex.printStackTrace();¶        }¶    }¶¶	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs) throws RemoteException {¶    	this.trace("lalallaallalallaalallaalala");¶        this.traceRemoteList(serializableKeyValuePairs);¶        this.trace("bababababababbabababababababba");¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        Map<String, Integer> result = reducer.reduce(serializableKeyValuePairs);¶        this.traceRemoteResult(result);¶        return result;¶    }¶¶    public void quit() {¶        this.traceQuit();¶        this.synchronizedNotify();¶    }¶¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="724" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:02:54 EDT 2022" docASTNodeCount="380" docActiveCodeLength="2868" docExpressionCount="254" docLength="2917" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="1973117">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\RemoteClientFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import comp533.client.ClientInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.main.ModelInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.List;¶import java.util.Map;¶¶public class RemoteClientFacebookMapReduce extends AMapReduceTracer implements ClientInterface {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶¶	public static void main(String[] args) {¶        try {¶            Registry rmiRegistry = LocateRegistry.getRegistry(1092);¶            RemoteClientFacebookMapReduce remoteClient = new RemoteClientFacebookMapReduce();¶            UnicastRemoteObject.exportObject(remoteClient, 0);¶            rmiRegistry.rebind(RemoteClientFacebookMapReduce.class.getName(), remoteClient);¶            ¶            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());¶            counter1.registerClient(remoteClient);¶            ¶            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");¶            System.out.println(counter1.toString());¶            System.out.println(remoteClient.toString());¶            System.out.println("?????????????????????????????????");¶            ¶            remoteClient.synchronizedWait();¶            AMapReduceTracer.traceExit(ModelInterface.class);¶            System.exit(0);¶        } catch (RemoteException | NotBoundException | InterruptedException ex) {¶            ex.printStackTrace();¶        }¶    }¶¶	public Map<String, List<String>> reduceNew(List<KeyValueInterface<String, List<String>>> keyValuePairs) throws RemoteException {¶    	this.trace("clientreducenew5555555555555555555555555555");¶        this.traceRemoteList(keyValuePairs);¶        this.trace("clientreducenew66666666666666666666666666");¶        FacebookReducer reducer = new FacebookReducer();¶        Map<String, List<String>> result = reducer.reduce(keyValuePairs);¶        this.traceRemoteResult(result);¶        return result;¶    }¶¶    public void quit() {¶        this.traceQuit();¶        this.synchronizedNotify();¶    }¶¶	@Override¶	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs)¶			throws RemoteException {¶		// TODO Auto-generated method stub¶		this.trace("clientreducenew5555555555555555555555555555");¶        this.traceRemoteList(serializableKeyValuePairs);¶        this.trace("clientreducenew66666666666666666666666666");¶		return null;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="741" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:04:24 EDT 2022" docASTNodeCount="1425" docActiveCodeLength="10176" docExpressionCount="885" docLength="10176" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2063344">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\TokenCounterModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.main;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, Integer> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<SlaveInterface> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<SlaveInterface> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public TokenCounterModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶            System.out.println(unassignedSlaves.capacity());¶            System.out.println(unassignedClients.capacity());¶            System.out.println("################################");¶            for (int i = 0; i < 2; i++) {¶            	¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        MapperInterface<String, Integer> mapper = new Mapper();¶        for (String token: tokens) {¶            KeyValueInterface<String, Integer> keyValue = mapper.map(token);¶            this.produceBoundedBuffer(keyValue);¶        }¶        this.endEnqueue();¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, Integer> oldResult = this.result;¶        this.result = new HashMap<>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final Integer value = keyValues.getValue();¶                if (result.containsKey(key)) {¶                	final int oldValue = result.get(key);¶                	final int newValue = oldValue+value;¶                	this.result.put(key, newValue);¶                } else {¶                	this.result.put(key, value);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, Integer> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            Slave slave = new Slave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof TokenCounterModel)) {¶            return false;¶        }¶        TokenCounterModel otherCounter = (TokenCounterModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="744" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:04:29 EDT 2022" docASTNodeCount="1625" docActiveCodeLength="11192" docExpressionCount="988" docLength="11207" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2067964">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.RemoteModel;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.main.ModelInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, List<String>> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<FacebookSlave> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<FacebookSlave> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public FacebookModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶            ¶            for (int i = 0; i < 2; i++) {¶            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶                System.out.println(unassignedSlaves);¶                System.out.println(unassignedClients);¶                System.out.println("################################");¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        FacebookMapper mapper = new FacebookMapper();¶        for (String token: tokens) {¶        	String[] all = token.split(",");¶        	String user = all[0];¶        	String[] friends = Arrays.copyOfRange(all, 1, all.length);¶        	Arrays.sort(friends);¶        	KeyValueInterface<String, List<String>> keyValue;¶        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");¶        	this.traceRemoteList(friends);¶        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");¶        	for (String friend: friends) {¶        		keyValue = mapper.map(token, user, friend, friends);¶        		this.produceBoundedBuffer(keyValue);¶     ¶            }¶            ¶        }¶        this.endEnqueue();¶        ¶¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, List<String>> oldResult = this.result;¶        this.result = new HashMap<String, List<String>>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final List<String> value = keyValues.getValue();¶                if (result.get(key) == null) {¶                	result.put(key, value);¶                } else {¶                    final List<String> current = result.get(key);¶                    ¶    				final List<String> newValue = intersection(current, value);¶    				result.put(key, newValue);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    public static <T> List<T> intersection(List<T> list1, List<T> list2) {¶        List<T> list = new ArrayList<T>();¶¶        for (T t : list1) {¶            if(list2.contains(t)) {¶                list.add(t);¶            }¶        }¶¶        return list;¶    }¶    ¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, List<String>> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            FacebookSlave slave = new FacebookSlave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof FacebookModel)) {¶            return false;¶        }¶        FacebookModel otherCounter = (FacebookModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="749" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:04:31 EDT 2022" docASTNodeCount="1425" docActiveCodeLength="10176" docExpressionCount="885" docLength="10176" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2070873">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\TokenCounterModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.main;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, Integer> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<SlaveInterface> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<SlaveInterface> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public TokenCounterModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶            System.out.println(unassignedSlaves.capacity());¶            System.out.println(unassignedClients.capacity());¶            System.out.println("################################");¶            for (int i = 0; i < 2; i++) {¶            	¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        MapperInterface<String, Integer> mapper = new Mapper();¶        for (String token: tokens) {¶            KeyValueInterface<String, Integer> keyValue = mapper.map(token);¶            this.produceBoundedBuffer(keyValue);¶        }¶        this.endEnqueue();¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, Integer> oldResult = this.result;¶        this.result = new HashMap<>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final Integer value = keyValues.getValue();¶                if (result.containsKey(key)) {¶                	final int oldValue = result.get(key);¶                	final int newValue = oldValue+value;¶                	this.result.put(key, newValue);¶                } else {¶                	this.result.put(key, value);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, Integer> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            Slave slave = new Slave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof TokenCounterModel)) {¶            return false;¶        }¶        TokenCounterModel otherCounter = (TokenCounterModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="751" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:04:31 EDT 2022" docASTNodeCount="1625" docActiveCodeLength="11192" docExpressionCount="988" docLength="11207" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2070931">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.RemoteModel;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.main.ModelInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, List<String>> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<FacebookSlave> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<FacebookSlave> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public FacebookModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶            ¶            for (int i = 0; i < 2; i++) {¶            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶                System.out.println(unassignedSlaves);¶                System.out.println(unassignedClients);¶                System.out.println("################################");¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        FacebookMapper mapper = new FacebookMapper();¶        for (String token: tokens) {¶        	String[] all = token.split(",");¶        	String user = all[0];¶        	String[] friends = Arrays.copyOfRange(all, 1, all.length);¶        	Arrays.sort(friends);¶        	KeyValueInterface<String, List<String>> keyValue;¶        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");¶        	this.traceRemoteList(friends);¶        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");¶        	for (String friend: friends) {¶        		keyValue = mapper.map(token, user, friend, friends);¶        		this.produceBoundedBuffer(keyValue);¶     ¶            }¶            ¶        }¶        this.endEnqueue();¶        ¶¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, List<String>> oldResult = this.result;¶        this.result = new HashMap<String, List<String>>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final List<String> value = keyValues.getValue();¶                if (result.get(key) == null) {¶                	result.put(key, value);¶                } else {¶                    final List<String> current = result.get(key);¶                    ¶    				final List<String> newValue = intersection(current, value);¶    				result.put(key, newValue);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    public static <T> List<T> intersection(List<T> list1, List<T> list2) {¶        List<T> list = new ArrayList<T>();¶¶        for (T t : list1) {¶            if(list2.contains(t)) {¶                list.add(t);¶            }¶        }¶¶        return list;¶    }¶    ¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, List<String>> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            FacebookSlave slave = new FacebookSlave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof FacebookModel)) {¶            return false;¶        }¶        FacebookModel otherCounter = (FacebookModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="755" _type="PauseCommand" date="Tue Mar 15 22:04:35 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2074271">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2986]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="757" _type="SelectTextCommand" caretOffset="1164" date="Tue Mar 15 22:04:35 EDT 2022" end="1164" start="1150" starttimestamp="1647394201042" timestamp="2074674" />
  <Command __id="758" _type="MoveCaretCommand" caretOffset="2127" date="Tue Mar 15 22:04:35 EDT 2022" docOffset="2969" starttimestamp="1647394201042" timestamp="2074678" />
  <Command __id="760" _type="PauseCommand" date="Tue Mar 15 22:04:39 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2078551">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3873]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="761" _type="MoveCaretCommand" caretOffset="8408" date="Tue Mar 15 22:04:40 EDT 2022" docOffset="9179" starttimestamp="1647394201042" timestamp="2078988" />
  <Command __id="763" _type="PauseCommand" date="Tue Mar 15 22:04:41 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2080162">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1174]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="762" _type="ShellCommand" date="Tue Mar 15 22:04:41 EDT 2022" starttimestamp="1647394201042" timestamp="2080162" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="764" _type="ShellCommand" date="Tue Mar 15 22:04:41 EDT 2022" starttimestamp="1647394201042" timestamp="2080698" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="766" _type="PauseCommand" date="Tue Mar 15 22:04:46 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="2085952">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5254]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="767" _type="MoveCaretCommand" caretOffset="330" date="Tue Mar 15 22:04:47 EDT 2022" docOffset="1172" starttimestamp="1647394201042" timestamp="2086040" />
  <Command __id="769" _type="PauseCommand" date="Tue Mar 15 22:04:48 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2087257">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1217]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="768" _type="MoveCaretCommand" caretOffset="378" date="Tue Mar 15 22:04:48 EDT 2022" docOffset="1220" starttimestamp="1647394201042" timestamp="2087257" />
  <Command __id="771" _type="PauseCommand" date="Tue Mar 15 22:04:49 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2088415">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1158]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="770" _type="MoveCaretCommand" caretOffset="408" date="Tue Mar 15 22:04:49 EDT 2022" docOffset="1250" starttimestamp="1647394201042" timestamp="2088415" />
  <Command __id="773" _type="PauseCommand" date="Tue Mar 15 22:04:51 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2090365">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1950]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="772" _type="ConsoleOutput" date="Tue Mar 15 22:04:51 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="2090365" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):50580
Number of traces > 600  turning tracing off
Number of traces > 600  turning tracing off
Test execution time (ms):4
Number of traces > 600  turning tracing off
Number of traces > 600  turning tracing off
DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0











































]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]¶(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), g"), Diff(INSERT,"Test execution time (ms):50580¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶Test execution time (ms):4¶Number of traces > 600  turning t"), Diff(EQUAL,"ra"), Diff(DELETE,"d"), Diff(INSERT,"c"), Diff(EQUAL,"ing"), Diff(DELETE,"Tools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]¶(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:118), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(INSERT," off¶Number of traces > 600  turning tracing off¶DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="774" _type="MoveCaretCommand" caretOffset="443" date="Tue Mar 15 22:04:51 EDT 2022" docOffset="1285" starttimestamp="1647394201042" timestamp="2090621" />
  <Command __id="776" _type="PauseCommand" date="Tue Mar 15 22:04:55 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2094219">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3598]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="775" _type="MoveCaretCommand" caretOffset="484" date="Tue Mar 15 22:04:55 EDT 2022" docOffset="1326" starttimestamp="1647394201042" timestamp="2094219" />
  <Command __id="778" _type="PauseCommand" date="Tue Mar 15 22:04:58 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2097200">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2981]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="777" _type="MoveCaretCommand" caretOffset="517" date="Tue Mar 15 22:04:58 EDT 2022" docOffset="1359" starttimestamp="1647394201042" timestamp="2097200" />
  <Command __id="780" _type="PauseCommand" date="Tue Mar 15 22:05:09 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="2108101">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10900]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="781" _type="MoveCaretCommand" caretOffset="8408" date="Tue Mar 15 22:05:09 EDT 2022" docOffset="9179" starttimestamp="1647394201042" timestamp="2108163" />
  <Command __id="783" _type="PauseCommand" date="Tue Mar 15 22:06:11 EDT 2022" range="1m-2m" starttimestamp="1647394201042" timestamp="2170469">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[62306]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="784" _type="MoveCaretCommand" caretOffset="517" date="Tue Mar 15 22:06:11 EDT 2022" docOffset="1359" starttimestamp="1647394201042" timestamp="2170533" />
  <Command __id="786" _type="PauseCommand" date="Tue Mar 15 22:06:56 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="2215138">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[44604]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="785" _type="ShellCommand" date="Tue Mar 15 22:06:56 EDT 2022" starttimestamp="1647394201042" timestamp="2215137" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="788" _type="PauseCommand" date="Tue Mar 15 22:07:05 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="2223995">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8858]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="787" _type="ShellCommand" date="Tue Mar 15 22:07:05 EDT 2022" starttimestamp="1647394201042" timestamp="2223995" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="790" _type="MoveCaretCommand" caretOffset="8408" date="Tue Mar 15 22:07:05 EDT 2022" docOffset="9179" starttimestamp="1647394201042" timestamp="2224101" />
  <Command __id="792" _type="PauseCommand" date="Tue Mar 15 22:07:57 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="2276166">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[52064]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="793" _type="MoveCaretCommand" caretOffset="517" date="Tue Mar 15 22:07:57 EDT 2022" docOffset="1359" starttimestamp="1647394201042" timestamp="2276233" />
  <Command __id="802" _type="PauseCommand" date="Tue Mar 15 22:08:35 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2314674">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1053]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="801" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:08:35 EDT 2022" starttimestamp="1647394201042" timestamp="2314674" />
  <Command __id="803" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:08:35 EDT 2022" starttimestamp="1647394201042" timestamp="2314679" />
  <Command __id="805" _type="PauseCommand" date="Tue Mar 15 22:09:13 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="2352627">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[37948]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="804" _type="MoveCaretCommand" caretOffset="5724" date="Tue Mar 15 22:09:13 EDT 2022" docOffset="6566" starttimestamp="1647394201042" timestamp="2352627" />
  <Command __id="807" _type="PauseCommand" date="Tue Mar 15 22:09:15 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2354178">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1551]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="806" _type="MoveCaretCommand" caretOffset="5507" date="Tue Mar 15 22:09:15 EDT 2022" docOffset="6349" starttimestamp="1647394201042" timestamp="2354178" />
  <Command __id="809" _type="PauseCommand" date="Tue Mar 15 22:09:26 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="2365891">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11713]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="810" _type="MoveCaretCommand" caretOffset="4855" date="Tue Mar 15 22:09:26 EDT 2022" docOffset="5626" starttimestamp="1647394201042" timestamp="2365941" />
  <Command __id="811" _type="MoveCaretCommand" caretOffset="4855" date="Tue Mar 15 22:09:27 EDT 2022" docOffset="5626" starttimestamp="1647394201042" timestamp="2366016" />
  <Command __id="813" _type="InsertStringCommand" date="Tue Mar 15 22:09:27 EDT 2022" starttimestamp="1647394201042" timestamp="2366796" timestamp2="2366796">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="814" _type="InsertStringCommand" date="Tue Mar 15 22:09:27 EDT 2022" starttimestamp="1647394201042" timestamp="2366796" timestamp2="2366796">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="816" _type="InsertStringCommand" date="Tue Mar 15 22:09:27 EDT 2022" starttimestamp="1647394201042" timestamp="2366910" timestamp2="2366910">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="817" _type="InsertStringCommand" date="Tue Mar 15 22:09:27 EDT 2022" starttimestamp="1647394201042" timestamp="2366910" timestamp2="2366910">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="819" _type="InsertStringCommand" date="Tue Mar 15 22:09:28 EDT 2022" starttimestamp="1647394201042" timestamp="2367002" timestamp2="2367002">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="820" _type="InsertStringCommand" date="Tue Mar 15 22:09:28 EDT 2022" starttimestamp="1647394201042" timestamp="2367003" timestamp2="2367003">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="822" _type="InsertStringCommand" date="Tue Mar 15 22:09:28 EDT 2022" starttimestamp="1647394201042" timestamp="2367142" timestamp2="2367142">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="823" _type="InsertStringCommand" date="Tue Mar 15 22:09:28 EDT 2022" starttimestamp="1647394201042" timestamp="2367142" timestamp2="2367142">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="825" _type="InsertStringCommand" date="Tue Mar 15 22:09:28 EDT 2022" starttimestamp="1647394201042" timestamp="2367306" timestamp2="2367306">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="826" _type="InsertStringCommand" date="Tue Mar 15 22:09:28 EDT 2022" starttimestamp="1647394201042" timestamp="2367306" timestamp2="2367306">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="827" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 15 22:09:28 EDT 2022" start_end="START" starttimestamp="1647394201042" timestamp="2367823" />
  <Command __id="828" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 22:09:29 EDT 2022" starttimestamp="1647394201042" timestamp="2368598" />
  <Command __id="829" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:09:29 EDT 2022" starttimestamp="1647394201042" timestamp="2368685" />
  <Command __id="830" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:09:29 EDT 2022" starttimestamp="1647394201042" timestamp="2368723" />
  <Command __id="831" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 15 22:09:29 EDT 2022" start_end="END" starttimestamp="1647394201042" timestamp="2368744" />
  <Command __id="833" _type="MoveCaretCommand" caretOffset="5509" date="Tue Mar 15 22:09:30 EDT 2022" docOffset="6351" starttimestamp="1647394201042" timestamp="2369219" />
  <Command __id="834" _type="ShellCommand" date="Tue Mar 15 22:09:30 EDT 2022" starttimestamp="1647394201042" timestamp="2369381" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="836" _type="PauseCommand" date="Tue Mar 15 22:09:31 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2370920">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1539]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="835" _type="ShellCommand" date="Tue Mar 15 22:09:31 EDT 2022" starttimestamp="1647394201042" timestamp="2370920" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="838" _type="PauseCommand" date="Tue Mar 15 22:09:33 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2372223">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1303]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="837" _type="MoveCaretCommand" caretOffset="5462" date="Tue Mar 15 22:09:33 EDT 2022" docOffset="6304" starttimestamp="1647394201042" timestamp="2372223" />
  <Command __id="840" _type="InsertStringCommand" date="Tue Mar 15 22:09:33 EDT 2022" starttimestamp="1647394201042" timestamp="2372872" timestamp2="2372872">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="842" _type="InsertStringCommand" date="Tue Mar 15 22:09:34 EDT 2022" starttimestamp="1647394201042" timestamp="2373126" timestamp2="2373126">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="844" _type="InsertStringCommand" date="Tue Mar 15 22:09:34 EDT 2022" starttimestamp="1647394201042" timestamp="2373238" timestamp2="2373238">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="846" _type="InsertStringCommand" date="Tue Mar 15 22:09:34 EDT 2022" starttimestamp="1647394201042" timestamp="2373377" timestamp2="2373377">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="848" _type="InsertStringCommand" date="Tue Mar 15 22:09:34 EDT 2022" starttimestamp="1647394201042" timestamp="2373570" timestamp2="2373570">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="849" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 15 22:09:34 EDT 2022" start_end="START" starttimestamp="1647394201042" timestamp="2373573" />
  <Command __id="851" _type="PauseCommand" date="Tue Mar 15 22:09:35 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2374907">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1334]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="850" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 15 22:09:35 EDT 2022" start_end="END" starttimestamp="1647394201042" timestamp="2374907" />
  <Command __id="852" _type="MoveCaretCommand" caretOffset="5463" date="Tue Mar 15 22:09:35 EDT 2022" docOffset="6305" starttimestamp="1647394201042" timestamp="2374940" />
  <Command __id="853" _type="MoveCaretCommand" caretOffset="5512" date="Tue Mar 15 22:09:36 EDT 2022" docOffset="6354" starttimestamp="1647394201042" timestamp="2375504" />
  <Command __id="855" _type="InsertStringCommand" date="Tue Mar 15 22:09:37 EDT 2022" starttimestamp="1647394201042" timestamp="2376066" timestamp2="2376066">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="857" _type="InsertStringCommand" date="Tue Mar 15 22:09:37 EDT 2022" starttimestamp="1647394201042" timestamp="2376285" timestamp2="2376285">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="859" _type="InsertStringCommand" date="Tue Mar 15 22:09:37 EDT 2022" starttimestamp="1647394201042" timestamp="2376346" timestamp2="2376346">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="861" _type="InsertStringCommand" date="Tue Mar 15 22:09:37 EDT 2022" starttimestamp="1647394201042" timestamp="2376445" timestamp2="2376445">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="863" _type="InsertStringCommand" date="Tue Mar 15 22:09:37 EDT 2022" starttimestamp="1647394201042" timestamp="2376606" timestamp2="2376606">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="864" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 15 22:09:37 EDT 2022" start_end="START" starttimestamp="1647394201042" timestamp="2376608" />
  <Command __id="865" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 15 22:09:38 EDT 2022" start_end="END" starttimestamp="1647394201042" timestamp="2377587" />
  <Command __id="866" _type="MoveCaretCommand" caretOffset="5170" date="Tue Mar 15 22:09:38 EDT 2022" docOffset="6012" starttimestamp="1647394201042" timestamp="2377623" />
  <Command __id="868" _type="PauseCommand" date="Tue Mar 15 22:09:44 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="2383859">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6236]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="867" _type="MoveCaretCommand" caretOffset="5616" date="Tue Mar 15 22:09:44 EDT 2022" docOffset="6458" starttimestamp="1647394201042" timestamp="2383859" />
  <Command __id="870" _type="PauseCommand" date="Tue Mar 15 22:09:46 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2384972">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1113]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="869" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 15 22:09:46 EDT 2022" starttimestamp="1647394201042" timestamp="2384972" />
  <Command __id="872" _type="InsertStringCommand" date="Tue Mar 15 22:09:46 EDT 2022" starttimestamp="1647394201042" timestamp="2385196" timestamp2="2385196">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="874" _type="InsertStringCommand" date="Tue Mar 15 22:09:46 EDT 2022" starttimestamp="1647394201042" timestamp="2385395" timestamp2="2385395">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="876" _type="InsertStringCommand" date="Tue Mar 15 22:09:46 EDT 2022" starttimestamp="1647394201042" timestamp="2385457" timestamp2="2385457">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="878" _type="InsertStringCommand" date="Tue Mar 15 22:09:46 EDT 2022" starttimestamp="1647394201042" timestamp="2385602" timestamp2="2385602">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="880" _type="InsertStringCommand" date="Tue Mar 15 22:09:46 EDT 2022" starttimestamp="1647394201042" timestamp="2385749" timestamp2="2385749">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="881" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 15 22:09:46 EDT 2022" start_end="START" starttimestamp="1647394201042" timestamp="2385752" />
  <Command __id="883" _type="PauseCommand" date="Tue Mar 15 22:09:47 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2386792">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1040]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="882" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 15 22:09:47 EDT 2022" start_end="END" starttimestamp="1647394201042" timestamp="2386792" />
  <Command __id="884" _type="MoveCaretCommand" caretOffset="5307" date="Tue Mar 15 22:09:47 EDT 2022" docOffset="6149" starttimestamp="1647394201042" timestamp="2386848" />
  <Command __id="886" _type="PauseCommand" date="Tue Mar 15 22:09:49 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2388013">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1165]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="885" _type="MoveCaretCommand" caretOffset="5740" date="Tue Mar 15 22:09:49 EDT 2022" docOffset="6582" starttimestamp="1647394201042" timestamp="2388013" />
  <Command __id="887" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 15 22:09:49 EDT 2022" starttimestamp="1647394201042" timestamp="2388887" />
  <Command __id="889" _type="InsertStringCommand" date="Tue Mar 15 22:09:50 EDT 2022" starttimestamp="1647394201042" timestamp="2389110" timestamp2="2389110">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="891" _type="InsertStringCommand" date="Tue Mar 15 22:09:50 EDT 2022" starttimestamp="1647394201042" timestamp="2389297" timestamp2="2389297">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="893" _type="InsertStringCommand" date="Tue Mar 15 22:09:50 EDT 2022" starttimestamp="1647394201042" timestamp="2389375" timestamp2="2389375">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="895" _type="InsertStringCommand" date="Tue Mar 15 22:09:50 EDT 2022" starttimestamp="1647394201042" timestamp="2389476" timestamp2="2389476">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="897" _type="InsertStringCommand" date="Tue Mar 15 22:09:50 EDT 2022" starttimestamp="1647394201042" timestamp="2389657" timestamp2="2389657">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="898" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 15 22:09:50 EDT 2022" start_end="START" starttimestamp="1647394201042" timestamp="2389660" />
  <Command __id="900" _type="PauseCommand" date="Tue Mar 15 22:09:51 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2390714">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1054]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="899" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 15 22:09:51 EDT 2022" start_end="END" starttimestamp="1647394201042" timestamp="2390714" />
  <Command __id="901" _type="MoveCaretCommand" caretOffset="5493" date="Tue Mar 15 22:09:51 EDT 2022" docOffset="6335" starttimestamp="1647394201042" timestamp="2390772" />
  <Command __id="902" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 22:09:52 EDT 2022" starttimestamp="1647394201042" timestamp="2391162" />
  <Command __id="903" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:09:52 EDT 2022" starttimestamp="1647394201042" timestamp="2391239" />
  <Command __id="904" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:09:52 EDT 2022" starttimestamp="1647394201042" timestamp="2391298" />
  <Command __id="906" _type="PauseCommand" date="Tue Mar 15 22:09:57 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="2396681">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5383]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="907" _type="MoveCaretCommand" caretOffset="5198" date="Tue Mar 15 22:09:57 EDT 2022" docOffset="5969" starttimestamp="1647394201042" timestamp="2396743" />
  <Command __id="908" _type="MoveCaretCommand" caretOffset="5198" date="Tue Mar 15 22:09:57 EDT 2022" docOffset="5969" starttimestamp="1647394201042" timestamp="2396788" />
  <Command __id="910" _type="PauseCommand" date="Tue Mar 15 22:09:59 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2398144">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1356]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="911" _type="InsertStringCommand" date="Tue Mar 15 22:09:59 EDT 2022" starttimestamp="1647394201042" timestamp="2398152" timestamp2="2398152">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="912" _type="InsertStringCommand" date="Tue Mar 15 22:09:59 EDT 2022" starttimestamp="1647394201042" timestamp="2398152" timestamp2="2398152">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="914" _type="InsertStringCommand" date="Tue Mar 15 22:09:59 EDT 2022" starttimestamp="1647394201042" timestamp="2398216" timestamp2="2398216">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="915" _type="InsertStringCommand" date="Tue Mar 15 22:09:59 EDT 2022" starttimestamp="1647394201042" timestamp="2398216" timestamp2="2398216">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="917" _type="InsertStringCommand" date="Tue Mar 15 22:09:59 EDT 2022" starttimestamp="1647394201042" timestamp="2398337" timestamp2="2398337">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="918" _type="InsertStringCommand" date="Tue Mar 15 22:09:59 EDT 2022" starttimestamp="1647394201042" timestamp="2398337" timestamp2="2398337">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="920" _type="InsertStringCommand" date="Tue Mar 15 22:09:59 EDT 2022" starttimestamp="1647394201042" timestamp="2398480" timestamp2="2398480">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="921" _type="InsertStringCommand" date="Tue Mar 15 22:09:59 EDT 2022" starttimestamp="1647394201042" timestamp="2398480" timestamp2="2398480">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="923" _type="InsertStringCommand" date="Tue Mar 15 22:10:00 EDT 2022" starttimestamp="1647394201042" timestamp="2399082" timestamp2="2399082">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="924" _type="InsertStringCommand" date="Tue Mar 15 22:10:00 EDT 2022" starttimestamp="1647394201042" timestamp="2399082" timestamp2="2399082">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="926" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:10:00 EDT 2022" starttimestamp="1647394201042" timestamp="2399689" />
  <Command __id="927" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:10:00 EDT 2022" starttimestamp="1647394201042" timestamp="2399689" />
  <Command __id="929" _type="InsertStringCommand" date="Tue Mar 15 22:10:01 EDT 2022" starttimestamp="1647394201042" timestamp="2399959" timestamp2="2399959">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="930" _type="InsertStringCommand" date="Tue Mar 15 22:10:01 EDT 2022" starttimestamp="1647394201042" timestamp="2399959" timestamp2="2399959">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="932" _type="PauseCommand" date="Tue Mar 15 22:10:02 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2401278">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1319]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="933" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:10:02 EDT 2022" starttimestamp="1647394201042" timestamp="2401285" />
  <Command __id="934" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:10:02 EDT 2022" starttimestamp="1647394201042" timestamp="2401285" />
  <Command __id="936" _type="InsertStringCommand" date="Tue Mar 15 22:10:02 EDT 2022" starttimestamp="1647394201042" timestamp="2401595" timestamp2="2401595">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="937" _type="InsertStringCommand" date="Tue Mar 15 22:10:02 EDT 2022" starttimestamp="1647394201042" timestamp="2401596" timestamp2="2401596">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="938" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 15 22:10:02 EDT 2022" start_end="START" starttimestamp="1647394201042" timestamp="2401598" />
  <Command __id="940" _type="PauseCommand" date="Tue Mar 15 22:10:03 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2402719">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1121]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="941" _type="MoveCaretCommand" caretOffset="5804" date="Tue Mar 15 22:10:04 EDT 2022" docOffset="6646" starttimestamp="1647394201042" timestamp="2402959" />
  <Command __id="942" _type="MoveCaretCommand" caretOffset="5848" date="Tue Mar 15 22:10:04 EDT 2022" docOffset="6690" starttimestamp="1647394201042" timestamp="2403563" />
  <Command __id="948" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 15 22:10:05 EDT 2022" start_end="START" starttimestamp="1647394201042" timestamp="2404784" />
  <Command __id="949" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 22:10:06 EDT 2022" starttimestamp="1647394201042" timestamp="2405619" />
  <Command __id="950" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:10:06 EDT 2022" starttimestamp="1647394201042" timestamp="2405705" />
  <Command __id="951" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 15 22:10:06 EDT 2022" start_end="END" starttimestamp="1647394201042" timestamp="2405713" />
  <Command __id="952" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:10:06 EDT 2022" starttimestamp="1647394201042" timestamp="2405740" />
  <Command __id="953" _type="SelectTextCommand" caretOffset="5789" date="Tue Mar 15 22:10:07 EDT 2022" end="5804" start="5789" starttimestamp="1647394201042" timestamp="2406105" />
  <Command __id="754" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:04:35 EDT 2022" docASTNodeCount="380" docActiveCodeLength="2868" docExpressionCount="254" docLength="2917" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2074271">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\RemoteClientFacebookMapReduce.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import comp533.client.ClientInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.TokenCounterModel;¶import comp533.main.RemoteModel;¶import comp533.main.ModelInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.List;¶import java.util.Map;¶¶public class RemoteClientFacebookMapReduce extends AMapReduceTracer implements ClientInterface {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶¶	public static void main(String[] args) {¶        try {¶            Registry rmiRegistry = LocateRegistry.getRegistry(1092);¶            RemoteClientFacebookMapReduce remoteClient = new RemoteClientFacebookMapReduce();¶            UnicastRemoteObject.exportObject(remoteClient, 0);¶            rmiRegistry.rebind(RemoteClientFacebookMapReduce.class.getName(), remoteClient);¶            ¶            RemoteModel counter1 = (RemoteModel) rmiRegistry.lookup(RemoteModel.class.getName());¶            counter1.registerClient(remoteClient);¶            ¶            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");¶            System.out.println(counter1.toString());¶            System.out.println(remoteClient.toString());¶            System.out.println("?????????????????????????????????");¶            ¶            remoteClient.synchronizedWait();¶            AMapReduceTracer.traceExit(ModelInterface.class);¶            System.exit(0);¶        } catch (RemoteException | NotBoundException | InterruptedException ex) {¶            ex.printStackTrace();¶        }¶    }¶¶	public Map<String, List<String>> reduceNew(List<KeyValueInterface<String, List<String>>> keyValuePairs) throws RemoteException {¶    	this.trace("clientreducenew5555555555555555555555555555");¶        this.traceRemoteList(keyValuePairs);¶        this.trace("clientreducenew66666666666666666666666666");¶        FacebookReducer reducer = new FacebookReducer();¶        Map<String, List<String>> result = reducer.reduce(keyValuePairs);¶        this.traceRemoteResult(result);¶        return result;¶    }¶¶    public void quit() {¶        this.traceQuit();¶        this.synchronizedNotify();¶    }¶¶	@Override¶	public Map<String, Integer> reduce(List<KeyValueInterface<String, Integer>> serializableKeyValuePairs)¶			throws RemoteException {¶		// TODO Auto-generated method stub¶		this.trace("clientreducenew5555555555555555555555555555");¶        this.traceRemoteList(serializableKeyValuePairs);¶        this.trace("clientreducenew66666666666666666666666666");¶		return null;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="756" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:04:35 EDT 2022" docASTNodeCount="1625" docActiveCodeLength="11192" docExpressionCount="988" docLength="11207" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2074325">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.RemoteModel;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.main.ModelInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, List<String>> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<FacebookSlave> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<FacebookSlave> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public FacebookModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶            ¶            for (int i = 0; i < 2; i++) {¶            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶                System.out.println(unassignedSlaves);¶                System.out.println(unassignedClients);¶                System.out.println("################################");¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        FacebookMapper mapper = new FacebookMapper();¶        for (String token: tokens) {¶        	String[] all = token.split(",");¶        	String user = all[0];¶        	String[] friends = Arrays.copyOfRange(all, 1, all.length);¶        	Arrays.sort(friends);¶        	KeyValueInterface<String, List<String>> keyValue;¶        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");¶        	this.traceRemoteList(friends);¶        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");¶        	for (String friend: friends) {¶        		keyValue = mapper.map(token, user, friend, friends);¶        		this.produceBoundedBuffer(keyValue);¶     ¶            }¶            ¶        }¶        this.endEnqueue();¶        ¶¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, List<String>> oldResult = this.result;¶        this.result = new HashMap<String, List<String>>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final List<String> value = keyValues.getValue();¶                if (result.get(key) == null) {¶                	result.put(key, value);¶                } else {¶                    final List<String> current = result.get(key);¶                    ¶    				final List<String> newValue = intersection(current, value);¶    				result.put(key, newValue);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    public static <T> List<T> intersection(List<T> list1, List<T> list2) {¶        List<T> list = new ArrayList<T>();¶¶        for (T t : list1) {¶            if(list2.contains(t)) {¶                list.add(t);¶            }¶        }¶¶        return list;¶    }¶    ¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, List<String>> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            FacebookSlave slave = new FacebookSlave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof FacebookModel)) {¶            return false;¶        }¶        FacebookModel otherCounter = (FacebookModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="759" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:04:39 EDT 2022" docASTNodeCount="1425" docActiveCodeLength="10176" docExpressionCount="885" docLength="10176" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2078551">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\TokenCounterModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.main;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, Integer> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<SlaveInterface> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<SlaveInterface> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public TokenCounterModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶            System.out.println(unassignedSlaves.capacity());¶            System.out.println(unassignedClients.capacity());¶            System.out.println("################################");¶            for (int i = 0; i < 2; i++) {¶            	¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        MapperInterface<String, Integer> mapper = new Mapper();¶        for (String token: tokens) {¶            KeyValueInterface<String, Integer> keyValue = mapper.map(token);¶            this.produceBoundedBuffer(keyValue);¶        }¶        this.endEnqueue();¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, Integer> oldResult = this.result;¶        this.result = new HashMap<>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final Integer value = keyValues.getValue();¶                if (result.containsKey(key)) {¶                	final int oldValue = result.get(key);¶                	final int newValue = oldValue+value;¶                	this.result.put(key, newValue);¶                } else {¶                	this.result.put(key, value);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, Integer> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            Slave slave = new Slave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof TokenCounterModel)) {¶            return false;¶        }¶        TokenCounterModel otherCounter = (TokenCounterModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="765" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:04:46 EDT 2022" docASTNodeCount="1625" docActiveCodeLength="11192" docExpressionCount="988" docLength="11207" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2085952">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.RemoteModel;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.main.ModelInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, List<String>> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<FacebookSlave> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<FacebookSlave> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public FacebookModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶            ¶            for (int i = 0; i < 2; i++) {¶            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶                System.out.println(unassignedSlaves);¶                System.out.println(unassignedClients);¶                System.out.println("################################");¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        FacebookMapper mapper = new FacebookMapper();¶        for (String token: tokens) {¶        	String[] all = token.split(",");¶        	String user = all[0];¶        	String[] friends = Arrays.copyOfRange(all, 1, all.length);¶        	Arrays.sort(friends);¶        	KeyValueInterface<String, List<String>> keyValue;¶        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");¶        	this.traceRemoteList(friends);¶        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");¶        	for (String friend: friends) {¶        		keyValue = mapper.map(token, user, friend, friends);¶        		this.produceBoundedBuffer(keyValue);¶     ¶            }¶            ¶        }¶        this.endEnqueue();¶        ¶¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, List<String>> oldResult = this.result;¶        this.result = new HashMap<String, List<String>>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final List<String> value = keyValues.getValue();¶                if (result.get(key) == null) {¶                	result.put(key, value);¶                } else {¶                    final List<String> current = result.get(key);¶                    ¶    				final List<String> newValue = intersection(current, value);¶    				result.put(key, newValue);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    public static <T> List<T> intersection(List<T> list1, List<T> list2) {¶        List<T> list = new ArrayList<T>();¶¶        for (T t : list1) {¶            if(list2.contains(t)) {¶                list.add(t);¶            }¶        }¶¶        return list;¶    }¶    ¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, List<String>> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            FacebookSlave slave = new FacebookSlave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof FacebookModel)) {¶            return false;¶        }¶        FacebookModel otherCounter = (FacebookModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="779" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:05:09 EDT 2022" docASTNodeCount="1425" docActiveCodeLength="10176" docExpressionCount="885" docLength="10176" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2108100">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\TokenCounterModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.main;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, Integer> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<SlaveInterface> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<SlaveInterface> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public TokenCounterModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶            System.out.println(unassignedSlaves.capacity());¶            System.out.println(unassignedClients.capacity());¶            System.out.println("################################");¶            for (int i = 0; i < 2; i++) {¶            	¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        MapperInterface<String, Integer> mapper = new Mapper();¶        for (String token: tokens) {¶            KeyValueInterface<String, Integer> keyValue = mapper.map(token);¶            this.produceBoundedBuffer(keyValue);¶        }¶        this.endEnqueue();¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, Integer> oldResult = this.result;¶        this.result = new HashMap<>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final Integer value = keyValues.getValue();¶                if (result.containsKey(key)) {¶                	final int oldValue = result.get(key);¶                	final int newValue = oldValue+value;¶                	this.result.put(key, newValue);¶                } else {¶                	this.result.put(key, value);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, Integer> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            Slave slave = new Slave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof TokenCounterModel)) {¶            return false;¶        }¶        TokenCounterModel otherCounter = (TokenCounterModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="782" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:06:11 EDT 2022" docASTNodeCount="1625" docActiveCodeLength="11192" docExpressionCount="988" docLength="11207" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2170469">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.RemoteModel;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.main.ModelInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, List<String>> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<FacebookSlave> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<FacebookSlave> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public FacebookModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶            ¶            for (int i = 0; i < 2; i++) {¶            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶                System.out.println(unassignedSlaves);¶                System.out.println(unassignedClients);¶                System.out.println("################################");¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        FacebookMapper mapper = new FacebookMapper();¶        for (String token: tokens) {¶        	String[] all = token.split(",");¶        	String user = all[0];¶        	String[] friends = Arrays.copyOfRange(all, 1, all.length);¶        	Arrays.sort(friends);¶        	KeyValueInterface<String, List<String>> keyValue;¶        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");¶        	this.traceRemoteList(friends);¶        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");¶        	for (String friend: friends) {¶        		keyValue = mapper.map(token, user, friend, friends);¶        		this.produceBoundedBuffer(keyValue);¶     ¶            }¶            ¶        }¶        this.endEnqueue();¶        ¶¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, List<String>> oldResult = this.result;¶        this.result = new HashMap<String, List<String>>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final List<String> value = keyValues.getValue();¶                if (result.get(key) == null) {¶                	result.put(key, value);¶                } else {¶                    final List<String> current = result.get(key);¶                    ¶    				final List<String> newValue = intersection(current, value);¶    				result.put(key, newValue);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    public static <T> List<T> intersection(List<T> list1, List<T> list2) {¶        List<T> list = new ArrayList<T>();¶¶        for (T t : list1) {¶            if(list2.contains(t)) {¶                list.add(t);¶            }¶        }¶¶        return list;¶    }¶    ¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, List<String>> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            FacebookSlave slave = new FacebookSlave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof FacebookModel)) {¶            return false;¶        }¶        FacebookModel otherCounter = (FacebookModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="789" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:07:05 EDT 2022" docASTNodeCount="1425" docActiveCodeLength="10176" docExpressionCount="885" docLength="10176" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2224033">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\TokenCounterModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.main;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, Integer> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<SlaveInterface> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<SlaveInterface> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public TokenCounterModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶            System.out.println(unassignedSlaves.capacity());¶            System.out.println(unassignedClients.capacity());¶            System.out.println("################################");¶            for (int i = 0; i < 2; i++) {¶            	¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        MapperInterface<String, Integer> mapper = new Mapper();¶        for (String token: tokens) {¶            KeyValueInterface<String, Integer> keyValue = mapper.map(token);¶            this.produceBoundedBuffer(keyValue);¶        }¶        this.endEnqueue();¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, Integer> oldResult = this.result;¶        this.result = new HashMap<>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final Integer value = keyValues.getValue();¶                if (result.containsKey(key)) {¶                	final int oldValue = result.get(key);¶                	final int newValue = oldValue+value;¶                	this.result.put(key, newValue);¶                } else {¶                	this.result.put(key, value);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, Integer> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            Slave slave = new Slave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof TokenCounterModel)) {¶            return false;¶        }¶        TokenCounterModel otherCounter = (TokenCounterModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="791" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:07:57 EDT 2022" docASTNodeCount="1625" docActiveCodeLength="11192" docExpressionCount="988" docLength="11207" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2276165">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.RemoteModel;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.main.ModelInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, List<String>> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<FacebookSlave> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<FacebookSlave> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public FacebookModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶            ¶            for (int i = 0; i < 2; i++) {¶            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶                System.out.println(unassignedSlaves);¶                System.out.println(unassignedClients);¶                System.out.println("################################");¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        FacebookMapper mapper = new FacebookMapper();¶        for (String token: tokens) {¶        	String[] all = token.split(",");¶        	String user = all[0];¶        	String[] friends = Arrays.copyOfRange(all, 1, all.length);¶        	Arrays.sort(friends);¶        	KeyValueInterface<String, List<String>> keyValue;¶        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");¶        	this.traceRemoteList(friends);¶        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");¶        	for (String friend: friends) {¶        		keyValue = mapper.map(token, user, friend, friends);¶        		this.produceBoundedBuffer(keyValue);¶     ¶            }¶            ¶        }¶        this.endEnqueue();¶        ¶¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, List<String>> oldResult = this.result;¶        this.result = new HashMap<String, List<String>>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final List<String> value = keyValues.getValue();¶                if (result.get(key) == null) {¶                	result.put(key, value);¶                } else {¶                    final List<String> current = result.get(key);¶                    ¶    				final List<String> newValue = intersection(current, value);¶    				result.put(key, newValue);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    public static <T> List<T> intersection(List<T> list1, List<T> list2) {¶        List<T> list = new ArrayList<T>();¶¶        for (T t : list1) {¶            if(list2.contains(t)) {¶                list.add(t);¶            }¶        }¶¶        return list;¶    }¶    ¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, List<String>> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            FacebookSlave slave = new FacebookSlave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof FacebookModel)) {¶            return false;¶        }¶        FacebookModel otherCounter = (FacebookModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="796" _type="Delete" date="Tue Mar 15 22:08:34 EDT 2022" docASTNodeCount="1618" docActiveCodeLength="11172" docExpressionCount="985" docLength="11187" endLine="160" length="20" offset="5951" startLine="160" starttimestamp="1647394201042" timestamp="2313031">
    <text><![CDATA[String, List<String>]]></text>
  </DocumentChange>
  <Command __id="808" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:09:26 EDT 2022" docASTNodeCount="1425" docActiveCodeLength="10176" docExpressionCount="885" docLength="10176" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2365891">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\TokenCounterModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.main;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, Integer> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<SlaveInterface> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<SlaveInterface> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public TokenCounterModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶            System.out.println(unassignedSlaves.capacity());¶            System.out.println(unassignedClients.capacity());¶            System.out.println("################################");¶            for (int i = 0; i < 2; i++) {¶            	¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        MapperInterface<String, Integer> mapper = new Mapper();¶        for (String token: tokens) {¶            KeyValueInterface<String, Integer> keyValue = mapper.map(token);¶            this.produceBoundedBuffer(keyValue);¶        }¶        this.endEnqueue();¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, Integer> oldResult = this.result;¶        this.result = new HashMap<>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final Integer value = keyValues.getValue();¶                if (result.containsKey(key)) {¶                	final int oldValue = result.get(key);¶                	final int newValue = oldValue+value;¶                	this.result.put(key, newValue);¶                } else {¶                	this.result.put(key, value);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, Integer> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            Slave slave = new Slave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof TokenCounterModel)) {¶            return false;¶        }¶        TokenCounterModel otherCounter = (TokenCounterModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="812" _type="Insert" date="Tue Mar 15 22:09:27 EDT 2022" docASTNodeCount="1427" docActiveCodeLength="10181" docExpressionCount="887" docLength="10181" length="5" offset="5626" repeat="5" starttimestamp="1647394201042" timestamp="2366789" timestamp2="2367300">
    <text><![CDATA[this.]]></text>
  </DocumentChange>
  <Command __id="832" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:09:30 EDT 2022" docASTNodeCount="1618" docActiveCodeLength="11172" docExpressionCount="985" docLength="11187" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2369125">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.RemoteModel;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.main.ModelInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, List<String>> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<FacebookSlave> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<FacebookSlave> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public FacebookModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶            ¶            for (int i = 0; i < 2; i++) {¶            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶                System.out.println(unassignedSlaves);¶                System.out.println(unassignedClients);¶                System.out.println("################################");¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        FacebookMapper mapper = new FacebookMapper();¶        for (String token: tokens) {¶        	String[] all = token.split(",");¶        	String user = all[0];¶        	String[] friends = Arrays.copyOfRange(all, 1, all.length);¶        	Arrays.sort(friends);¶        	KeyValueInterface<String, List<String>> keyValue;¶        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");¶        	this.traceRemoteList(friends);¶        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");¶        	for (String friend: friends) {¶        		keyValue = mapper.map(token, user, friend, friends);¶        		this.produceBoundedBuffer(keyValue);¶     ¶            }¶            ¶        }¶        this.endEnqueue();¶        ¶¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, List<String>> oldResult = this.result;¶        this.result = new HashMap<"), Diff(DELETE,"String, List<String>"), Diff(EQUAL,">();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final List<String> value = keyValues.getValue();¶                if (result.get(key) == null) {¶                	result.put(key, value);¶                } else {¶                    final List<String> current = result.get(key);¶                    ¶    				final List<String> newValue = intersection(current, value);¶    				result.put(key, newValue);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    public static <T> List<T> intersection(List<T> list1, List<T> list2) {¶        List<T> list = new ArrayList<T>();¶¶        for (T t : list1) {¶            if(list2.contains(t)) {¶                list.add(t);¶            }¶        }¶¶        return list;¶    }¶    ¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, List<String>> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            FacebookSlave slave = new FacebookSlave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof FacebookModel)) {¶            return false;¶        }¶        FacebookModel otherCounter = (FacebookModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package facebook;

import comp533.barrier.BarrierInterface;
import comp533.barrier.Barrier;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.main.RemoteModel;
import comp533.keyValue.KeyValue;
import comp533.joiner.Joiner;
import comp533.mapper.MapperInterface;
import comp533.main.ModelInterface;
import comp533.mapper.Mapper;
import comp533.slave.SlaveInterface;
import comp533.slave.Slave;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

import java.rmi.RemoteException;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
    private Map<String, List<String>> result;
    private int numThreads;
    private List<Thread> threads;
    private List<FacebookSlave> slaves;
    private String inputString;
    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;
    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;
    private JoinerInterface joiner;
    private BarrierInterface barrier;
    private List<ClientInterface> registeredClients;
    private Stack<FacebookSlave> unassignedSlaves;
    private Stack<ClientInterface> unassignedClients;


    public FacebookModel() {
        this.inputString = null;
        this.numThreads = 0;
        this.reductionQueueList = new ArrayList<>();
        this.slaves = new ArrayList<>();
        this.registeredClients = new ArrayList<>();
        this.unassignedSlaves = new Stack<>();
        this.unassignedClients = new Stack<>();
    }

    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        this.pcs.addPropertyChangeListener(listener);
    }

    public String getInputString() {
        return this.inputString;
    }

    public void matchSlavesToClients() {
        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {
            
            for (int i = 0; i < 2; i++) {
            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
                System.out.println(unassignedSlaves);
                System.out.println(unassignedClients);
                System.out.println("################################");
                
            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();
                ClientInterface unassignedClient = this.unassignedClients.pop();
            	
                unassignedSlave.setClient(unassignedClient);
            }
            
        } else {
        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        }
    }

    private void clearReductionQueues() {
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void unblockSlaveThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            SlaveInterface currentSlave = this.slaves.get(i);
            currentSlave.notifySlave();
        }
    }

    private void initializeStructures() {
        this.result = new HashMap<>();
        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {
        this.traceEnqueueRequest(keyValue);
        this.boundedBuffer.put(keyValue);
        this.traceEnqueue(this.boundedBuffer);
    }

    private void endEnqueue() {
        try {
            for (int i = 0; i < this.numThreads; i++) {
                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);
                this.traceEnqueueRequest(endKeyValue);
                this.boundedBuffer.put(endKeyValue);
            }
        } catch (InterruptedException ex) {
            Tracer.error(ex.getMessage());
        }
    }

    private void startThreads() {
        for (Thread currentThread: this.threads) {
            if (currentThread.getState() == Thread.State.NEW) {
                currentThread.start();
            }
        }
    }

    private void problemSplit() throws InterruptedException {
        String[] tokens = this.inputString.split(" ");
        FacebookMapper mapper = new FacebookMapper();
        for (String token: tokens) {
        	String[] all = token.split(",");
        	String user = all[0];
        	String[] friends = Arrays.copyOfRange(all, 1, all.length);
        	Arrays.sort(friends);
        	KeyValueInterface<String, List<String>> keyValue;
        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");
        	this.traceRemoteList(friends);
        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");
        	for (String friend: friends) {
        		keyValue = mapper.map(token, user, friend, friends);
        		this.produceBoundedBuffer(keyValue);
     
            }
            
        }
        this.endEnqueue();
        

    }

    private void mergeIntermediaryResults(ViewInterface view) {
        Map<String, List<String>> oldResult = this.result;
        this.result = new HashMap<>();
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {
            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {
            	final String key = keyValues.getKey();
                final List<String> value = keyValues.getValue();
                if (result.get(key) == null) {
                	result.put(key, value);
                } else {
                    final List<String> current = result.get(key);
                    
    				final List<String> newValue = intersection(current, value);
    				result.put(key, newValue);
                }
            }
        }
        this.traceRemoteResult(result);
        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",
                oldResult, this.result);
        this.pcs.firePropertyChange(updateResultEvent);
        view.propertyChange(updateResultEvent);
    }

    public static <T> List<T> intersection(List<T> list1, List<T> list2) {
        List<T> list = new ArrayList<T>();

        for (T t : list1) {
            if(list2.contains(t)) {
                list.add(t);
            }
        }

        return list;
    }
    
    private void updateResult(ViewInterface view) throws InterruptedException {
        this.initializeStructures();
        this.clearReductionQueues();
        this.startThreads();
        this.unblockSlaveThreads();
        this.problemSplit();
        this.joiner.join();
        this.mergeIntermediaryResults(view);
    }

    public void setInputString(String newInputString, ViewInterface view) {
        try {
            String oldInputString = this.inputString;
            this.inputString = newInputString;
            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",
                    oldInputString, newInputString);
            this.pcs.firePropertyChange(updateInputStringEvent);
            view.propertyChange(updateInputStringEvent);
            this.updateResult(view);
        } catch (InterruptedException ex) {
            Tracer.error(Arrays.toString(ex.getStackTrace()));
        }
    }

    public int getNumThreads() {
        return this.numThreads;
    }

    public BarrierInterface getBarrier() {
        return this.barrier;
    }

    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {
        return this.boundedBuffer;
    }

    public JoinerInterface getJoiner() {
        return this.joiner;
    }

    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {
        return this.reductionQueueList;
    }

    public Map<String, List<String>> getResult() {
        return this.result;
    }

    public void updateThreads() {
        List<Thread> oldThreads = this.threads;
        this.joiner = new Joiner(this.numThreads);
        this.barrier = new Barrier(this.numThreads);
        this.threads = new ArrayList<>(this.numThreads);
        for (int i = 0; i < this.numThreads; i++) {
            FacebookSlave slave = new FacebookSlave(i, this);
            this.slaves.add(slave);
            this.unassignedSlaves.add(slave);
            Thread newThread = new Thread(slave, "Slave" + i);
            this.threads.add(newThread);
            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();
            this.reductionQueueList.add(reductionQueue);
        }
        this.matchSlavesToClients();
        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",
                oldThreads, this.threads);
        this.pcs.firePropertyChange(updateThreadsEvent);
    }

    public void registerClient(ClientInterface clientToRegister) {
        this.traceRegister(clientToRegister);
        this.unassignedClients.add(clientToRegister);
        this.registeredClients.add(clientToRegister);
    }

    public void callClientQuit() throws RemoteException {
        for (ClientInterface registeredClient: registeredClients) {
            registeredClient.quit();
        }
    }

    public void interruptThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            this.slaves.get(i).signalQuit();
            this.threads.get(i).interrupt();
        }
    }

    public void setNumThreads(int numThreads, ViewInterface view) {
        int oldNumThreads = this.numThreads;
        this.numThreads = numThreads;
        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",
                oldNumThreads, numThreads);
        this.pcs.firePropertyChange(setNumThreadsEvent);
        this.updateThreads();
    }

    @Override
    public String toString() {
        return AMapReduceTracer.MODEL;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof FacebookModel)) {
            return false;
        }
        FacebookModel otherCounter = (FacebookModel) obj;
        return this.getResult() == otherCounter.getResult();
    }
}
]]></snapshot>
  </Command>
  <DocumentChange __id="839" _type="Insert" date="Tue Mar 15 22:09:33 EDT 2022" docASTNodeCount="1620" docActiveCodeLength="11177" docExpressionCount="987" docLength="11192" length="5" offset="6304" repeat="5" starttimestamp="1647394201042" timestamp="2372864" timestamp2="2373562">
    <text><![CDATA[this.]]></text>
  </DocumentChange>
  <DocumentChange __id="854" _type="Insert" date="Tue Mar 15 22:09:37 EDT 2022" docASTNodeCount="1622" docActiveCodeLength="11182" docExpressionCount="989" docLength="11197" length="5" offset="6354" repeat="5" starttimestamp="1647394201042" timestamp="2376060" timestamp2="2376600">
    <text><![CDATA[this.]]></text>
  </DocumentChange>
  <DocumentChange __id="871" _type="Insert" date="Tue Mar 15 22:09:46 EDT 2022" docASTNodeCount="1624" docActiveCodeLength="11187" docExpressionCount="991" docLength="11202" length="5" offset="6459" repeat="5" starttimestamp="1647394201042" timestamp="2385191" timestamp2="2385742">
    <text><![CDATA[this.]]></text>
  </DocumentChange>
  <DocumentChange __id="888" _type="Insert" date="Tue Mar 15 22:09:50 EDT 2022" docASTNodeCount="1626" docActiveCodeLength="11192" docExpressionCount="993" docLength="11207" length="5" offset="6581" repeat="5" starttimestamp="1647394201042" timestamp="2389104" timestamp2="2389650">
    <text><![CDATA[this.]]></text>
  </DocumentChange>
  <Command __id="905" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:09:57 EDT 2022" docASTNodeCount="1427" docActiveCodeLength="10181" docExpressionCount="887" docLength="10181" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2396681">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\TokenCounterModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.main;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, Integer> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<SlaveInterface> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<SlaveInterface> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public TokenCounterModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶            System.out.println(unassignedSlaves.capacity());¶            System.out.println(unassignedClients.capacity());¶            System.out.println("################################");¶            for (int i = 0; i < 2; i++) {¶            	¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        MapperInterface<String, Integer> mapper = new Mapper();¶        for (String token: tokens) {¶            KeyValueInterface<String, Integer> keyValue = mapper.map(token);¶            this.produceBoundedBuffer(keyValue);¶        }¶        this.endEnqueue();¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, Integer> oldResult = this.result;¶        this.result = new HashMap<>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final Integer value = keyValues.getValue();¶                if ("), Diff(INSERT,"this."), Diff(EQUAL,"result.containsKey(key)) {¶                	final int oldValue = result.get(key);¶                	final int newValue = oldValue+value;¶                	this.result.put(key, newValue);¶                } else {¶                	this.result.put(key, value);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, Integer> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            Slave slave = new Slave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof TokenCounterModel)) {¶            return false;¶        }¶        TokenCounterModel otherCounter = (TokenCounterModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package comp533.main;

import comp533.barrier.BarrierInterface;
import comp533.barrier.Barrier;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.keyValue.KeyValue;
import comp533.joiner.Joiner;
import comp533.mapper.MapperInterface;
import comp533.mapper.Mapper;
import comp533.slave.SlaveInterface;
import comp533.slave.Slave;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

import java.rmi.RemoteException;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {
    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
    private Map<String, Integer> result;
    private int numThreads;
    private List<Thread> threads;
    private List<SlaveInterface> slaves;
    private String inputString;
    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;
    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;
    private JoinerInterface joiner;
    private BarrierInterface barrier;
    private List<ClientInterface> registeredClients;
    private Stack<SlaveInterface> unassignedSlaves;
    private Stack<ClientInterface> unassignedClients;


    public TokenCounterModel() {
        this.inputString = null;
        this.numThreads = 0;
        this.reductionQueueList = new ArrayList<>();
        this.slaves = new ArrayList<>();
        this.registeredClients = new ArrayList<>();
        this.unassignedSlaves = new Stack<>();
        this.unassignedClients = new Stack<>();
    }

    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        this.pcs.addPropertyChangeListener(listener);
    }

    public String getInputString() {
        return this.inputString;
    }

    public void matchSlavesToClients() {
        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {
        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
            System.out.println(unassignedSlaves.capacity());
            System.out.println(unassignedClients.capacity());
            System.out.println("################################");
            for (int i = 0; i < 2; i++) {
            	
                
            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();
                ClientInterface unassignedClient = this.unassignedClients.pop();
            	
                unassignedSlave.setClient(unassignedClient);
            }
            
        } else {
        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        }
    }

    private void clearReductionQueues() {
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void unblockSlaveThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            SlaveInterface currentSlave = this.slaves.get(i);
            currentSlave.notifySlave();
        }
    }

    private void initializeStructures() {
        this.result = new HashMap<>();
        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {
        this.traceEnqueueRequest(keyValue);
        this.boundedBuffer.put(keyValue);
        this.traceEnqueue(this.boundedBuffer);
    }

    private void endEnqueue() {
        try {
            for (int i = 0; i < this.numThreads; i++) {
                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);
                this.traceEnqueueRequest(endKeyValue);
                this.boundedBuffer.put(endKeyValue);
            }
        } catch (InterruptedException ex) {
            Tracer.error(ex.getMessage());
        }
    }

    private void startThreads() {
        for (Thread currentThread: this.threads) {
            if (currentThread.getState() == Thread.State.NEW) {
                currentThread.start();
            }
        }
    }

    private void problemSplit() throws InterruptedException {
        String[] tokens = this.inputString.split(" ");
        MapperInterface<String, Integer> mapper = new Mapper();
        for (String token: tokens) {
            KeyValueInterface<String, Integer> keyValue = mapper.map(token);
            this.produceBoundedBuffer(keyValue);
        }
        this.endEnqueue();
    }

    private void mergeIntermediaryResults(ViewInterface view) {
        Map<String, Integer> oldResult = this.result;
        this.result = new HashMap<>();
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {
            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {
            	final String key = keyValues.getKey();
                final Integer value = keyValues.getValue();
                if (this.result.containsKey(key)) {
                	final int oldValue = result.get(key);
                	final int newValue = oldValue+value;
                	this.result.put(key, newValue);
                } else {
                	this.result.put(key, value);
                }
            }
        }
        this.traceRemoteResult(result);
        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",
                oldResult, this.result);
        this.pcs.firePropertyChange(updateResultEvent);
        view.propertyChange(updateResultEvent);
    }

    private void updateResult(ViewInterface view) throws InterruptedException {
        this.initializeStructures();
        this.clearReductionQueues();
        this.startThreads();
        this.unblockSlaveThreads();
        this.problemSplit();
        this.joiner.join();
        this.mergeIntermediaryResults(view);
    }

    public void setInputString(String newInputString, ViewInterface view) {
        try {
            String oldInputString = this.inputString;
            this.inputString = newInputString;
            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",
                    oldInputString, newInputString);
            this.pcs.firePropertyChange(updateInputStringEvent);
            view.propertyChange(updateInputStringEvent);
            this.updateResult(view);
        } catch (InterruptedException ex) {
            Tracer.error(Arrays.toString(ex.getStackTrace()));
        }
    }

    public int getNumThreads() {
        return this.numThreads;
    }

    public BarrierInterface getBarrier() {
        return this.barrier;
    }

    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {
        return this.boundedBuffer;
    }

    public JoinerInterface getJoiner() {
        return this.joiner;
    }

    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {
        return this.reductionQueueList;
    }

    public Map<String, Integer> getResult() {
        return this.result;
    }

    public void updateThreads() {
        List<Thread> oldThreads = this.threads;
        this.joiner = new Joiner(this.numThreads);
        this.barrier = new Barrier(this.numThreads);
        this.threads = new ArrayList<>(this.numThreads);
        for (int i = 0; i < this.numThreads; i++) {
            Slave slave = new Slave(i, this);
            this.slaves.add(slave);
            this.unassignedSlaves.add(slave);
            Thread newThread = new Thread(slave, "Slave" + i);
            this.threads.add(newThread);
            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();
            this.reductionQueueList.add(reductionQueue);
        }
        this.matchSlavesToClients();
        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",
                oldThreads, this.threads);
        this.pcs.firePropertyChange(updateThreadsEvent);
    }

    public void registerClient(ClientInterface clientToRegister) {
        this.traceRegister(clientToRegister);
        this.unassignedClients.add(clientToRegister);
        this.registeredClients.add(clientToRegister);
    }

    public void callClientQuit() throws RemoteException {
        for (ClientInterface registeredClient: registeredClients) {
            registeredClient.quit();
        }
    }

    public void interruptThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            this.slaves.get(i).signalQuit();
            this.threads.get(i).interrupt();
        }
    }

    public void setNumThreads(int numThreads, ViewInterface view) {
        int oldNumThreads = this.numThreads;
        this.numThreads = numThreads;
        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",
                oldNumThreads, numThreads);
        this.pcs.firePropertyChange(setNumThreadsEvent);
        this.updateThreads();
    }

    @Override
    public String toString() {
        return AMapReduceTracer.MODEL;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof TokenCounterModel)) {
            return false;
        }
        TokenCounterModel otherCounter = (TokenCounterModel) obj;
        return this.getResult() == otherCounter.getResult();
    }
}
]]></snapshot>
  </Command>
  <DocumentChange __id="909" _type="Insert" date="Tue Mar 15 22:09:59 EDT 2022" docASTNodeCount="1428" docActiveCodeLength="10186" docExpressionCount="888" docLength="10186" length="5" offset="5969" repeat="5" starttimestamp="1647394201042" timestamp="2398144" timestamp2="2399074">
    <text><![CDATA[this,]]></text>
  </DocumentChange>
  <DocumentChange __id="925" _type="Delete" date="Tue Mar 15 22:10:00 EDT 2022" docASTNodeCount="1427" docActiveCodeLength="10185" docExpressionCount="887" docLength="10185" endLine="154" length="1" offset="5973" startLine="154" starttimestamp="1647394201042" timestamp="2399685">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="928" _type="Insert" date="Tue Mar 15 22:10:00 EDT 2022" docASTNodeCount="1429" docActiveCodeLength="10186" docExpressionCount="889" docLength="10186" length="1" offset="5973" starttimestamp="1647394201042" timestamp="2399953">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="931" _type="Delete" date="Tue Mar 15 22:10:02 EDT 2022" docASTNodeCount="1427" docActiveCodeLength="10185" docExpressionCount="887" docLength="10185" endLine="154" length="1" offset="5973" startLine="154" starttimestamp="1647394201042" timestamp="2401278">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="935" _type="Insert" date="Tue Mar 15 22:10:02 EDT 2022" docASTNodeCount="1429" docActiveCodeLength="10186" docExpressionCount="889" docLength="10186" length="1" offset="5973" starttimestamp="1647394201042" timestamp="2401589">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="939" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:10:03 EDT 2022" docASTNodeCount="1626" docActiveCodeLength="11192" docExpressionCount="993" docLength="11207" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2402719">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.RemoteModel;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.main.ModelInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, List<String>> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<FacebookSlave> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<FacebookSlave> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public FacebookModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶            ¶            for (int i = 0; i < 2; i++) {¶            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶                System.out.println(unassignedSlaves);¶                System.out.println(unassignedClients);¶                System.out.println("################################");¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        FacebookMapper mapper = new FacebookMapper();¶        for (String token: tokens) {¶        	String[] all = token.split(",");¶        	String user = all[0];¶        	String[] friends = Arrays.copyOfRange(all, 1, all.length);¶        	Arrays.sort(friends);¶        	KeyValueInterface<String, List<String>> keyValue;¶        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");¶        	this.traceRemoteList(friends);¶        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");¶        	for (String friend: friends) {¶        		keyValue = mapper.map(token, user, friend, friends);¶        		this.produceBoundedBuffer(keyValue);¶     ¶            }¶            ¶        }¶        this.endEnqueue();¶        ¶¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, List<String>> oldResult = this.result;¶        this.result = new HashMap<>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final List<String> value = keyValues.getValue();¶                if ("), Diff(INSERT,"this."), Diff(EQUAL,"result.get(key) == null) {¶                	"), Diff(INSERT,"this."), Diff(EQUAL,"result.put(key, value);¶                } else {¶                    final List<String> current = "), Diff(INSERT,"this."), Diff(EQUAL,"result.get(key);¶                    ¶    				final List<String> newValue = intersection(current, value);¶    				"), Diff(INSERT,"this."), Diff(EQUAL,"result.put(key, newValue);¶                }¶            }¶        }¶        this.traceRemoteResult(result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    public static <T> List<T> intersection(List<T> list1, List<T> list2) {¶        List<T> list = new ArrayList<T>();¶¶        for (T t : list1) {¶            if(list2.contains(t)) {¶                list.add(t);¶            }¶        }¶¶        return list;¶    }¶    ¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, List<String>> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            FacebookSlave slave = new FacebookSlave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof FacebookModel)) {¶            return false;¶        }¶        FacebookModel otherCounter = (FacebookModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package facebook;

import comp533.barrier.BarrierInterface;
import comp533.barrier.Barrier;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.main.RemoteModel;
import comp533.keyValue.KeyValue;
import comp533.joiner.Joiner;
import comp533.mapper.MapperInterface;
import comp533.main.ModelInterface;
import comp533.mapper.Mapper;
import comp533.slave.SlaveInterface;
import comp533.slave.Slave;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

import java.rmi.RemoteException;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
    private Map<String, List<String>> result;
    private int numThreads;
    private List<Thread> threads;
    private List<FacebookSlave> slaves;
    private String inputString;
    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;
    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;
    private JoinerInterface joiner;
    private BarrierInterface barrier;
    private List<ClientInterface> registeredClients;
    private Stack<FacebookSlave> unassignedSlaves;
    private Stack<ClientInterface> unassignedClients;


    public FacebookModel() {
        this.inputString = null;
        this.numThreads = 0;
        this.reductionQueueList = new ArrayList<>();
        this.slaves = new ArrayList<>();
        this.registeredClients = new ArrayList<>();
        this.unassignedSlaves = new Stack<>();
        this.unassignedClients = new Stack<>();
    }

    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        this.pcs.addPropertyChangeListener(listener);
    }

    public String getInputString() {
        return this.inputString;
    }

    public void matchSlavesToClients() {
        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {
            
            for (int i = 0; i < 2; i++) {
            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
                System.out.println(unassignedSlaves);
                System.out.println(unassignedClients);
                System.out.println("################################");
                
            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();
                ClientInterface unassignedClient = this.unassignedClients.pop();
            	
                unassignedSlave.setClient(unassignedClient);
            }
            
        } else {
        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        }
    }

    private void clearReductionQueues() {
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void unblockSlaveThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            SlaveInterface currentSlave = this.slaves.get(i);
            currentSlave.notifySlave();
        }
    }

    private void initializeStructures() {
        this.result = new HashMap<>();
        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {
        this.traceEnqueueRequest(keyValue);
        this.boundedBuffer.put(keyValue);
        this.traceEnqueue(this.boundedBuffer);
    }

    private void endEnqueue() {
        try {
            for (int i = 0; i < this.numThreads; i++) {
                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);
                this.traceEnqueueRequest(endKeyValue);
                this.boundedBuffer.put(endKeyValue);
            }
        } catch (InterruptedException ex) {
            Tracer.error(ex.getMessage());
        }
    }

    private void startThreads() {
        for (Thread currentThread: this.threads) {
            if (currentThread.getState() == Thread.State.NEW) {
                currentThread.start();
            }
        }
    }

    private void problemSplit() throws InterruptedException {
        String[] tokens = this.inputString.split(" ");
        FacebookMapper mapper = new FacebookMapper();
        for (String token: tokens) {
        	String[] all = token.split(",");
        	String user = all[0];
        	String[] friends = Arrays.copyOfRange(all, 1, all.length);
        	Arrays.sort(friends);
        	KeyValueInterface<String, List<String>> keyValue;
        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");
        	this.traceRemoteList(friends);
        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");
        	for (String friend: friends) {
        		keyValue = mapper.map(token, user, friend, friends);
        		this.produceBoundedBuffer(keyValue);
     
            }
            
        }
        this.endEnqueue();
        

    }

    private void mergeIntermediaryResults(ViewInterface view) {
        Map<String, List<String>> oldResult = this.result;
        this.result = new HashMap<>();
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {
            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {
            	final String key = keyValues.getKey();
                final List<String> value = keyValues.getValue();
                if (this.result.get(key) == null) {
                	this.result.put(key, value);
                } else {
                    final List<String> current = this.result.get(key);
                    
    				final List<String> newValue = intersection(current, value);
    				this.result.put(key, newValue);
                }
            }
        }
        this.traceRemoteResult(result);
        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",
                oldResult, this.result);
        this.pcs.firePropertyChange(updateResultEvent);
        view.propertyChange(updateResultEvent);
    }

    public static <T> List<T> intersection(List<T> list1, List<T> list2) {
        List<T> list = new ArrayList<T>();

        for (T t : list1) {
            if(list2.contains(t)) {
                list.add(t);
            }
        }

        return list;
    }
    
    private void updateResult(ViewInterface view) throws InterruptedException {
        this.initializeStructures();
        this.clearReductionQueues();
        this.startThreads();
        this.unblockSlaveThreads();
        this.problemSplit();
        this.joiner.join();
        this.mergeIntermediaryResults(view);
    }

    public void setInputString(String newInputString, ViewInterface view) {
        try {
            String oldInputString = this.inputString;
            this.inputString = newInputString;
            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",
                    oldInputString, newInputString);
            this.pcs.firePropertyChange(updateInputStringEvent);
            view.propertyChange(updateInputStringEvent);
            this.updateResult(view);
        } catch (InterruptedException ex) {
            Tracer.error(Arrays.toString(ex.getStackTrace()));
        }
    }

    public int getNumThreads() {
        return this.numThreads;
    }

    public BarrierInterface getBarrier() {
        return this.barrier;
    }

    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {
        return this.boundedBuffer;
    }

    public JoinerInterface getJoiner() {
        return this.joiner;
    }

    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {
        return this.reductionQueueList;
    }

    public Map<String, List<String>> getResult() {
        return this.result;
    }

    public void updateThreads() {
        List<Thread> oldThreads = this.threads;
        this.joiner = new Joiner(this.numThreads);
        this.barrier = new Barrier(this.numThreads);
        this.threads = new ArrayList<>(this.numThreads);
        for (int i = 0; i < this.numThreads; i++) {
            FacebookSlave slave = new FacebookSlave(i, this);
            this.slaves.add(slave);
            this.unassignedSlaves.add(slave);
            Thread newThread = new Thread(slave, "Slave" + i);
            this.threads.add(newThread);
            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();
            this.reductionQueueList.add(reductionQueue);
        }
        this.matchSlavesToClients();
        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",
                oldThreads, this.threads);
        this.pcs.firePropertyChange(updateThreadsEvent);
    }

    public void registerClient(ClientInterface clientToRegister) {
        this.traceRegister(clientToRegister);
        this.unassignedClients.add(clientToRegister);
        this.registeredClients.add(clientToRegister);
    }

    public void callClientQuit() throws RemoteException {
        for (ClientInterface registeredClient: registeredClients) {
            registeredClient.quit();
        }
    }

    public void interruptThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            this.slaves.get(i).signalQuit();
            this.threads.get(i).interrupt();
        }
    }

    public void setNumThreads(int numThreads, ViewInterface view) {
        int oldNumThreads = this.numThreads;
        this.numThreads = numThreads;
        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",
                oldNumThreads, numThreads);
        this.pcs.firePropertyChange(setNumThreadsEvent);
        this.updateThreads();
    }

    @Override
    public String toString() {
        return AMapReduceTracer.MODEL;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof FacebookModel)) {
            return false;
        }
        FacebookModel otherCounter = (FacebookModel) obj;
        return this.getResult() == otherCounter.getResult();
    }
}
]]></snapshot>
  </Command>
  <DocumentChange __id="943" _type="Insert" date="Tue Mar 15 22:10:05 EDT 2022" docASTNodeCount="1628" docActiveCodeLength="11197" docExpressionCount="995" docLength="11212" length="5" offset="6690" repeat="5" starttimestamp="1647394201042" timestamp="2404067" timestamp2="2404776">
    <text><![CDATA[this.]]></text>
  </DocumentChange>
  <Command __id="955" _type="PauseCommand" date="Tue Mar 15 22:10:19 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="2418188">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[12083]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="954" _type="MoveCaretCommand" caretOffset="6123" date="Tue Mar 15 22:10:19 EDT 2022" docOffset="6965" starttimestamp="1647394201042" timestamp="2418188" />
  <Command __id="956" _type="SelectTextCommand" caretOffset="6126" date="Tue Mar 15 22:10:19 EDT 2022" end="6126" start="6120" starttimestamp="1647394201042" timestamp="2418324" />
  <Command __id="958" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:10:20 EDT 2022" starttimestamp="1647394201042" timestamp="2419178" />
  <Command __id="960" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:10:20 EDT 2022" starttimestamp="1647394201042" timestamp="2419674" />
  <Command __id="962" _type="PauseCommand" date="Tue Mar 15 22:10:23 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2422362">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2688]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="961" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 22:10:23 EDT 2022" starttimestamp="1647394201042" timestamp="2422362" />
  <Command __id="963" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:10:23 EDT 2022" starttimestamp="1647394201042" timestamp="2422448" />
  <Command __id="964" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:10:23 EDT 2022" starttimestamp="1647394201042" timestamp="2422489" />
  <Command __id="965" _type="MoveCaretCommand" caretOffset="6333" date="Tue Mar 15 22:10:24 EDT 2022" docOffset="7175" starttimestamp="1647394201042" timestamp="2423021" />
  <Command __id="967" _type="PauseCommand" date="Tue Mar 15 22:10:30 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="2429089">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6068]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="968" _type="MoveCaretCommand" caretOffset="5203" date="Tue Mar 15 22:10:30 EDT 2022" docOffset="5974" starttimestamp="1647394201042" timestamp="2429319" />
  <Command __id="970" _type="PauseCommand" date="Tue Mar 15 22:11:39 EDT 2022" range="1m-2m" starttimestamp="1647394201042" timestamp="2498634">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[69315]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="971" _type="MoveCaretCommand" caretOffset="6333" date="Tue Mar 15 22:11:40 EDT 2022" docOffset="7175" starttimestamp="1647394201042" timestamp="2499159" />
  <Command __id="973" _type="PauseCommand" date="Tue Mar 15 22:11:43 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2502886">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3727]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="974" _type="MoveCaretCommand" caretOffset="5203" date="Tue Mar 15 22:11:44 EDT 2022" docOffset="5974" starttimestamp="1647394201042" timestamp="2503515" />
  <Command __id="976" _type="PauseCommand" date="Tue Mar 15 22:12:56 EDT 2022" range="1m-2m" starttimestamp="1647394201042" timestamp="2575776">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[72261]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="977" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 15 22:12:57 EDT 2022" docOffset="0" starttimestamp="1647394201042" timestamp="2576139" />
  <Command __id="979" _type="PauseCommand" date="Tue Mar 15 22:12:58 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2577476">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1337]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="980" _type="MoveCaretCommand" caretOffset="5203" date="Tue Mar 15 22:12:58 EDT 2022" docOffset="5974" starttimestamp="1647394201042" timestamp="2577609" />
  <Command __id="981" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 22:12:59 EDT 2022" starttimestamp="1647394201042" timestamp="2578194" />
  <Command __id="982" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:12:59 EDT 2022" starttimestamp="1647394201042" timestamp="2578277" />
  <Command __id="983" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:12:59 EDT 2022" starttimestamp="1647394201042" timestamp="2578306" />
  <Command __id="985" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 15 22:13:00 EDT 2022" docOffset="0" starttimestamp="1647394201042" timestamp="2579094" />
  <Command __id="987" _type="PauseCommand" date="Tue Mar 15 22:13:02 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2581894">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2800]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="988" _type="MoveCaretCommand" caretOffset="3161" date="Tue Mar 15 22:13:03 EDT 2022" docOffset="3923" starttimestamp="1647394201042" timestamp="2582321" />
  <Command __id="990" _type="PauseCommand" date="Tue Mar 15 22:13:06 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2585168">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2847]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="992" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 15 22:13:06 EDT 2022" docOffset="0" starttimestamp="1647394201042" timestamp="2585497" />
  <Command __id="993" _type="MoveCaretCommand" caretOffset="3161" date="Tue Mar 15 22:13:06 EDT 2022" docOffset="3923" starttimestamp="1647394201042" timestamp="2585504" />
  <Command __id="995" _type="PauseCommand" date="Tue Mar 15 22:13:13 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="2592833">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7329]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="996" _type="MoveCaretCommand" caretOffset="205" date="Tue Mar 15 22:13:13 EDT 2022" docOffset="900" starttimestamp="1647394201042" timestamp="2592888" />
  <Command __id="997" _type="MoveCaretCommand" caretOffset="205" date="Tue Mar 15 22:13:13 EDT 2022" docOffset="900" starttimestamp="1647394201042" timestamp="2592931" />
  <Command __id="999" _type="InsertStringCommand" date="Tue Mar 15 22:13:14 EDT 2022" starttimestamp="1647394201042" timestamp="2593739" timestamp2="2593739">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1000" _type="InsertStringCommand" date="Tue Mar 15 22:13:14 EDT 2022" starttimestamp="1647394201042" timestamp="2593739" timestamp2="2593739">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1002" _type="InsertStringCommand" date="Tue Mar 15 22:13:14 EDT 2022" starttimestamp="1647394201042" timestamp="2593945" timestamp2="2593945">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1003" _type="InsertStringCommand" date="Tue Mar 15 22:13:14 EDT 2022" starttimestamp="1647394201042" timestamp="2593945" timestamp2="2593945">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1005" _type="InsertStringCommand" date="Tue Mar 15 22:13:15 EDT 2022" starttimestamp="1647394201042" timestamp="2594081" timestamp2="2594081">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1006" _type="InsertStringCommand" date="Tue Mar 15 22:13:15 EDT 2022" starttimestamp="1647394201042" timestamp="2594081" timestamp2="2594081">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1008" _type="InsertStringCommand" date="Tue Mar 15 22:13:15 EDT 2022" starttimestamp="1647394201042" timestamp="2594946" timestamp2="2594946">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1009" _type="InsertStringCommand" date="Tue Mar 15 22:13:15 EDT 2022" starttimestamp="1647394201042" timestamp="2594946" timestamp2="2594946">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1011" _type="InsertStringCommand" date="Tue Mar 15 22:13:16 EDT 2022" starttimestamp="1647394201042" timestamp="2595117" timestamp2="2595117">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1012" _type="InsertStringCommand" date="Tue Mar 15 22:13:16 EDT 2022" starttimestamp="1647394201042" timestamp="2595117" timestamp2="2595117">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1014" _type="InsertStringCommand" date="Tue Mar 15 22:13:16 EDT 2022" starttimestamp="1647394201042" timestamp="2595257" timestamp2="2595257">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1015" _type="InsertStringCommand" date="Tue Mar 15 22:13:16 EDT 2022" starttimestamp="1647394201042" timestamp="2595257" timestamp2="2595257">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1017" _type="InsertStringCommand" date="Tue Mar 15 22:13:16 EDT 2022" starttimestamp="1647394201042" timestamp="2595393" timestamp2="2595393">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1018" _type="InsertStringCommand" date="Tue Mar 15 22:13:16 EDT 2022" starttimestamp="1647394201042" timestamp="2595393" timestamp2="2595393">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1020" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:13:16 EDT 2022" starttimestamp="1647394201042" timestamp="2595805" />
  <Command __id="1021" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:13:16 EDT 2022" starttimestamp="1647394201042" timestamp="2595805" />
  <Command __id="1023" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:13:17 EDT 2022" starttimestamp="1647394201042" timestamp="2595965" />
  <Command __id="1024" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:13:17 EDT 2022" starttimestamp="1647394201042" timestamp="2595965" />
  <Command __id="1026" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:13:17 EDT 2022" starttimestamp="1647394201042" timestamp="2596108" />
  <Command __id="1027" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:13:17 EDT 2022" starttimestamp="1647394201042" timestamp="2596108" />
  <Command __id="1029" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:13:17 EDT 2022" starttimestamp="1647394201042" timestamp="2596276" />
  <Command __id="1030" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:13:17 EDT 2022" starttimestamp="1647394201042" timestamp="2596277" />
  <Command __id="1032" _type="InsertStringCommand" date="Tue Mar 15 22:13:18 EDT 2022" starttimestamp="1647394201042" timestamp="2597042" timestamp2="2597042">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1033" _type="InsertStringCommand" date="Tue Mar 15 22:13:18 EDT 2022" starttimestamp="1647394201042" timestamp="2597042" timestamp2="2597042">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1035" _type="InsertStringCommand" date="Tue Mar 15 22:13:18 EDT 2022" starttimestamp="1647394201042" timestamp="2597156" timestamp2="2597156">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1036" _type="InsertStringCommand" date="Tue Mar 15 22:13:18 EDT 2022" starttimestamp="1647394201042" timestamp="2597156" timestamp2="2597156">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1038" _type="InsertStringCommand" date="Tue Mar 15 22:13:18 EDT 2022" starttimestamp="1647394201042" timestamp="2597297" timestamp2="2597297">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1039" _type="InsertStringCommand" date="Tue Mar 15 22:13:18 EDT 2022" starttimestamp="1647394201042" timestamp="2597297" timestamp2="2597297">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1041" _type="InsertStringCommand" date="Tue Mar 15 22:13:18 EDT 2022" starttimestamp="1647394201042" timestamp="2597539" timestamp2="2597539">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1042" _type="InsertStringCommand" date="Tue Mar 15 22:13:18 EDT 2022" starttimestamp="1647394201042" timestamp="2597539" timestamp2="2597539">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1044" _type="InsertStringCommand" date="Tue Mar 15 22:13:18 EDT 2022" starttimestamp="1647394201042" timestamp="2597664" timestamp2="2597664">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1045" _type="InsertStringCommand" date="Tue Mar 15 22:13:18 EDT 2022" starttimestamp="1647394201042" timestamp="2597664" timestamp2="2597664">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1047" _type="InsertStringCommand" date="Tue Mar 15 22:13:18 EDT 2022" starttimestamp="1647394201042" timestamp="2597774" timestamp2="2597774">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1048" _type="InsertStringCommand" date="Tue Mar 15 22:13:18 EDT 2022" starttimestamp="1647394201042" timestamp="2597774" timestamp2="2597774">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1050" _type="InsertStringCommand" date="Tue Mar 15 22:13:18 EDT 2022" starttimestamp="1647394201042" timestamp="2597948" timestamp2="2597948">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1051" _type="InsertStringCommand" date="Tue Mar 15 22:13:18 EDT 2022" starttimestamp="1647394201042" timestamp="2597948" timestamp2="2597948">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1053" _type="InsertStringCommand" date="Tue Mar 15 22:13:19 EDT 2022" starttimestamp="1647394201042" timestamp="2598139" timestamp2="2598139">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1054" _type="InsertStringCommand" date="Tue Mar 15 22:13:19 EDT 2022" starttimestamp="1647394201042" timestamp="2598139" timestamp2="2598139">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1056" _type="InsertStringCommand" date="Tue Mar 15 22:13:19 EDT 2022" starttimestamp="1647394201042" timestamp="2598199" timestamp2="2598199">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1057" _type="InsertStringCommand" date="Tue Mar 15 22:13:19 EDT 2022" starttimestamp="1647394201042" timestamp="2598199" timestamp2="2598199">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1058" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 22:13:19 EDT 2022" starttimestamp="1647394201042" timestamp="2598868" />
  <Command __id="1059" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:13:19 EDT 2022" starttimestamp="1647394201042" timestamp="2598953" />
  <Command __id="1060" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:13:20 EDT 2022" starttimestamp="1647394201042" timestamp="2598980" />
  <Command __id="1061" _type="MoveCaretCommand" caretOffset="327" date="Tue Mar 15 22:13:20 EDT 2022" docOffset="1022" starttimestamp="1647394201042" timestamp="2599684" />
  <Command __id="1062" _type="MoveCaretCommand" caretOffset="327" date="Tue Mar 15 22:13:20 EDT 2022" docOffset="1022" starttimestamp="1647394201042" timestamp="2599684" />
  <Command __id="1064" _type="PauseCommand" date="Tue Mar 15 22:13:36 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="2615614">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[15930]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1065" _type="MoveCaretCommand" caretOffset="3161" date="Tue Mar 15 22:13:36 EDT 2022" docOffset="3923" starttimestamp="1647394201042" timestamp="2615910" />
  <Command __id="1067" _type="PauseCommand" date="Tue Mar 15 22:13:38 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2617817">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1907]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1068" _type="MoveCaretCommand" caretOffset="327" date="Tue Mar 15 22:13:39 EDT 2022" docOffset="1022" starttimestamp="1647394201042" timestamp="2618229" />
  <Command __id="1070" _type="PauseCommand" date="Tue Mar 15 22:13:41 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2620840">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2611]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1071" _type="MoveCaretCommand" caretOffset="3161" date="Tue Mar 15 22:13:41 EDT 2022" docOffset="3923" starttimestamp="1647394201042" timestamp="2620901" />
  <Command __id="1073" _type="PauseCommand" date="Tue Mar 15 22:14:12 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="2651430">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[30529]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1074" _type="MoveCaretCommand" caretOffset="327" date="Tue Mar 15 22:14:12 EDT 2022" docOffset="1022" starttimestamp="1647394201042" timestamp="2651802" />
  <Command __id="1076" _type="PauseCommand" date="Tue Mar 15 22:14:22 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="2661194">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9392]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1077" _type="MoveCaretCommand" caretOffset="3161" date="Tue Mar 15 22:14:22 EDT 2022" docOffset="3923" starttimestamp="1647394201042" timestamp="2661261" />
  <Command __id="1079" _type="PauseCommand" date="Tue Mar 15 22:15:25 EDT 2022" range="1m-2m" starttimestamp="1647394201042" timestamp="2724560">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[63299]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1080" _type="MoveCaretCommand" caretOffset="327" date="Tue Mar 15 22:15:25 EDT 2022" docOffset="1022" starttimestamp="1647394201042" timestamp="2724637" />
  <Command __id="1082" _type="PauseCommand" date="Tue Mar 15 22:15:28 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2727234">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2597]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1083" _type="MoveCaretCommand" caretOffset="3161" date="Tue Mar 15 22:15:28 EDT 2022" docOffset="3923" starttimestamp="1647394201042" timestamp="2727297" />
  <Command __id="1085" _type="PauseCommand" date="Tue Mar 15 22:15:35 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="2734922">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7625]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1086" _type="MoveCaretCommand" caretOffset="327" date="Tue Mar 15 22:15:36 EDT 2022" docOffset="1022" starttimestamp="1647394201042" timestamp="2734984" />
  <Command __id="1088" _type="PauseCommand" date="Tue Mar 15 22:15:56 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="2755223">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[20238]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1089" _type="MoveCaretCommand" caretOffset="3161" date="Tue Mar 15 22:15:56 EDT 2022" docOffset="3923" starttimestamp="1647394201042" timestamp="2755284" />
  <Command __id="1091" _type="PauseCommand" date="Tue Mar 15 22:16:07 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="2766680">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11396]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1090" _type="SelectTextCommand" caretOffset="4885" date="Tue Mar 15 22:16:07 EDT 2022" end="5051" start="4885" starttimestamp="1647394201042" timestamp="2766680" />
  <Command __id="1092" _type="MoveCaretCommand" caretOffset="4955" date="Tue Mar 15 22:16:08 EDT 2022" docOffset="5717" starttimestamp="1647394201042" timestamp="2767026" />
  <Command __id="1094" _type="PauseCommand" date="Tue Mar 15 22:16:10 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2769307">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2281]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1093" _type="SelectTextCommand" caretOffset="4943" date="Tue Mar 15 22:16:10 EDT 2022" end="5054" start="4943" starttimestamp="1647394201042" timestamp="2769307" />
  <Command __id="1095" _type="MoveCaretCommand" caretOffset="5047" date="Tue Mar 15 22:16:10 EDT 2022" docOffset="5809" starttimestamp="1647394201042" timestamp="2769577" />
  <Command __id="1097" _type="PauseCommand" date="Tue Mar 15 22:16:12 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2771041">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1464]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1096" _type="SelectTextCommand" caretOffset="4727" date="Tue Mar 15 22:16:12 EDT 2022" end="5051" start="4727" starttimestamp="1647394201042" timestamp="2771041" />
  <Command __id="1099" _type="CutCommand" date="Tue Mar 15 22:16:12 EDT 2022" starttimestamp="1647394201042" timestamp="2771879" />
  <DocumentChange __id="957" _type="Delete" date="Tue Mar 15 22:10:20 EDT 2022" docASTNodeCount="1627" docActiveCodeLength="11190" docExpressionCount="995" docLength="11205" endLine="182" length="7" offset="6961" repeat="2" startLine="182" starttimestamp="1647394201042" timestamp="2419170" timestamp2="2419671">
    <text><![CDATA[ static]]></text>
  </DocumentChange>
  <Command __id="966" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:10:30 EDT 2022" docASTNodeCount="1429" docActiveCodeLength="10186" docExpressionCount="889" docLength="10186" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2429089">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\TokenCounterModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.main;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, Integer> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<SlaveInterface> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<SlaveInterface> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public TokenCounterModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶            System.out.println(unassignedSlaves.capacity());¶            System.out.println(unassignedClients.capacity());¶            System.out.println("################################");¶            for (int i = 0; i < 2; i++) {¶            	¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        MapperInterface<String, Integer> mapper = new Mapper();¶        for (String token: tokens) {¶            KeyValueInterface<String, Integer> keyValue = mapper.map(token);¶            this.produceBoundedBuffer(keyValue);¶        }¶        this.endEnqueue();¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, Integer> oldResult = this.result;¶        this.result = new HashMap<>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final Integer value = keyValues.getValue();¶                if (this.result.containsKey(key)) {¶                	final int oldValue = result.get(key);¶                	final int newValue = oldValue+value;¶                	this.result.put(key, newValue);¶                } else {¶                	this.result.put(key, value);¶                }¶            }¶        }¶        this.traceRemoteResult("), Diff(INSERT,"this."), Diff(EQUAL,"result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, Integer> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            Slave slave = new Slave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof TokenCounterModel)) {¶            return false;¶        }¶        TokenCounterModel otherCounter = (TokenCounterModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package comp533.main;

import comp533.barrier.BarrierInterface;
import comp533.barrier.Barrier;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.keyValue.KeyValue;
import comp533.joiner.Joiner;
import comp533.mapper.MapperInterface;
import comp533.mapper.Mapper;
import comp533.slave.SlaveInterface;
import comp533.slave.Slave;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

import java.rmi.RemoteException;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {
    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
    private Map<String, Integer> result;
    private int numThreads;
    private List<Thread> threads;
    private List<SlaveInterface> slaves;
    private String inputString;
    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;
    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;
    private JoinerInterface joiner;
    private BarrierInterface barrier;
    private List<ClientInterface> registeredClients;
    private Stack<SlaveInterface> unassignedSlaves;
    private Stack<ClientInterface> unassignedClients;


    public TokenCounterModel() {
        this.inputString = null;
        this.numThreads = 0;
        this.reductionQueueList = new ArrayList<>();
        this.slaves = new ArrayList<>();
        this.registeredClients = new ArrayList<>();
        this.unassignedSlaves = new Stack<>();
        this.unassignedClients = new Stack<>();
    }

    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        this.pcs.addPropertyChangeListener(listener);
    }

    public String getInputString() {
        return this.inputString;
    }

    public void matchSlavesToClients() {
        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {
        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
            System.out.println(unassignedSlaves.capacity());
            System.out.println(unassignedClients.capacity());
            System.out.println("################################");
            for (int i = 0; i < 2; i++) {
            	
                
            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();
                ClientInterface unassignedClient = this.unassignedClients.pop();
            	
                unassignedSlave.setClient(unassignedClient);
            }
            
        } else {
        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        }
    }

    private void clearReductionQueues() {
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void unblockSlaveThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            SlaveInterface currentSlave = this.slaves.get(i);
            currentSlave.notifySlave();
        }
    }

    private void initializeStructures() {
        this.result = new HashMap<>();
        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {
        this.traceEnqueueRequest(keyValue);
        this.boundedBuffer.put(keyValue);
        this.traceEnqueue(this.boundedBuffer);
    }

    private void endEnqueue() {
        try {
            for (int i = 0; i < this.numThreads; i++) {
                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);
                this.traceEnqueueRequest(endKeyValue);
                this.boundedBuffer.put(endKeyValue);
            }
        } catch (InterruptedException ex) {
            Tracer.error(ex.getMessage());
        }
    }

    private void startThreads() {
        for (Thread currentThread: this.threads) {
            if (currentThread.getState() == Thread.State.NEW) {
                currentThread.start();
            }
        }
    }

    private void problemSplit() throws InterruptedException {
        String[] tokens = this.inputString.split(" ");
        MapperInterface<String, Integer> mapper = new Mapper();
        for (String token: tokens) {
            KeyValueInterface<String, Integer> keyValue = mapper.map(token);
            this.produceBoundedBuffer(keyValue);
        }
        this.endEnqueue();
    }

    private void mergeIntermediaryResults(ViewInterface view) {
        Map<String, Integer> oldResult = this.result;
        this.result = new HashMap<>();
        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {
            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {
            	final String key = keyValues.getKey();
                final Integer value = keyValues.getValue();
                if (this.result.containsKey(key)) {
                	final int oldValue = result.get(key);
                	final int newValue = oldValue+value;
                	this.result.put(key, newValue);
                } else {
                	this.result.put(key, value);
                }
            }
        }
        this.traceRemoteResult(this.result);
        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",
                oldResult, this.result);
        this.pcs.firePropertyChange(updateResultEvent);
        view.propertyChange(updateResultEvent);
    }

    private void updateResult(ViewInterface view) throws InterruptedException {
        this.initializeStructures();
        this.clearReductionQueues();
        this.startThreads();
        this.unblockSlaveThreads();
        this.problemSplit();
        this.joiner.join();
        this.mergeIntermediaryResults(view);
    }

    public void setInputString(String newInputString, ViewInterface view) {
        try {
            String oldInputString = this.inputString;
            this.inputString = newInputString;
            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",
                    oldInputString, newInputString);
            this.pcs.firePropertyChange(updateInputStringEvent);
            view.propertyChange(updateInputStringEvent);
            this.updateResult(view);
        } catch (InterruptedException ex) {
            Tracer.error(Arrays.toString(ex.getStackTrace()));
        }
    }

    public int getNumThreads() {
        return this.numThreads;
    }

    public BarrierInterface getBarrier() {
        return this.barrier;
    }

    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {
        return this.boundedBuffer;
    }

    public JoinerInterface getJoiner() {
        return this.joiner;
    }

    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {
        return this.reductionQueueList;
    }

    public Map<String, Integer> getResult() {
        return this.result;
    }

    public void updateThreads() {
        List<Thread> oldThreads = this.threads;
        this.joiner = new Joiner(this.numThreads);
        this.barrier = new Barrier(this.numThreads);
        this.threads = new ArrayList<>(this.numThreads);
        for (int i = 0; i < this.numThreads; i++) {
            Slave slave = new Slave(i, this);
            this.slaves.add(slave);
            this.unassignedSlaves.add(slave);
            Thread newThread = new Thread(slave, "Slave" + i);
            this.threads.add(newThread);
            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();
            this.reductionQueueList.add(reductionQueue);
        }
        this.matchSlavesToClients();
        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",
                oldThreads, this.threads);
        this.pcs.firePropertyChange(updateThreadsEvent);
    }

    public void registerClient(ClientInterface clientToRegister) {
        this.traceRegister(clientToRegister);
        this.unassignedClients.add(clientToRegister);
        this.registeredClients.add(clientToRegister);
    }

    public void callClientQuit() throws RemoteException {
        for (ClientInterface registeredClient: registeredClients) {
            registeredClient.quit();
        }
    }

    public void interruptThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            this.slaves.get(i).signalQuit();
            this.threads.get(i).interrupt();
        }
    }

    public void setNumThreads(int numThreads, ViewInterface view) {
        int oldNumThreads = this.numThreads;
        this.numThreads = numThreads;
        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",
                oldNumThreads, numThreads);
        this.pcs.firePropertyChange(setNumThreadsEvent);
        this.updateThreads();
    }

    @Override
    public String toString() {
        return AMapReduceTracer.MODEL;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof TokenCounterModel)) {
            return false;
        }
        TokenCounterModel otherCounter = (TokenCounterModel) obj;
        return this.getResult() == otherCounter.getResult();
    }
}
]]></snapshot>
  </Command>
  <Command __id="969" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:11:39 EDT 2022" docASTNodeCount="1627" docActiveCodeLength="11190" docExpressionCount="995" docLength="11205" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2498634">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.RemoteModel;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.main.ModelInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    /**¶	 * ¶	 */¶	private static final long serialVersionUID = 1L;¶	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, List<String>> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<FacebookSlave> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<FacebookSlave> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public FacebookModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶            ¶            for (int i = 0; i < 2; i++) {¶            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶                System.out.println(unassignedSlaves);¶                System.out.println(unassignedClients);¶                System.out.println("################################");¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        FacebookMapper mapper = new FacebookMapper();¶        for (String token: tokens) {¶        	String[] all = token.split(",");¶        	String user = all[0];¶        	String[] friends = Arrays.copyOfRange(all, 1, all.length);¶        	Arrays.sort(friends);¶        	KeyValueInterface<String, List<String>> keyValue;¶        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");¶        	this.traceRemoteList(friends);¶        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");¶        	for (String friend: friends) {¶        		keyValue = mapper.map(token, user, friend, friends);¶        		this.produceBoundedBuffer(keyValue);¶     ¶            }¶            ¶        }¶        this.endEnqueue();¶        ¶¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, List<String>> oldResult = this.result;¶        this.result = new HashMap<>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final List<String> value = keyValues.getValue();¶                if (this.result.get(key) == null) {¶                	this.result.put(key, value);¶                } else {¶                    final List<String> current = this.result.get(key);¶                    ¶    				final List<String> newValue = intersection(current, value);¶    				this.result.put(key, newValue);¶                }¶            }¶        }¶        this.traceRemoteResult("), Diff(INSERT,"this."), Diff(EQUAL,"result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    public "), Diff(DELETE,"static "), Diff(EQUAL,"<T> List<T> intersection(List<T> list1, List<T> list2) {¶        List<T> list = new ArrayList<T>();¶¶        for (T t : list1) {¶            if(list2.contains(t)) {¶                list.add(t);¶            }¶        }¶¶        return list;¶    }¶    ¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, List<String>> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            FacebookSlave slave = new FacebookSlave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof FacebookModel)) {¶            return false;¶        }¶        FacebookModel otherCounter = (FacebookModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package facebook;

import comp533.barrier.BarrierInterface;
import comp533.barrier.Barrier;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.main.RemoteModel;
import comp533.keyValue.KeyValue;
import comp533.joiner.Joiner;
import comp533.mapper.MapperInterface;
import comp533.main.ModelInterface;
import comp533.mapper.Mapper;
import comp533.slave.SlaveInterface;
import comp533.slave.Slave;
import comp533.view.ViewInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

import java.rmi.RemoteException;
import java.util.*;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class FacebookModel extends AMapReduceTracer implements ModelInterface, RemoteModel {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
    private Map<String, List<String>> result;
    private int numThreads;
    private List<Thread> threads;
    private List<FacebookSlave> slaves;
    private String inputString;
    private ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer;
    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList;
    private JoinerInterface joiner;
    private BarrierInterface barrier;
    private List<ClientInterface> registeredClients;
    private Stack<FacebookSlave> unassignedSlaves;
    private Stack<ClientInterface> unassignedClients;


    public FacebookModel() {
        this.inputString = null;
        this.numThreads = 0;
        this.reductionQueueList = new ArrayList<>();
        this.slaves = new ArrayList<>();
        this.registeredClients = new ArrayList<>();
        this.unassignedSlaves = new Stack<>();
        this.unassignedClients = new Stack<>();
    }

    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        this.pcs.addPropertyChangeListener(listener);
    }

    public String getInputString() {
        return this.inputString;
    }

    public void matchSlavesToClients() {
        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {
            
            for (int i = 0; i < 2; i++) {
            	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
                System.out.println(unassignedSlaves);
                System.out.println(unassignedClients);
                System.out.println("################################");
                
            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();
                ClientInterface unassignedClient = this.unassignedClients.pop();
            	
                unassignedSlave.setClient(unassignedClient);
            }
            
        } else {
        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
        }
    }

    private void clearReductionQueues() {
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void unblockSlaveThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            SlaveInterface currentSlave = this.slaves.get(i);
            currentSlave.notifySlave();
        }
    }

    private void initializeStructures() {
        this.result = new HashMap<>();
        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue: this.reductionQueueList) {
            reductionQueue.clear();
        }
    }

    private void produceBoundedBuffer(KeyValueInterface<String, List<String>> keyValue) throws InterruptedException {
        this.traceEnqueueRequest(keyValue);
        this.boundedBuffer.put(keyValue);
        this.traceEnqueue(this.boundedBuffer);
    }

    private void endEnqueue() {
        try {
            for (int i = 0; i < this.numThreads; i++) {
                KeyValueInterface<String, List<String>> endKeyValue = new KeyValue<>(null, null);
                this.traceEnqueueRequest(endKeyValue);
                this.boundedBuffer.put(endKeyValue);
            }
        } catch (InterruptedException ex) {
            Tracer.error(ex.getMessage());
        }
    }

    private void startThreads() {
        for (Thread currentThread: this.threads) {
            if (currentThread.getState() == Thread.State.NEW) {
                currentThread.start();
            }
        }
    }

    private void problemSplit() throws InterruptedException {
        String[] tokens = this.inputString.split(" ");
        FacebookMapper mapper = new FacebookMapper();
        for (String token: tokens) {
        	String[] all = token.split(",");
        	String user = all[0];
        	String[] friends = Arrays.copyOfRange(all, 1, all.length);
        	Arrays.sort(friends);
        	KeyValueInterface<String, List<String>> keyValue;
        	System.out.println("()()()()()()()()()()(()(())(()())()()(())(()()(");
        	this.traceRemoteList(friends);
        	System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++");
        	for (String friend: friends) {
        		keyValue = mapper.map(token, user, friend, friends);
        		this.produceBoundedBuffer(keyValue);
     
            }
            
        }
        this.endEnqueue();
        

    }

    private void mergeIntermediaryResults(ViewInterface view) {
        Map<String, List<String>> oldResult = this.result;
        this.result = new HashMap<>();
        for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : this.reductionQueueList) {
            for (KeyValueInterface<String, List<String>> keyValues: reductionQueue) {
            	final String key = keyValues.getKey();
                final List<String> value = keyValues.getValue();
                if (this.result.get(key) == null) {
                	this.result.put(key, value);
                } else {
                    final List<String> current = this.result.get(key);
                    
    				final List<String> newValue = intersection(current, value);
    				this.result.put(key, newValue);
                }
            }
        }
        this.traceRemoteResult(this.result);
        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",
                oldResult, this.result);
        this.pcs.firePropertyChange(updateResultEvent);
        view.propertyChange(updateResultEvent);
    }

    public <T> List<T> intersection(List<T> list1, List<T> list2) {
        List<T> list = new ArrayList<T>();

        for (T t : list1) {
            if(list2.contains(t)) {
                list.add(t);
            }
        }

        return list;
    }
    
    private void updateResult(ViewInterface view) throws InterruptedException {
        this.initializeStructures();
        this.clearReductionQueues();
        this.startThreads();
        this.unblockSlaveThreads();
        this.problemSplit();
        this.joiner.join();
        this.mergeIntermediaryResults(view);
    }

    public void setInputString(String newInputString, ViewInterface view) {
        try {
            String oldInputString = this.inputString;
            this.inputString = newInputString;
            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",
                    oldInputString, newInputString);
            this.pcs.firePropertyChange(updateInputStringEvent);
            view.propertyChange(updateInputStringEvent);
            this.updateResult(view);
        } catch (InterruptedException ex) {
            Tracer.error(Arrays.toString(ex.getStackTrace()));
        }
    }

    public int getNumThreads() {
        return this.numThreads;
    }

    public BarrierInterface getBarrier() {
        return this.barrier;
    }

    public ArrayBlockingQueue<KeyValueInterface<String, List<String>>> getBoundedBuffer() {
        return this.boundedBuffer;
    }

    public JoinerInterface getJoiner() {
        return this.joiner;
    }

    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> getReductionQueueList() {
        return this.reductionQueueList;
    }

    public Map<String, List<String>> getResult() {
        return this.result;
    }

    public void updateThreads() {
        List<Thread> oldThreads = this.threads;
        this.joiner = new Joiner(this.numThreads);
        this.barrier = new Barrier(this.numThreads);
        this.threads = new ArrayList<>(this.numThreads);
        for (int i = 0; i < this.numThreads; i++) {
            FacebookSlave slave = new FacebookSlave(i, this);
            this.slaves.add(slave);
            this.unassignedSlaves.add(slave);
            Thread newThread = new Thread(slave, "Slave" + i);
            this.threads.add(newThread);
            ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue = new ConcurrentLinkedQueue<>();
            this.reductionQueueList.add(reductionQueue);
        }
        this.matchSlavesToClients();
        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",
                oldThreads, this.threads);
        this.pcs.firePropertyChange(updateThreadsEvent);
    }

    public void registerClient(ClientInterface clientToRegister) {
        this.traceRegister(clientToRegister);
        this.unassignedClients.add(clientToRegister);
        this.registeredClients.add(clientToRegister);
    }

    public void callClientQuit() throws RemoteException {
        for (ClientInterface registeredClient: registeredClients) {
            registeredClient.quit();
        }
    }

    public void interruptThreads() {
        for (int i = 0; i < this.numThreads; i++) {
            this.slaves.get(i).signalQuit();
            this.threads.get(i).interrupt();
        }
    }

    public void setNumThreads(int numThreads, ViewInterface view) {
        int oldNumThreads = this.numThreads;
        this.numThreads = numThreads;
        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",
                oldNumThreads, numThreads);
        this.pcs.firePropertyChange(setNumThreadsEvent);
        this.updateThreads();
    }

    @Override
    public String toString() {
        return AMapReduceTracer.MODEL;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof FacebookModel)) {
            return false;
        }
        FacebookModel otherCounter = (FacebookModel) obj;
        return this.getResult() == otherCounter.getResult();
    }
}
]]></snapshot>
  </Command>
  <Command __id="972" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:11:43 EDT 2022" docASTNodeCount="1429" docActiveCodeLength="10186" docExpressionCount="889" docLength="10186" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2502886">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\TokenCounterModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.main;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, Integer> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<SlaveInterface> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<SlaveInterface> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public TokenCounterModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶            System.out.println(unassignedSlaves.capacity());¶            System.out.println(unassignedClients.capacity());¶            System.out.println("################################");¶            for (int i = 0; i < 2; i++) {¶            	¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        MapperInterface<String, Integer> mapper = new Mapper();¶        for (String token: tokens) {¶            KeyValueInterface<String, Integer> keyValue = mapper.map(token);¶            this.produceBoundedBuffer(keyValue);¶        }¶        this.endEnqueue();¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, Integer> oldResult = this.result;¶        this.result = new HashMap<>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final Integer value = keyValues.getValue();¶                if (this.result.containsKey(key)) {¶                	final int oldValue = result.get(key);¶                	final int newValue = oldValue+value;¶                	this.result.put(key, newValue);¶                } else {¶                	this.result.put(key, value);¶                }¶            }¶        }¶        this.traceRemoteResult(this.result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, Integer> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            Slave slave = new Slave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof TokenCounterModel)) {¶            return false;¶        }¶        TokenCounterModel otherCounter = (TokenCounterModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="975" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:12:56 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5214" docExpressionCount="468" docLength="5214" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2575776">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\slave\Slave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.slave;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class Slave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private ClientInterface client;¶    private List<KeyValueInterface<String, Integer>> keyValueList;¶    private ModelInterface counter;¶¶    public Slave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, Integer> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer, List<KeyValueInterface<String, Integer>> keyValuePairs) {¶        try {¶            this.traceRemoteList(keyValuePairs);¶            return this.client.reduce(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> splitReduction(Map<String, Integer> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reduceQueueList = this.counter.getReductionQueueList();¶        Partitioner partitioner = PartitionerFactory.getPartitioner();¶        for (Map.Entry<String, Integer> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            Integer value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, Integer> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶    public void setClient(ClientInterface client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, Integer> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, Integer>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="978" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:12:58 EDT 2022" docASTNodeCount="1429" docActiveCodeLength="10186" docExpressionCount="889" docLength="10186" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2577476">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\TokenCounterModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.main;¶¶import comp533.barrier.BarrierInterface;¶import comp533.barrier.Barrier;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.keyValue.KeyValue;¶import comp533.joiner.Joiner;¶import comp533.mapper.MapperInterface;¶import comp533.mapper.Mapper;¶import comp533.slave.SlaveInterface;¶import comp533.slave.Slave;¶import comp533.view.ViewInterface;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶import java.rmi.RemoteException;¶import java.util.*;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class TokenCounterModel extends AMapReduceTracer implements ModelInterface, RemoteModel {¶    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);¶    private Map<String, Integer> result;¶    private int numThreads;¶    private List<Thread> threads;¶    private List<SlaveInterface> slaves;¶    private String inputString;¶    private ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer;¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList;¶    private JoinerInterface joiner;¶    private BarrierInterface barrier;¶    private List<ClientInterface> registeredClients;¶    private Stack<SlaveInterface> unassignedSlaves;¶    private Stack<ClientInterface> unassignedClients;¶¶¶    public TokenCounterModel() {¶        this.inputString = null;¶        this.numThreads = 0;¶        this.reductionQueueList = new ArrayList<>();¶        this.slaves = new ArrayList<>();¶        this.registeredClients = new ArrayList<>();¶        this.unassignedSlaves = new Stack<>();¶        this.unassignedClients = new Stack<>();¶    }¶¶    @Override¶    public void addPropertyChangeListener(PropertyChangeListener listener) {¶        this.pcs.addPropertyChangeListener(listener);¶    }¶¶    public String getInputString() {¶        return this.inputString;¶    }¶¶    public void matchSlavesToClients() {¶        if (!this.unassignedSlaves.isEmpty() && !this.unassignedClients.isEmpty()) {¶        	System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");¶            System.out.println(unassignedSlaves.capacity());¶            System.out.println(unassignedClients.capacity());¶            System.out.println("################################");¶            for (int i = 0; i < 2; i++) {¶            	¶                ¶            	SlaveInterface unassignedSlave = this.unassignedSlaves.pop();¶                ClientInterface unassignedClient = this.unassignedClients.pop();¶            	¶                unassignedSlave.setClient(unassignedClient);¶            }¶            ¶        } else {¶        	System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");¶        }¶    }¶¶    private void clearReductionQueues() {¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void unblockSlaveThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            SlaveInterface currentSlave = this.slaves.get(i);¶            currentSlave.notifySlave();¶        }¶    }¶¶    private void initializeStructures() {¶        this.result = new HashMap<>();¶        this.boundedBuffer = new ArrayBlockingQueue<>(this.BUFFER_SIZE);¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue: this.reductionQueueList) {¶            reductionQueue.clear();¶        }¶    }¶¶    private void produceBoundedBuffer(KeyValueInterface<String, Integer> keyValue) throws InterruptedException {¶        this.traceEnqueueRequest(keyValue);¶        this.boundedBuffer.put(keyValue);¶        this.traceEnqueue(this.boundedBuffer);¶    }¶¶    private void endEnqueue() {¶        try {¶            for (int i = 0; i < this.numThreads; i++) {¶                KeyValueInterface<String, Integer> endKeyValue = new KeyValue<>(null, null);¶                this.traceEnqueueRequest(endKeyValue);¶                this.boundedBuffer.put(endKeyValue);¶            }¶        } catch (InterruptedException ex) {¶            Tracer.error(ex.getMessage());¶        }¶    }¶¶    private void startThreads() {¶        for (Thread currentThread: this.threads) {¶            if (currentThread.getState() == Thread.State.NEW) {¶                currentThread.start();¶            }¶        }¶    }¶¶    private void problemSplit() throws InterruptedException {¶        String[] tokens = this.inputString.split(" ");¶        MapperInterface<String, Integer> mapper = new Mapper();¶        for (String token: tokens) {¶            KeyValueInterface<String, Integer> keyValue = mapper.map(token);¶            this.produceBoundedBuffer(keyValue);¶        }¶        this.endEnqueue();¶    }¶¶    private void mergeIntermediaryResults(ViewInterface view) {¶        Map<String, Integer> oldResult = this.result;¶        this.result = new HashMap<>();¶        for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : this.reductionQueueList) {¶            for (KeyValueInterface<String, Integer> keyValues: reductionQueue) {¶            	final String key = keyValues.getKey();¶                final Integer value = keyValues.getValue();¶                if (this.result.containsKey(key)) {¶                	final int oldValue = result.get(key);¶                	final int newValue = oldValue+value;¶                	this.result.put(key, newValue);¶                } else {¶                	this.result.put(key, value);¶                }¶            }¶        }¶        this.traceRemoteResult(this.result);¶        PropertyChangeEvent updateResultEvent = new PropertyChangeEvent(this, "Result",¶                oldResult, this.result);¶        this.pcs.firePropertyChange(updateResultEvent);¶        view.propertyChange(updateResultEvent);¶    }¶¶    private void updateResult(ViewInterface view) throws InterruptedException {¶        this.initializeStructures();¶        this.clearReductionQueues();¶        this.startThreads();¶        this.unblockSlaveThreads();¶        this.problemSplit();¶        this.joiner.join();¶        this.mergeIntermediaryResults(view);¶    }¶¶    public void setInputString(String newInputString, ViewInterface view) {¶        try {¶            String oldInputString = this.inputString;¶            this.inputString = newInputString;¶            PropertyChangeEvent updateInputStringEvent = new PropertyChangeEvent(this, "InputString",¶                    oldInputString, newInputString);¶            this.pcs.firePropertyChange(updateInputStringEvent);¶            view.propertyChange(updateInputStringEvent);¶            this.updateResult(view);¶        } catch (InterruptedException ex) {¶            Tracer.error(Arrays.toString(ex.getStackTrace()));¶        }¶    }¶¶    public int getNumThreads() {¶        return this.numThreads;¶    }¶¶    public BarrierInterface getBarrier() {¶        return this.barrier;¶    }¶¶    public ArrayBlockingQueue<KeyValueInterface<String, Integer>> getBoundedBuffer() {¶        return this.boundedBuffer;¶    }¶¶    public JoinerInterface getJoiner() {¶        return this.joiner;¶    }¶¶    public ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> getReductionQueueList() {¶        return this.reductionQueueList;¶    }¶¶    public Map<String, Integer> getResult() {¶        return this.result;¶    }¶¶    public void updateThreads() {¶        List<Thread> oldThreads = this.threads;¶        this.joiner = new Joiner(this.numThreads);¶        this.barrier = new Barrier(this.numThreads);¶        this.threads = new ArrayList<>(this.numThreads);¶        for (int i = 0; i < this.numThreads; i++) {¶            Slave slave = new Slave(i, this);¶            this.slaves.add(slave);¶            this.unassignedSlaves.add(slave);¶            Thread newThread = new Thread(slave, "Slave" + i);¶            this.threads.add(newThread);¶            ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue = new ConcurrentLinkedQueue<>();¶            this.reductionQueueList.add(reductionQueue);¶        }¶        this.matchSlavesToClients();¶        PropertyChangeEvent updateThreadsEvent = new PropertyChangeEvent(this, "Threads",¶                oldThreads, this.threads);¶        this.pcs.firePropertyChange(updateThreadsEvent);¶    }¶¶    public void registerClient(ClientInterface clientToRegister) {¶        this.traceRegister(clientToRegister);¶        this.unassignedClients.add(clientToRegister);¶        this.registeredClients.add(clientToRegister);¶    }¶¶    public void callClientQuit() throws RemoteException {¶        for (ClientInterface registeredClient: registeredClients) {¶            registeredClient.quit();¶        }¶    }¶¶    public void interruptThreads() {¶        for (int i = 0; i < this.numThreads; i++) {¶            this.slaves.get(i).signalQuit();¶            this.threads.get(i).interrupt();¶        }¶    }¶¶    public void setNumThreads(int numThreads, ViewInterface view) {¶        int oldNumThreads = this.numThreads;¶        this.numThreads = numThreads;¶        PropertyChangeEvent setNumThreadsEvent = new PropertyChangeEvent(this, "NumThreads",¶                oldNumThreads, numThreads);¶        this.pcs.firePropertyChange(setNumThreadsEvent);¶        this.updateThreads();¶    }¶¶    @Override¶    public String toString() {¶        return AMapReduceTracer.MODEL;¶    }¶¶    @Override¶    public boolean equals(Object obj) {¶        if (!(obj instanceof TokenCounterModel)) {¶            return false;¶        }¶        TokenCounterModel otherCounter = (TokenCounterModel) obj;¶        return this.getResult() == otherCounter.getResult();¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="984" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:12:59 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5214" docExpressionCount="468" docLength="5214" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2578931">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\slave\Slave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.slave;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class Slave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private ClientInterface client;¶    private List<KeyValueInterface<String, Integer>> keyValueList;¶    private ModelInterface counter;¶¶    public Slave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, Integer> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer, List<KeyValueInterface<String, Integer>> keyValuePairs) {¶        try {¶            this.traceRemoteList(keyValuePairs);¶            return this.client.reduce(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> splitReduction(Map<String, Integer> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reduceQueueList = this.counter.getReductionQueueList();¶        Partitioner partitioner = PartitionerFactory.getPartitioner();¶        for (Map.Entry<String, Integer> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            Integer value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, Integer> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶    public void setClient(ClientInterface client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, Integer> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, Integer>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="986" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:13:02 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5750" docExpressionCount="518" docLength="5818" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2581894">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookSlave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.slave.SlaveInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Map.Entry;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private RemoteClientFacebookMapReduce client;¶    private List<KeyValueInterface<String, List<String>>> keyValueList;¶    private ModelInterface counter;¶¶    public FacebookSlave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, List<String>> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {¶        try {¶        	System.out.println("slave3333333333333333333333333333");¶            this.traceRemoteList(keyValuePairs);¶            System.out.println("slave44444444444444444444444444444");¶            return this.client.reduceNew(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();¶        FacebookPartitioner partitioner = new FacebookPartitioner();¶        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            List<String> value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶"), Diff(DELETE,"    @Override"), Diff(EQUAL,"¶    public void setClient("), Diff(DELETE,"ClientInterfa"), Diff(INSERT,"RemoteClientFacebookMapRedu"), Diff(EQUAL,"ce client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client ="), Diff(DELETE," (RemoteClientFacebookMapReduce)"), Diff(EQUAL," client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        FacebookReducer reducer = new FacebookReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶¶	@Override¶	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,¶			List<KeyValueInterface<String, Integer>> keyValuePairs) {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶"), Diff(DELETE,"//"), Diff(EQUAL,"	@Override¶"), Diff(DELETE,"//"), Diff(EQUAL,"	public void setClient(ClientInterface client) {¶"), Diff(DELETE,"//"), Diff(EQUAL,"		// TODO Auto-generated method stub¶"), Diff(DELETE,"//"), Diff(EQUAL,"		¶"), Diff(DELETE,"//"), Diff(EQUAL,"	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package facebook;

import comp533.barrier.BarrierInterface;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.main.ModelInterface;
import comp533.keyValue.KeyValue;
import comp533.partitioner.Partitioner;
import comp533.partitioner.PartitionerFactory;
import comp533.reducer.ReducerInterface;
import comp533.slave.SlaveInterface;
import comp533.reducer.ReducerFactory;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {
    private int threadId;
    private RemoteClientFacebookMapReduce client;
    private List<KeyValueInterface<String, List<String>>> keyValueList;
    private ModelInterface counter;

    public FacebookSlave(int threadId, ModelInterface counter) {
        this.threadId = threadId;
        this.counter = counter;
        this.keyValueList = new ArrayList<>();
    }

    public synchronized void notifySlave() {
        this.synchronizedNotify();
    }

    public void splitBoundedBuffer() throws InterruptedException {
        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();
        KeyValueInterface<String, List<String>> consumedItem = null;
        while(consumedItem == null || consumedItem.getKey() != null) {
            this.traceDequeueRequest(boundedBuffer);
            consumedItem = boundedBuffer.take();
            this.traceDequeue(consumedItem);
            if (consumedItem.getKey() != null) {
                this.keyValueList.add(consumedItem);
            }
        }
    }

    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {
        try {
        	System.out.println("slave3333333333333333333333333333");
            this.traceRemoteList(keyValuePairs);
            System.out.println("slave44444444444444444444444444444");
            return this.client.reduceNew(keyValuePairs);
        } catch (RemoteException | NullPointerException ex) {
            return reducer.reduce(keyValuePairs);
        }

    }

    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {
        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();
        FacebookPartitioner partitioner = new FacebookPartitioner();
        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {
            String key = entry.getKey();
            List<String> value = entry.getValue();
            if (key == null) {
                break;
            }
            int numOfPartitions = reduceQueueList.size();
            int index = partitioner.getPartition(key, value, numOfPartitions);
            this.tracePartitionAssigned(key, value, index, numOfPartitions);
            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);
            reduceQueueList.get(index).add(keyValue);
        }
        return reduceQueueList;
    }


    public void setClient(RemoteClientFacebookMapReduce client) {
    	System.out.println("*****************************");
    	System.out.println(client.getClass());
    	System.out.println(client.toString());
        this.client = client;
        this.traceClientAssignment(client);
    }

    public void signalQuit() {
        this.traceQuit();
    }

    @Override
    public void run() {
        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();
        FacebookReducer reducer = new FacebookReducer();
        while(true) {
            try {
                Map<String, Integer> originalMap = this.counter.getResult();
                this.splitBoundedBuffer();
                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);
                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);
                tokenCounterBarrier.barrier();
                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);
                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {
                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);
                    this.reduceList(reducer, keyValues);
                }
                JoinerInterface joiner = this.counter.getJoiner();
                joiner.finished();
                this.traceAddedToMap(originalMap, this.counter.getResult());
                this.traceRemoteResult(this.counter.getResult());
                this.synchronizedWait();
                this.keyValueList = new ArrayList<>();
            } catch (InterruptedException ex) {
                Tracer.error(Arrays.toString(ex.getStackTrace()));
                break;
            }
        }
    }

	@Override
	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,
			List<KeyValueInterface<String, Integer>> keyValuePairs) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setClient(ClientInterface client) {
		// TODO Auto-generated method stub
		
	}
}
]]></snapshot>
  </Command>
  <Command __id="989" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:13:06 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5214" docExpressionCount="468" docLength="5214" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2585168">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\slave\Slave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.slave;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class Slave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private ClientInterface client;¶    private List<KeyValueInterface<String, Integer>> keyValueList;¶    private ModelInterface counter;¶¶    public Slave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, Integer> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer, List<KeyValueInterface<String, Integer>> keyValuePairs) {¶        try {¶            this.traceRemoteList(keyValuePairs);¶            return this.client.reduce(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> splitReduction(Map<String, Integer> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reduceQueueList = this.counter.getReductionQueueList();¶        Partitioner partitioner = PartitionerFactory.getPartitioner();¶        for (Map.Entry<String, Integer> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            Integer value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, Integer> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶    public void setClient(ClientInterface client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, Integer> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, Integer>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="991" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:13:06 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5750" docExpressionCount="518" docLength="5818" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2585238">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookSlave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.slave.SlaveInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Map.Entry;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private RemoteClientFacebookMapReduce client;¶    private List<KeyValueInterface<String, List<String>>> keyValueList;¶    private ModelInterface counter;¶¶    public FacebookSlave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, List<String>> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {¶        try {¶        	System.out.println("slave3333333333333333333333333333");¶            this.traceRemoteList(keyValuePairs);¶            System.out.println("slave44444444444444444444444444444");¶            return this.client.reduceNew(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();¶        FacebookPartitioner partitioner = new FacebookPartitioner();¶        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            List<String> value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶¶    public void setClient(RemoteClientFacebookMapReduce client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        FacebookReducer reducer = new FacebookReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶¶	@Override¶	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,¶			List<KeyValueInterface<String, Integer>> keyValuePairs) {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public void setClient(ClientInterface client) {¶		// TODO Auto-generated method stub¶		¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="994" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:13:13 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5214" docExpressionCount="468" docLength="5214" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2592833">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\slave\Slave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.slave;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class Slave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private ClientInterface client;¶    private List<KeyValueInterface<String, Integer>> keyValueList;¶    private ModelInterface counter;¶¶    public Slave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, Integer> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer, List<KeyValueInterface<String, Integer>> keyValuePairs) {¶        try {¶            this.traceRemoteList(keyValuePairs);¶            return this.client.reduce(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> splitReduction(Map<String, Integer> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reduceQueueList = this.counter.getReductionQueueList();¶        Partitioner partitioner = PartitionerFactory.getPartitioner();¶        for (Map.Entry<String, Integer> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            Integer value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, Integer> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶    public void setClient(ClientInterface client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, Integer> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, Integer>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="998" _type="Insert" date="Tue Mar 15 22:13:14 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5220" docExpressionCount="468" docLength="5226" length="12" offset="900" repeat="7" starttimestamp="1647394201042" timestamp="2593727" timestamp2="2595388">
    <text><![CDATA[
    //ssss]]></text>
  </DocumentChange>
  <DocumentChange __id="1019" _type="Delete" date="Tue Mar 15 22:13:16 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5220" docExpressionCount="468" docLength="5222" endLine="26" length="4" offset="908" repeat="4" startLine="26" starttimestamp="1647394201042" timestamp="2595802" timestamp2="2596273">
    <text><![CDATA[ssss]]></text>
  </DocumentChange>
  <DocumentChange __id="1031" _type="Insert" date="Tue Mar 15 22:13:18 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5220" docExpressionCount="468" docLength="5231" length="9" offset="908" repeat="9" starttimestamp="1647394201042" timestamp="2597036" timestamp2="2598193">
    <text><![CDATA[fan si le]]></text>
  </DocumentChange>
  <Command __id="1063" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:13:36 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5750" docExpressionCount="518" docLength="5818" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2615614">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookSlave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.slave.SlaveInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Map.Entry;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private RemoteClientFacebookMapReduce client;¶    private List<KeyValueInterface<String, List<String>>> keyValueList;¶    private ModelInterface counter;¶¶    public FacebookSlave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, List<String>> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {¶        try {¶        	System.out.println("slave3333333333333333333333333333");¶            this.traceRemoteList(keyValuePairs);¶            System.out.println("slave44444444444444444444444444444");¶            return this.client.reduceNew(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();¶        FacebookPartitioner partitioner = new FacebookPartitioner();¶        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            List<String> value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶¶    public void setClient(RemoteClientFacebookMapReduce client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        FacebookReducer reducer = new FacebookReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶¶	@Override¶	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,¶			List<KeyValueInterface<String, Integer>> keyValuePairs) {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public void setClient(ClientInterface client) {¶		// TODO Auto-generated method stub¶		¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1066" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:13:38 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5220" docExpressionCount="468" docLength="5231" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2617817">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\slave\Slave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.slave;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class Slave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private ClientInterface client;¶"), Diff(INSERT,"    //fan si le¶"), Diff(EQUAL,"    private List<KeyValueInterface<String, Integer>> keyValueList;¶    private ModelInterface counter;¶¶    public Slave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, Integer> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer, List<KeyValueInterface<String, Integer>> keyValuePairs) {¶        try {¶            this.traceRemoteList(keyValuePairs);¶            return this.client.reduce(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> splitReduction(Map<String, Integer> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reduceQueueList = this.counter.getReductionQueueList();¶        Partitioner partitioner = PartitionerFactory.getPartitioner();¶        for (Map.Entry<String, Integer> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            Integer value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, Integer> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶    public void setClient(ClientInterface client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, Integer> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, Integer>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶}¶")]]]></diff>
    <snapshot><![CDATA[package comp533.slave;

import comp533.barrier.BarrierInterface;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.main.ModelInterface;
import comp533.keyValue.KeyValue;
import comp533.partitioner.Partitioner;
import comp533.partitioner.PartitionerFactory;
import comp533.reducer.ReducerInterface;
import comp533.reducer.ReducerFactory;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class Slave extends AMapReduceTracer implements SlaveInterface {
    private int threadId;
    private ClientInterface client;
    //fan si le
    private List<KeyValueInterface<String, Integer>> keyValueList;
    private ModelInterface counter;

    public Slave(int threadId, ModelInterface counter) {
        this.threadId = threadId;
        this.counter = counter;
        this.keyValueList = new ArrayList<>();
    }

    public synchronized void notifySlave() {
        this.synchronizedNotify();
    }

    public void splitBoundedBuffer() throws InterruptedException {
        ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer = this.counter.getBoundedBuffer();
        KeyValueInterface<String, Integer> consumedItem = null;
        while(consumedItem == null || consumedItem.getKey() != null) {
            this.traceDequeueRequest(boundedBuffer);
            consumedItem = boundedBuffer.take();
            this.traceDequeue(consumedItem);
            if (consumedItem.getKey() != null) {
                this.keyValueList.add(consumedItem);
            }
        }
    }

    public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer, List<KeyValueInterface<String, Integer>> keyValuePairs) {
        try {
            this.traceRemoteList(keyValuePairs);
            return this.client.reduce(keyValuePairs);
        } catch (RemoteException | NullPointerException ex) {
            return reducer.reduce(keyValuePairs);
        }

    }

    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> splitReduction(Map<String, Integer> partiallyReducedMap) {
        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reduceQueueList = this.counter.getReductionQueueList();
        Partitioner partitioner = PartitionerFactory.getPartitioner();
        for (Map.Entry<String, Integer> entry: partiallyReducedMap.entrySet()) {
            String key = entry.getKey();
            Integer value = entry.getValue();
            if (key == null) {
                break;
            }
            int numOfPartitions = reduceQueueList.size();
            int index = partitioner.getPartition(key, value, numOfPartitions);
            this.tracePartitionAssigned(key, value, index, numOfPartitions);
            KeyValueInterface<String, Integer> keyValue = new KeyValue<>(key, value);
            reduceQueueList.get(index).add(keyValue);
        }
        return reduceQueueList;
    }

    public void setClient(ClientInterface client) {
    	System.out.println("*****************************");
    	System.out.println(client.getClass());
    	System.out.println(client.toString());
        this.client = client;
        this.traceClientAssignment(client);
    }

    public void signalQuit() {
        this.traceQuit();
    }

    @Override
    public void run() {
        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();
        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();
        while(true) {
            try {
                Map<String, Integer> originalMap = this.counter.getResult();
                this.splitBoundedBuffer();
                Map<String, Integer> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);
                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList = this.splitReduction(partiallyReducedMap);
                tokenCounterBarrier.barrier();
                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);
                for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : reductionQueueList) {
                    List<KeyValueInterface<String, Integer>> keyValues = List.copyOf(reductionQueue);
                    this.reduceList(reducer, keyValues);
                }
                JoinerInterface joiner = this.counter.getJoiner();
                joiner.finished();
                this.traceAddedToMap(originalMap, this.counter.getResult());
                this.traceRemoteResult(this.counter.getResult());
                this.synchronizedWait();
                this.keyValueList = new ArrayList<>();
            } catch (InterruptedException ex) {
                Tracer.error(Arrays.toString(ex.getStackTrace()));
                break;
            }
        }
    }
}
]]></snapshot>
  </Command>
  <Command __id="1069" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:13:41 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5750" docExpressionCount="518" docLength="5818" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2620840">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookSlave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.slave.SlaveInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Map.Entry;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private RemoteClientFacebookMapReduce client;¶    private List<KeyValueInterface<String, List<String>>> keyValueList;¶    private ModelInterface counter;¶¶    public FacebookSlave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, List<String>> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {¶        try {¶        	System.out.println("slave3333333333333333333333333333");¶            this.traceRemoteList(keyValuePairs);¶            System.out.println("slave44444444444444444444444444444");¶            return this.client.reduceNew(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();¶        FacebookPartitioner partitioner = new FacebookPartitioner();¶        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            List<String> value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶¶    public void setClient(RemoteClientFacebookMapReduce client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        FacebookReducer reducer = new FacebookReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶¶	@Override¶	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,¶			List<KeyValueInterface<String, Integer>> keyValuePairs) {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public void setClient(ClientInterface client) {¶		// TODO Auto-generated method stub¶		¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1072" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:14:12 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5220" docExpressionCount="468" docLength="5231" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2651430">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\slave\Slave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.slave;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class Slave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private ClientInterface client;¶    //fan si le¶    private List<KeyValueInterface<String, Integer>> keyValueList;¶    private ModelInterface counter;¶¶    public Slave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, Integer> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer, List<KeyValueInterface<String, Integer>> keyValuePairs) {¶        try {¶            this.traceRemoteList(keyValuePairs);¶            return this.client.reduce(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> splitReduction(Map<String, Integer> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reduceQueueList = this.counter.getReductionQueueList();¶        Partitioner partitioner = PartitionerFactory.getPartitioner();¶        for (Map.Entry<String, Integer> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            Integer value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, Integer> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶    public void setClient(ClientInterface client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, Integer> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, Integer>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="1075" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:14:22 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5750" docExpressionCount="518" docLength="5818" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2661194">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookSlave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.slave.SlaveInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Map.Entry;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private RemoteClientFacebookMapReduce client;¶    private List<KeyValueInterface<String, List<String>>> keyValueList;¶    private ModelInterface counter;¶¶    public FacebookSlave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, List<String>> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {¶        try {¶        	System.out.println("slave3333333333333333333333333333");¶            this.traceRemoteList(keyValuePairs);¶            System.out.println("slave44444444444444444444444444444");¶            return this.client.reduceNew(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();¶        FacebookPartitioner partitioner = new FacebookPartitioner();¶        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            List<String> value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶¶    public void setClient(RemoteClientFacebookMapReduce client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        FacebookReducer reducer = new FacebookReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶¶	@Override¶	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,¶			List<KeyValueInterface<String, Integer>> keyValuePairs) {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public void setClient(ClientInterface client) {¶		// TODO Auto-generated method stub¶		¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1078" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:15:25 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5220" docExpressionCount="468" docLength="5231" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2724560">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\slave\Slave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.slave;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class Slave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private ClientInterface client;¶    //fan si le¶    private List<KeyValueInterface<String, Integer>> keyValueList;¶    private ModelInterface counter;¶¶    public Slave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, Integer> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer, List<KeyValueInterface<String, Integer>> keyValuePairs) {¶        try {¶            this.traceRemoteList(keyValuePairs);¶            return this.client.reduce(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> splitReduction(Map<String, Integer> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reduceQueueList = this.counter.getReductionQueueList();¶        Partitioner partitioner = PartitionerFactory.getPartitioner();¶        for (Map.Entry<String, Integer> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            Integer value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, Integer> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶    public void setClient(ClientInterface client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, Integer> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, Integer>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="1081" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:15:28 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5750" docExpressionCount="518" docLength="5818" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2727234">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookSlave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.slave.SlaveInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Map.Entry;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private RemoteClientFacebookMapReduce client;¶    private List<KeyValueInterface<String, List<String>>> keyValueList;¶    private ModelInterface counter;¶¶    public FacebookSlave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, List<String>> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {¶        try {¶        	System.out.println("slave3333333333333333333333333333");¶            this.traceRemoteList(keyValuePairs);¶            System.out.println("slave44444444444444444444444444444");¶            return this.client.reduceNew(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();¶        FacebookPartitioner partitioner = new FacebookPartitioner();¶        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            List<String> value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶¶    public void setClient(RemoteClientFacebookMapReduce client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        FacebookReducer reducer = new FacebookReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶¶	@Override¶	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,¶			List<KeyValueInterface<String, Integer>> keyValuePairs) {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public void setClient(ClientInterface client) {¶		// TODO Auto-generated method stub¶		¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1084" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:15:35 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5220" docExpressionCount="468" docLength="5231" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2734922">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\slave\Slave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.slave;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class Slave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private ClientInterface client;¶    //fan si le¶    private List<KeyValueInterface<String, Integer>> keyValueList;¶    private ModelInterface counter;¶¶    public Slave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, Integer> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer, List<KeyValueInterface<String, Integer>> keyValuePairs) {¶        try {¶            this.traceRemoteList(keyValuePairs);¶            return this.client.reduce(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> splitReduction(Map<String, Integer> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reduceQueueList = this.counter.getReductionQueueList();¶        Partitioner partitioner = PartitionerFactory.getPartitioner();¶        for (Map.Entry<String, Integer> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            Integer value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, Integer> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶    public void setClient(ClientInterface client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, Integer> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, Integer>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="1087" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:15:56 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5750" docExpressionCount="518" docLength="5818" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2755222">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookSlave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.slave.SlaveInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Map.Entry;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private RemoteClientFacebookMapReduce client;¶    private List<KeyValueInterface<String, List<String>>> keyValueList;¶    private ModelInterface counter;¶¶    public FacebookSlave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, List<String>> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {¶        try {¶        	System.out.println("slave3333333333333333333333333333");¶            this.traceRemoteList(keyValuePairs);¶            System.out.println("slave44444444444444444444444444444");¶            return this.client.reduceNew(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();¶        FacebookPartitioner partitioner = new FacebookPartitioner();¶        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            List<String> value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶¶    public void setClient(RemoteClientFacebookMapReduce client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        FacebookReducer reducer = new FacebookReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶¶	@Override¶	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,¶			List<KeyValueInterface<String, Integer>> keyValuePairs) {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public void setClient(ClientInterface client) {¶		// TODO Auto-generated method stub¶		¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1098" _type="Delete" date="Tue Mar 15 22:16:12 EDT 2022" docASTNodeCount="799" docActiveCodeLength="5494" docExpressionCount="497" docLength="5494" endLine="137" length="324" offset="5489" startLine="126" starttimestamp="1647394201042" timestamp="2771799">
    <text><![CDATA[	@Override
	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,
			List<KeyValueInterface<String, Integer>> keyValuePairs) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setClient(ClientInterface client) {
		// TODO Auto-generated method stub
		
	}]]></text>
  </DocumentChange>
  <Command __id="1101" _type="PauseCommand" date="Tue Mar 15 22:16:15 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2774322">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[CutCommand]]></prev>
    <pause><![CDATA[2443]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1100" _type="MoveCaretCommand" caretOffset="3163" date="Tue Mar 15 22:16:15 EDT 2022" docOffset="3925" starttimestamp="1647394201042" timestamp="2774322" />
  <DocumentChange __id="1102" _type="Insert" date="Tue Mar 15 22:16:16 EDT 2022" docASTNodeCount="799" docActiveCodeLength="5500" docExpressionCount="497" docLength="5500" length="6" offset="3925" starttimestamp="1647394201042" timestamp="2775029">
    <text><![CDATA[
    ]]></text>
  </DocumentChange>
  <Command __id="1103" _type="InsertStringCommand" date="Tue Mar 15 22:16:16 EDT 2022" starttimestamp="1647394201042" timestamp="2775039" timestamp2="2775039">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1104" _type="Replace" date="Tue Mar 15 22:16:16 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5752" docExpressionCount="518" docLength="5820" endLine="97" insertionLength="324" int_docASTNodeCount="799" int_docActiveCodeLength="5496" int_docExpressionCount="497" int_docLength="5496" length="4" offset="3927" startLine="97" starttimestamp="1647394201042" timestamp="2775418">
    <deletedText><![CDATA[    ]]></deletedText>
    <insertedText><![CDATA[	@Override
	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,
			List<KeyValueInterface<String, Integer>> keyValuePairs) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setClient(ClientInterface client) {
		// TODO Auto-generated method stub
		
	}]]></insertedText>
  </DocumentChange>
  <Command __id="1105" _type="PasteCommand" date="Tue Mar 15 22:16:16 EDT 2022" starttimestamp="1647394201042" timestamp="2775434" />
  <Command __id="1107" _type="InsertStringCommand" date="Tue Mar 15 22:16:16 EDT 2022" starttimestamp="1647394201042" timestamp="2775787" timestamp2="2775787">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1108" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 15 22:16:17 EDT 2022" starttimestamp="1647394201042" timestamp="2776179" />
  <Command __id="1109" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:16:17 EDT 2022" starttimestamp="1647394201042" timestamp="2776265" />
  <Command __id="1110" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:16:17 EDT 2022" starttimestamp="1647394201042" timestamp="2776289" />
  <Command __id="1111" _type="MoveCaretCommand" caretOffset="3148" date="Tue Mar 15 22:16:18 EDT 2022" docOffset="3910" starttimestamp="1647394201042" timestamp="2777115" />
  <Command __id="1118" _type="PauseCommand" date="Tue Mar 15 22:16:24 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2783952">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2038]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1117" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:16:24 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2783952" type="Run" />
  <Command __id="1119" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:16:24 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2783952" type="Run" />
  <Command __id="1121" _type="PauseCommand" date="Tue Mar 15 22:16:27 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2786684">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2732]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1120" _type="ShellCommand" date="Tue Mar 15 22:16:27 EDT 2022" starttimestamp="1647394201042" timestamp="2786684" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1123" _type="PauseCommand" date="Tue Mar 15 22:16:31 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2790158">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3474]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1122" _type="ConsoleOutput" date="Tue Mar 15 22:16:31 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="2790158" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):25
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):50580¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶Test execution time (ms):4¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Conn"), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test ex"), Diff(EQUAL,"ec"), Diff(INSERT,"u"), Diff(EQUAL,"tion"), Diff(DELETE,".*:.*Remote List.*?%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(INSERT," time (ms):25"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1124" _type="ShellCommand" date="Tue Mar 15 22:16:31 EDT 2022" starttimestamp="1647394201042" timestamp="2790549" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1126" _type="MoveCaretCommand" caretOffset="3206" date="Tue Mar 15 22:16:31 EDT 2022" docOffset="3901" starttimestamp="1647394201042" timestamp="2790653" />
  <Command __id="1127" _type="MoveCaretCommand" caretOffset="3206" date="Tue Mar 15 22:16:31 EDT 2022" docOffset="3901" starttimestamp="1647394201042" timestamp="2790735" />
  <Command __id="1129" _type="PauseCommand" date="Tue Mar 15 22:16:49 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="2808194">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[17459]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1128" _type="ConsoleOutput" date="Tue Mar 15 22:16:49 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="2808194" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):25"), Diff(INSERT,"Number of traces > 600  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1131" _type="PauseCommand" date="Tue Mar 15 22:17:00 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="2819865">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11671]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1130" _type="ConsoleOutput" date="Tue Mar 15 22:17:00 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="2819865" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1132" _type="ConsoleOutput" date="Tue Mar 15 22:17:01 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="2819964" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="1133" _type="ConsoleOutput" date="Tue Mar 15 22:17:01 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="2820072" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="1135" _type="PauseCommand" date="Tue Mar 15 22:17:07 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="2826808">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6736]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1134" _type="ShellCommand" date="Tue Mar 15 22:17:07 EDT 2022" starttimestamp="1647394201042" timestamp="2826808" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1137" _type="PauseCommand" date="Tue Mar 15 22:17:09 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2828232">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1424]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1136" _type="ShellCommand" date="Tue Mar 15 22:17:09 EDT 2022" starttimestamp="1647394201042" timestamp="2828232" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1138" _type="ShellCommand" date="Tue Mar 15 22:17:09 EDT 2022" starttimestamp="1647394201042" timestamp="2828898" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1140" _type="PauseCommand" date="Tue Mar 15 22:17:13 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2832512">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3614]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1139" _type="ShellCommand" date="Tue Mar 15 22:17:13 EDT 2022" starttimestamp="1647394201042" timestamp="2832512" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1142" _type="PauseCommand" date="Tue Mar 15 22:17:14 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="2833629">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1117]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1141" _type="ShellCommand" date="Tue Mar 15 22:17:14 EDT 2022" starttimestamp="1647394201042" timestamp="2833629" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1144" _type="PauseCommand" date="Tue Mar 15 22:17:21 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="2840635">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7006]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1143" _type="ConsoleOutput" date="Tue Mar 15 22:17:21 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="2840635" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):50477
Number of traces > 600  turning tracing off
Number of traces > 600  turning tracing off
Test execution time (ms):7
Number of traces > 600  turning tracing off
Number of traces > 600  turning tracing off
DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0











































]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), g"), Diff(INSERT,"Test execution time (ms):50477¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning t"), Diff(EQUAL,"ra"), Diff(DELETE,"d"), Diff(INSERT,"c"), Diff(EQUAL,"ing"), Diff(DELETE,"Tools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(INSERT," off¶Test execution time (ms):7¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1146" _type="PauseCommand" date="Tue Mar 15 22:18:14 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="2893006">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[52371]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1145" _type="ConsoleOutput" date="Tue Mar 15 22:18:14 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="2893006" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment3.facebookMapReduce.tests.DistributedFacebookMapReducePartialReduce@35734350 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):50477¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning t"), Diff(INSERT,"Re-running test g"), Diff(EQUAL,"ra"), Diff(DELETE,"c"), Diff(INSERT,"d"), Diff(EQUAL,"ing"), Diff(DELETE," off¶Test execution time (ms):7¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(INSERT,"Tools.comp533s21.assignment3.facebookMapReduce.tests.DistributedFacebookMapReducePartialReduce@35734350 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1148" _type="PauseCommand" date="Tue Mar 15 22:18:16 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="2895840">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2834]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1147" _type="ShellCommand" date="Tue Mar 15 22:18:16 EDT 2022" starttimestamp="1647394201042" timestamp="2895840" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1150" _type="PauseCommand" date="Tue Mar 15 22:18:28 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="2907191">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11351]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1149" _type="ShellCommand" date="Tue Mar 15 22:18:28 EDT 2022" starttimestamp="1647394201042" timestamp="2907191" type="ECLIPSE_MINIMIZED" />
  <Command __id="1151" _type="ShellCommand" date="Tue Mar 15 22:18:28 EDT 2022" starttimestamp="1647394201042" timestamp="2907207" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1153" _type="PauseCommand" date="Tue Mar 15 22:19:56 EDT 2022" range="1m-2m" starttimestamp="1647394201042" timestamp="2995387">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[88180]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1152" _type="ShellCommand" date="Tue Mar 15 22:19:56 EDT 2022" starttimestamp="1647394201042" timestamp="2995387" type="ECLIPSE_MAXIMIZED" />
  <Command __id="1154" _type="ShellCommand" date="Tue Mar 15 22:19:56 EDT 2022" starttimestamp="1647394201042" timestamp="2995467" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1156" _type="PauseCommand" date="Tue Mar 15 22:20:09 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3008031">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12564]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1155" _type="MoveCaretCommand" caretOffset="512" date="Tue Mar 15 22:20:09 EDT 2022" docOffset="1207" starttimestamp="1647394201042" timestamp="3008031" />
  <Command __id="1157" _type="MoveCaretCommand" caretOffset="512" date="Tue Mar 15 22:20:09 EDT 2022" docOffset="1207" starttimestamp="1647394201042" timestamp="3008031" />
  <Command __id="1159" _type="PauseCommand" date="Tue Mar 15 22:20:10 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3009257">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1226]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1160" _type="MoveCaretCommand" caretOffset="525" date="Tue Mar 15 22:20:10 EDT 2022" docOffset="1287" starttimestamp="1647394201042" timestamp="3009352" />
  <Command __id="1162" _type="PauseCommand" date="Tue Mar 15 22:20:12 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3010992">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1640]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1163" _type="InsertStringCommand" date="Tue Mar 15 22:20:12 EDT 2022" starttimestamp="1647394201042" timestamp="3010998" timestamp2="3010998">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1165" _type="InsertStringCommand" date="Tue Mar 15 22:20:12 EDT 2022" starttimestamp="1647394201042" timestamp="3011136" timestamp2="3011136">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1167" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:20:12 EDT 2022" starttimestamp="1647394201042" timestamp="3011553" />
  <Command __id="1169" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:20:12 EDT 2022" starttimestamp="1647394201042" timestamp="3011680" />
  <Command __id="1171" _type="InsertStringCommand" date="Tue Mar 15 22:20:12 EDT 2022" starttimestamp="1647394201042" timestamp="3011875" timestamp2="3011875">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1173" _type="InsertStringCommand" date="Tue Mar 15 22:20:13 EDT 2022" starttimestamp="1647394201042" timestamp="3012225" timestamp2="3012225">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1175" _type="InsertStringCommand" date="Tue Mar 15 22:20:13 EDT 2022" starttimestamp="1647394201042" timestamp="3012445" timestamp2="3012445">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1177" _type="InsertStringCommand" date="Tue Mar 15 22:20:14 EDT 2022" starttimestamp="1647394201042" timestamp="3012997" timestamp2="3012997">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1179" _type="InsertStringCommand" date="Tue Mar 15 22:20:14 EDT 2022" starttimestamp="1647394201042" timestamp="3013710" timestamp2="3013710">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1181" _type="InsertStringCommand" date="Tue Mar 15 22:20:14 EDT 2022" starttimestamp="1647394201042" timestamp="3013828" timestamp2="3013828">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1183" _type="InsertStringCommand" date="Tue Mar 15 22:20:14 EDT 2022" starttimestamp="1647394201042" timestamp="3013925" timestamp2="3013925">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1185" _type="InsertStringCommand" date="Tue Mar 15 22:20:15 EDT 2022" starttimestamp="1647394201042" timestamp="3014090" timestamp2="3014090">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1187" _type="InsertStringCommand" date="Tue Mar 15 22:20:15 EDT 2022" starttimestamp="1647394201042" timestamp="3014310" timestamp2="3014310">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1189" _type="InsertStringCommand" date="Tue Mar 15 22:20:15 EDT 2022" starttimestamp="1647394201042" timestamp="3014918" timestamp2="3014918">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="1191" _type="InsertStringCommand" date="Tue Mar 15 22:20:16 EDT 2022" starttimestamp="1647394201042" timestamp="3015021" timestamp2="3015021">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1193" _type="InsertStringCommand" date="Tue Mar 15 22:20:16 EDT 2022" starttimestamp="1647394201042" timestamp="3015148" timestamp2="3015148">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1195" _type="InsertStringCommand" date="Tue Mar 15 22:20:16 EDT 2022" starttimestamp="1647394201042" timestamp="3015239" timestamp2="3015239">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1197" _type="InsertStringCommand" date="Tue Mar 15 22:20:16 EDT 2022" starttimestamp="1647394201042" timestamp="3015319" timestamp2="3015319">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1199" _type="InsertStringCommand" date="Tue Mar 15 22:20:16 EDT 2022" starttimestamp="1647394201042" timestamp="3015419" timestamp2="3015419">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1201" _type="InsertStringCommand" date="Tue Mar 15 22:20:16 EDT 2022" starttimestamp="1647394201042" timestamp="3015613" timestamp2="3015613">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1203" _type="InsertStringCommand" date="Tue Mar 15 22:20:16 EDT 2022" starttimestamp="1647394201042" timestamp="3015713" timestamp2="3015713">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1205" _type="InsertStringCommand" date="Tue Mar 15 22:20:16 EDT 2022" starttimestamp="1647394201042" timestamp="3015884" timestamp2="3015884">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1207" _type="InsertStringCommand" date="Tue Mar 15 22:20:17 EDT 2022" starttimestamp="1647394201042" timestamp="3016113" timestamp2="3016113">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="1106" _type="Insert" date="Tue Mar 15 22:16:16 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5755" docExpressionCount="518" docLength="5823" length="3" offset="4251" starttimestamp="1647394201042" timestamp="2775775">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <Command __id="1125" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:16:31 EDT 2022" docASTNodeCount="740" docActiveCodeLength="5220" docExpressionCount="468" docLength="5231" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="2790605">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\slave\Slave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.slave;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class Slave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private ClientInterface client;¶    //fan si le¶    private List<KeyValueInterface<String, Integer>> keyValueList;¶    private ModelInterface counter;¶¶    public Slave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, Integer>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, Integer> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer, List<KeyValueInterface<String, Integer>> keyValuePairs) {¶        try {¶            this.traceRemoteList(keyValuePairs);¶            return this.client.reduce(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> splitReduction(Map<String, Integer> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reduceQueueList = this.counter.getReductionQueueList();¶        Partitioner partitioner = PartitionerFactory.getPartitioner();¶        for (Map.Entry<String, Integer> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            Integer value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, Integer> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶    public void setClient(ClientInterface client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        ReducerInterface<String, Integer> reducer = ReducerFactory.getReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, Integer> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, Integer>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, Integer>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, Integer>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶}¶")]]]></diff>
  </Command>
  <Command __id="1158" _type="DiffBasedFileOpenCommand" date="Tue Mar 15 22:20:10 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5755" docExpressionCount="518" docLength="5823" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3009257">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookSlave.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package facebook;¶¶import comp533.barrier.BarrierInterface;¶import comp533.client.ClientInterface;¶import comp533.joiner.JoinerInterface;¶import comp533.keyValue.KeyValueInterface;¶import comp533.main.ModelInterface;¶import comp533.keyValue.KeyValue;¶import comp533.partitioner.Partitioner;¶import comp533.partitioner.PartitionerFactory;¶import comp533.reducer.ReducerInterface;¶import comp533.slave.SlaveInterface;¶import comp533.reducer.ReducerFactory;¶import gradingTools.comp533s19.assignment0.AMapReduceTracer;¶import util.trace.Tracer;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.List;¶import java.util.Map;¶import java.util.Map.Entry;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.ConcurrentLinkedQueue;¶¶public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {¶    private int threadId;¶    private RemoteClientFacebookMapReduce client;¶    private List<KeyValueInterface<String, List<String>>> keyValueList;¶    private ModelInterface counter;¶¶    public FacebookSlave(int threadId, ModelInterface counter) {¶        this.threadId = threadId;¶        this.counter = counter;¶        this.keyValueList = new ArrayList<>();¶    }¶¶    public synchronized void notifySlave() {¶        this.synchronizedNotify();¶    }¶¶    public void splitBoundedBuffer() throws InterruptedException {¶        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();¶        KeyValueInterface<String, List<String>> consumedItem = null;¶        while(consumedItem == null || consumedItem.getKey() != null) {¶            this.traceDequeueRequest(boundedBuffer);¶            consumedItem = boundedBuffer.take();¶            this.traceDequeue(consumedItem);¶            if (consumedItem.getKey() != null) {¶                this.keyValueList.add(consumedItem);¶            }¶        }¶    }¶¶    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {¶        try {¶        	System.out.println("slave3333333333333333333333333333");¶            this.traceRemoteList(keyValuePairs);¶            System.out.println("slave44444444444444444444444444444");¶            return this.client.reduceNew(keyValuePairs);¶        } catch (RemoteException | NullPointerException ex) {¶            return reducer.reduce(keyValuePairs);¶        }¶¶    }¶¶    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {¶        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();¶        FacebookPartitioner partitioner = new FacebookPartitioner();¶        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {¶            String key = entry.getKey();¶            List<String> value = entry.getValue();¶            if (key == null) {¶                break;¶            }¶            int numOfPartitions = reduceQueueList.size();¶            int index = partitioner.getPartition(key, value, numOfPartitions);¶            this.tracePartitionAssigned(key, value, index, numOfPartitions);¶            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);¶            reduceQueueList.get(index).add(keyValue);¶        }¶        return reduceQueueList;¶    }¶¶¶    public void setClient(RemoteClientFacebookMapReduce client) {¶    	System.out.println("*****************************");¶    	System.out.println(client.getClass());¶    	System.out.println(client.toString());¶        this.client = client;¶        this.traceClientAssignment(client);¶    }¶¶    public void signalQuit() {¶        this.traceQuit();¶    }¶¶"), Diff(INSERT,"	@Override¶	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,¶			List<KeyValueInterface<String, Integer>> keyValuePairs) {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public void setClient(ClientInterface client) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶"), Diff(EQUAL,"    @Override¶    public void run() {¶        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();¶        FacebookReducer reducer = new FacebookReducer();¶        while(true) {¶            try {¶                Map<String, Integer> originalMap = this.counter.getResult();¶                this.splitBoundedBuffer();¶                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);¶                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);¶                tokenCounterBarrier.barrier();¶                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);¶                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {¶                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);¶                    this.reduceList(reducer, keyValues);¶                }¶                JoinerInterface joiner = this.counter.getJoiner();¶                joiner.finished();¶                this.traceAddedToMap(originalMap, this.counter.getResult());¶                this.traceRemoteResult(this.counter.getResult());¶                this.synchronizedWait();¶                this.keyValueList = new ArrayList<>();¶            } catch (InterruptedException ex) {¶                Tracer.error(Arrays.toString(ex.getStackTrace()));¶                break;¶            }¶        }¶    }¶¶"), Diff(DELETE,"	@Override¶	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,¶			List<KeyValueInterface<String, Integer>> keyValuePairs) {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public void setClient(ClientInterface client) {¶		// TODO Auto-generated method stub¶		¶	}"), Diff(EQUAL,"¶}¶")]]]></diff>
    <snapshot><![CDATA[package facebook;

import comp533.barrier.BarrierInterface;
import comp533.client.ClientInterface;
import comp533.joiner.JoinerInterface;
import comp533.keyValue.KeyValueInterface;
import comp533.main.ModelInterface;
import comp533.keyValue.KeyValue;
import comp533.partitioner.Partitioner;
import comp533.partitioner.PartitionerFactory;
import comp533.reducer.ReducerInterface;
import comp533.slave.SlaveInterface;
import comp533.reducer.ReducerFactory;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import util.trace.Tracer;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class FacebookSlave extends AMapReduceTracer implements SlaveInterface {
    private int threadId;
    private RemoteClientFacebookMapReduce client;
    private List<KeyValueInterface<String, List<String>>> keyValueList;
    private ModelInterface counter;

    public FacebookSlave(int threadId, ModelInterface counter) {
        this.threadId = threadId;
        this.counter = counter;
        this.keyValueList = new ArrayList<>();
    }

    public synchronized void notifySlave() {
        this.synchronizedNotify();
    }

    public void splitBoundedBuffer() throws InterruptedException {
        ArrayBlockingQueue<KeyValueInterface<String, List<String>>> boundedBuffer = this.counter.getBoundedBuffer();
        KeyValueInterface<String, List<String>> consumedItem = null;
        while(consumedItem == null || consumedItem.getKey() != null) {
            this.traceDequeueRequest(boundedBuffer);
            consumedItem = boundedBuffer.take();
            this.traceDequeue(consumedItem);
            if (consumedItem.getKey() != null) {
                this.keyValueList.add(consumedItem);
            }
        }
    }

    public Map<String, List<String>> reduceList(FacebookReducer reducer, List<KeyValueInterface<String, List<String>>> keyValuePairs) {
        try {
        	System.out.println("slave3333333333333333333333333333");
            this.traceRemoteList(keyValuePairs);
            System.out.println("slave44444444444444444444444444444");
            return this.client.reduceNew(keyValuePairs);
        } catch (RemoteException | NullPointerException ex) {
            return reducer.reduce(keyValuePairs);
        }

    }

    private ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> splitReduction(Map<String, List<String>> partiallyReducedMap) {
        ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reduceQueueList = this.counter.getReductionQueueList();
        FacebookPartitioner partitioner = new FacebookPartitioner();
        for (Entry<String, List<String>> entry: partiallyReducedMap.entrySet()) {
            String key = entry.getKey();
            List<String> value = entry.getValue();
            if (key == null) {
                break;
            }
            int numOfPartitions = reduceQueueList.size();
            int index = partitioner.getPartition(key, value, numOfPartitions);
            this.tracePartitionAssigned(key, value, index, numOfPartitions);
            KeyValueInterface<String, List<String>> keyValue = new KeyValue<>(key, value);
            reduceQueueList.get(index).add(keyValue);
        }
        return reduceQueueList;
    }


    public void setClient(RemoteClientFacebookMapReduce client) {
    	System.out.println("*****************************");
    	System.out.println(client.getClass());
    	System.out.println(client.toString());
        this.client = client;
        this.traceClientAssignment(client);
    }

    public void signalQuit() {
        this.traceQuit();
    }

	@Override
	public Map<String, Integer> reduceList(ReducerInterface<String, Integer> reducer,
			List<KeyValueInterface<String, Integer>> keyValuePairs) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setClient(ClientInterface client) {
		// TODO Auto-generated method stub
		
	}
	
    @Override
    public void run() {
        BarrierInterface tokenCounterBarrier = this.counter.getBarrier();
        FacebookReducer reducer = new FacebookReducer();
        while(true) {
            try {
                Map<String, Integer> originalMap = this.counter.getResult();
                this.splitBoundedBuffer();
                Map<String, List<String>> partiallyReducedMap = this.reduceList(reducer, this.keyValueList);
                ArrayList<ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>>> reductionQueueList = this.splitReduction(partiallyReducedMap);
                tokenCounterBarrier.barrier();
                this.traceSplitAfterBarrier(this.threadId, reductionQueueList);
                for (ConcurrentLinkedQueue<KeyValueInterface<String, List<String>>> reductionQueue : reductionQueueList) {
                    List<KeyValueInterface<String, List<String>>> keyValues = List.copyOf(reductionQueue);
                    this.reduceList(reducer, keyValues);
                }
                JoinerInterface joiner = this.counter.getJoiner();
                joiner.finished();
                this.traceAddedToMap(originalMap, this.counter.getResult());
                this.traceRemoteResult(this.counter.getResult());
                this.synchronizedWait();
                this.keyValueList = new ArrayList<>();
            } catch (InterruptedException ex) {
                Tracer.error(Arrays.toString(ex.getStackTrace()));
                break;
            }
        }
    }


}
]]></snapshot>
  </Command>
  <DocumentChange __id="1161" _type="Insert" date="Tue Mar 15 22:20:12 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5755" docExpressionCount="518" docLength="5825" length="2" offset="1287" repeat="2" starttimestamp="1647394201042" timestamp="3010992" timestamp2="3011126">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1166" _type="Delete" date="Tue Mar 15 22:20:12 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5755" docExpressionCount="518" docLength="5823" endLine="36" length="2" offset="1287" repeat="2" startLine="36" starttimestamp="1647394201042" timestamp="3011548" timestamp2="3011678">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1170" _type="Insert" date="Tue Mar 15 22:20:12 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5759" docExpressionCount="518" docLength="5842" length="19" offset="1287" repeat="19" starttimestamp="1647394201042" timestamp="3011869" timestamp2="3016107">
    <text><![CDATA[    // why the fuc ]]></text>
  </DocumentChange>
  <DocumentChange __id="1208" _type="Delete" date="Tue Mar 15 22:20:17 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5759" docExpressionCount="518" docLength="5841" endLine="36" length="1" offset="1305" startLine="36" starttimestamp="1647394201042" timestamp="3016539">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="1210" _type="Insert" date="Tue Mar 15 22:20:17 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5759" docExpressionCount="518" docLength="5849" length="8" offset="1305" repeat="8" starttimestamp="1647394201042" timestamp="3016910" timestamp2="3017919">
    <text><![CDATA[k is ths]]></text>
  </DocumentChange>
  <DocumentChange __id="1226" _type="Delete" date="Tue Mar 15 22:20:19 EDT 2022" docASTNodeCount="846" docActiveCodeLength="5759" docExpressionCount="518" docLength="5848" endLine="36" length="1" offset="1312" startLine="36" starttimestamp="1647394201042" timestamp="3018558">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="1209" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:20:17 EDT 2022" starttimestamp="1647394201042" timestamp="3016543" />
  <Command __id="1211" _type="InsertStringCommand" date="Tue Mar 15 22:20:17 EDT 2022" starttimestamp="1647394201042" timestamp="3016916" timestamp2="3016916">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="1213" _type="InsertStringCommand" date="Tue Mar 15 22:20:18 EDT 2022" starttimestamp="1647394201042" timestamp="3016976" timestamp2="3016976">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1215" _type="InsertStringCommand" date="Tue Mar 15 22:20:18 EDT 2022" starttimestamp="1647394201042" timestamp="3017145" timestamp2="3017145">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1217" _type="InsertStringCommand" date="Tue Mar 15 22:20:18 EDT 2022" starttimestamp="1647394201042" timestamp="3017309" timestamp2="3017309">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1219" _type="InsertStringCommand" date="Tue Mar 15 22:20:18 EDT 2022" starttimestamp="1647394201042" timestamp="3017417" timestamp2="3017417">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1221" _type="InsertStringCommand" date="Tue Mar 15 22:20:18 EDT 2022" starttimestamp="1647394201042" timestamp="3017594" timestamp2="3017594">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1223" _type="InsertStringCommand" date="Tue Mar 15 22:20:18 EDT 2022" starttimestamp="1647394201042" timestamp="3017709" timestamp2="3017709">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1225" _type="InsertStringCommand" date="Tue Mar 15 22:20:18 EDT 2022" starttimestamp="1647394201042" timestamp="3017924" timestamp2="3017924">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1227" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 15 22:20:19 EDT 2022" starttimestamp="1647394201042" timestamp="3018561" />
  <Command __id="1229" _type="InsertStringCommand" date="Tue Mar 15 22:20:19 EDT 2022" starttimestamp="1647394201042" timestamp="3018847" timestamp2="3018847">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1231" _type="InsertStringCommand" date="Tue Mar 15 22:20:20 EDT 2022" starttimestamp="1647394201042" timestamp="3018988" timestamp2="3018988">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1233" _type="InsertStringCommand" date="Tue Mar 15 22:20:20 EDT 2022" starttimestamp="1647394201042" timestamp="3019078" timestamp2="3019078">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1235" _type="InsertStringCommand" date="Tue Mar 15 22:20:20 EDT 2022" starttimestamp="1647394201042" timestamp="3019317" timestamp2="3019317">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1237" _type="InsertStringCommand" date="Tue Mar 15 22:20:20 EDT 2022" starttimestamp="1647394201042" timestamp="3019520" timestamp2="3019520">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1239" _type="InsertStringCommand" date="Tue Mar 15 22:20:20 EDT 2022" starttimestamp="1647394201042" timestamp="3019628" timestamp2="3019628">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1241" _type="InsertStringCommand" date="Tue Mar 15 22:20:20 EDT 2022" starttimestamp="1647394201042" timestamp="3019769" timestamp2="3019769">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1243" _type="InsertStringCommand" date="Tue Mar 15 22:20:21 EDT 2022" starttimestamp="1647394201042" timestamp="3020039" timestamp2="3020039">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1245" _type="InsertStringCommand" date="Tue Mar 15 22:20:21 EDT 2022" starttimestamp="1647394201042" timestamp="3020121" timestamp2="3020121">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1247" _type="InsertStringCommand" date="Tue Mar 15 22:20:21 EDT 2022" starttimestamp="1647394201042" timestamp="3020421" timestamp2="3020421">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1249" _type="InsertStringCommand" date="Tue Mar 15 22:20:21 EDT 2022" starttimestamp="1647394201042" timestamp="3020521" timestamp2="3020521">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="1251" _type="InsertStringCommand" date="Tue Mar 15 22:20:21 EDT 2022" starttimestamp="1647394201042" timestamp="3020721" timestamp2="3020721">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1253" _type="InsertStringCommand" date="Tue Mar 15 22:20:21 EDT 2022" starttimestamp="1647394201042" timestamp="3020801" timestamp2="3020801">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1255" _type="InsertStringCommand" date="Tue Mar 15 22:20:21 EDT 2022" starttimestamp="1647394201042" timestamp="3020898" timestamp2="3020898">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1273" _type="PauseCommand" date="Tue Mar 15 22:20:25 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3024227">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1003]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1272" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:20:25 EDT 2022" starttimestamp="1647394201042" timestamp="3024227" />
  <Command __id="1274" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:20:25 EDT 2022" starttimestamp="1647394201042" timestamp="3024231" />
  <Command __id="1276" _type="PauseCommand" date="Tue Mar 15 22:20:30 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3029111">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4880]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1277" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 15 22:20:30 EDT 2022" docOffset="0" starttimestamp="1647394201042" timestamp="3029342" />
  <Command __id="1284" _type="PauseCommand" date="Tue Mar 15 22:21:17 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="3076906">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[34137]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1283" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:21:17 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3076906" type="Run" />
  <Command __id="1285" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:21:17 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3076906" type="Run" />
  <Command __id="1287" _type="PauseCommand" date="Tue Mar 15 22:21:27 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="3086308">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[9402]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1286" _type="ShellCommand" date="Tue Mar 15 22:21:27 EDT 2022" starttimestamp="1647394201042" timestamp="3086308" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1289" _type="PauseCommand" date="Tue Mar 15 22:21:28 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3087484">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1176]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1288" _type="ShellCommand" date="Tue Mar 15 22:21:28 EDT 2022" starttimestamp="1647394201042" timestamp="3087484" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1291" _type="MoveCaretCommand" caretOffset="276" date="Tue Mar 15 22:21:28 EDT 2022" docOffset="276" starttimestamp="1647394201042" timestamp="3087686" />
  <Command __id="1293" _type="PauseCommand" date="Tue Mar 15 22:21:30 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3089343">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1657]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1294" _type="SelectTextCommand" caretOffset="1164" date="Tue Mar 15 22:21:30 EDT 2022" end="1164" start="1150" starttimestamp="1647394201042" timestamp="3089508" />
  <Command __id="1296" _type="PauseCommand" date="Tue Mar 15 22:21:32 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3091219">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1711]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1297" _type="MoveCaretCommand" caretOffset="389" date="Tue Mar 15 22:21:32 EDT 2022" docOffset="389" starttimestamp="1647394201042" timestamp="3091372" />
  <Command __id="1302" _type="PauseCommand" date="Tue Mar 15 22:21:37 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3096366">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1559]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1301" _type="ProgramExecutionEvent" className="/533Assignment3/src/facebook/ServerFacebookMapReduce.java" date="Tue Mar 15 22:21:37 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3096366" type="Run" />
  <Command __id="1303" _type="RunCommand" className="/533Assignment3/src/facebook/ServerFacebookMapReduce.java" date="Tue Mar 15 22:21:37 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3096366" type="Run" />
  <Command __id="1305" _type="PauseCommand" date="Tue Mar 15 22:21:38 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3097685">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1319]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1304" _type="ConsoleOutput" date="Tue Mar 15 22:21:38 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3097685" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Controller:Please enter the number of threads
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s21.assignment3.facebookMapReduce.tests.DistributedFacebookMapReducePartialReduce@35734350 . Results may change."), Diff(INSERT,"Thread[main,5,main]:Controller:Please enter the number of threads"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1311" _type="PauseCommand" date="Tue Mar 15 22:21:41 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3100875">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1714]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1310" _type="RunCommand" className="/533Assignment3/src/facebook/RemoteClientFacebookMapReduce.java" date="Tue Mar 15 22:21:41 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3100875" type="Run" />
  <Command __id="1313" _type="PauseCommand" date="Tue Mar 15 22:21:43 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3102407">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1532]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1312" _type="ConsoleOutput" date="Tue Mar 15 22:21:43 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3102407" type="ConsoleOutput">
    <outputString><![CDATA[Thread[RMI TCP Connection(2)-192.168.1.161,5,RMI Runtime]:Model:Register:Proxy[ClientInterface,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62758](remote),objID:[4d7fefd2:17f9087efdd:-7fff, -6932437220173519707]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread["), Diff(DELETE,"main,5,main]:Controller:Please enter the number of threads"), Diff(INSERT,"RMI TCP Connection(2)-192.168.1.161,5,RMI Runtime]:Model:Register:Proxy[ClientInterface,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62758](remote),objID:[4d7fefd2:17f9087efdd:-7fff, -6932437220173519707]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1314" _type="ConsoleOutput" date="Tue Mar 15 22:21:43 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3102635" type="ConsoleOutput">
    <outputString><![CDATA[!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Proxy[RemoteModel,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62757](remote),objID:[-1b38edf9:17f9087de1b:-7fff, 7092056459875003239]]]]]
facebook.RemoteClientFacebookMapReduce@307f6b8c
?????????????????????????????????
Thread[main,5,main]:facebook.RemoteClientFacebookMapReduce@307f6b8c:wait
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Thread[RMI TCP Connection(2)-192.168.1.161,5,RMI Runtime]:Model:Register:Proxy[ClientInterface"), Diff(INSERT,"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!¶Proxy[RemoteModel"), Diff(EQUAL,",RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:6275"), Diff(DELETE,"8"), Diff(INSERT,"7"), Diff(EQUAL,"](remote),objID:["), Diff(DELETE,"4d7fefd2"), Diff(INSERT,"-1b38edf9"), Diff(EQUAL,":17f9087"), Diff(DELETE,"efdd"), Diff(INSERT,"de1b"), Diff(EQUAL,":-7fff, "), Diff(DELETE,"-6932437220173519707]]]]]"), Diff(INSERT,"7092056459875003239]]]]]¶facebook.RemoteClientFacebookMapReduce@307f6b8c¶?????????????????????????????????¶Thread[main,5,main]:facebook.RemoteClientFacebookMapReduce@307f6b8c:wait"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1324" _type="PauseCommand" date="Tue Mar 15 22:22:14 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3133730">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4701]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1323" _type="ProgramExecutionEvent" className="/533Assignment3/src/facebook/RemoteClientFacebookMapReduce.java" date="Tue Mar 15 22:22:14 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3133730" type="Run" />
  <Command __id="1325" _type="ProgramExecutionEvent" className="/533Assignment3/src/facebook/RemoteClientFacebookMapReduce.java" date="Tue Mar 15 22:22:14 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3133730" type="Run" />
  <Command __id="1331" _type="PauseCommand" date="Tue Mar 15 22:22:19 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3138463">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1823]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1330" _type="ProgramExecutionEvent" className="/533Assignment3/src/facebook/ServerFacebookMapReduce.java" date="Tue Mar 15 22:22:19 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3138463" type="Run" />
  <Command __id="1332" _type="RunCommand" className="/533Assignment3/src/facebook/ServerFacebookMapReduce.java" date="Tue Mar 15 22:22:19 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3138463" type="Run" />
  <Command __id="1334" _type="PauseCommand" date="Tue Mar 15 22:22:20 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3139781">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1318]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1333" _type="ConsoleOutput" date="Tue Mar 15 22:22:20 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3139781" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Controller:Please enter the number of threads
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:"), Diff(DELETE,"comp533.barrier.Barrier@3d8314f0:Barrier Created:comp533.barrier.Barrier@3d8314f0:3"), Diff(INSERT,"Controller:Please enter the number of threads"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1340" _type="PauseCommand" date="Tue Mar 15 22:22:25 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3144643">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3345]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1339" _type="RunCommand" className="/533Assignment3/src/facebook/RemoteClientFacebookMapReduce.java" date="Tue Mar 15 22:22:25 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3144643" type="Run" />
  <Command __id="1342" _type="PauseCommand" date="Tue Mar 15 22:22:27 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3146095">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1452]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1341" _type="ConsoleOutput" date="Tue Mar 15 22:22:27 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3146095" type="ConsoleOutput">
    <outputString><![CDATA[Thread[RMI TCP Connection(2)-192.168.1.161,5,RMI Runtime]:Model:Register:Proxy[ClientInterface,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62777](remote),objID:[-7a45ad21:17f90889ac7:-7fff, -4571585151119462268]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread["), Diff(DELETE,"main,5,main]:Controller:Please enter the number of threads"), Diff(INSERT,"RMI TCP Connection(2)-192.168.1.161,5,RMI Runtime]:Model:Register:Proxy[ClientInterface,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62777](remote),objID:[-7a45ad21:17f90889ac7:-7fff, -4571585151119462268]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1343" _type="ConsoleOutput" date="Tue Mar 15 22:22:27 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3146428" type="ConsoleOutput">
    <outputString><![CDATA[!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Proxy[RemoteModel,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62775](remote),objID:[-577209a8:17f90888291:-7fff, -4386951440615284181]]]]]
facebook.RemoteClientFacebookMapReduce@307f6b8c
?????????????????????????????????
Thread[main,5,main]:facebook.RemoteClientFacebookMapReduce@307f6b8c:wait
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Thread[RMI TCP Connection(2)-192.168.1.161,5,RMI Runtime]:Model:Register:Proxy[ClientInterface"), Diff(INSERT,"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!¶Proxy[RemoteModel"), Diff(EQUAL,",RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:6277"), Diff(DELETE,"7"), Diff(INSERT,"5"), Diff(EQUAL,"](remote),objID:[-"), Diff(DELETE,"7a45ad21"), Diff(INSERT,"577209a8"), Diff(EQUAL,":17f9088"), Diff(DELETE,"9ac7"), Diff(INSERT,"8291"), Diff(EQUAL,":-7fff, -4"), Diff(DELETE,"571585151119462268]]]]]"), Diff(INSERT,"386951440615284181]]]]]¶facebook.RemoteClientFacebookMapReduce@307f6b8c¶?????????????????????????????????¶Thread[main,5,main]:facebook.RemoteClientFacebookMapReduce@307f6b8c:wait"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1348" _type="PauseCommand" date="Tue Mar 15 22:22:32 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3151131">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1905]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1347" _type="RunCommand" className="/533Assignment3/src/facebook/RemoteClientFacebookMapReduce.java" date="Tue Mar 15 22:22:32 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3151131" type="Run" />
  <Command __id="1350" _type="PauseCommand" date="Tue Mar 15 22:22:33 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3152562">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1431]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1349" _type="ConsoleOutput" date="Tue Mar 15 22:22:33 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3152562" type="ConsoleOutput">
    <outputString><![CDATA[Thread[RMI TCP Connection(4)-192.168.1.161,5,RMI Runtime]:Model:Register:Proxy[ClientInterface,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62783](remote),objID:[-7ae933f9:17f9088b442:-7fff, 5933634923929200606]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!¶Proxy[RemoteModel"), Diff(INSERT,"Thread[RMI TCP Connection(4)-192.168.1.161,5,RMI Runtime]:Model:Register:Proxy[ClientInterface"), Diff(EQUAL,",RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:627"), Diff(DELETE,"75"), Diff(INSERT,"83"), Diff(EQUAL,"](remote),objID:[-"), Diff(DELETE,"577209a8"), Diff(INSERT,"7ae933f9"), Diff(EQUAL,":17f9088"), Diff(DELETE,"8291"), Diff(INSERT,"b442"), Diff(EQUAL,":-7fff, "), Diff(DELETE,"-4386951440615284181]]]]]¶facebook.RemoteClientFacebookMapReduce@307f6b8c¶?????????????????????????????????¶Thread[main,5,main]:facebook.RemoteClientFacebookMapReduce@307f6b8c:wait"), Diff(INSERT,"5933634923929200606]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1351" _type="ConsoleOutput" date="Tue Mar 15 22:22:33 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3152837" type="ConsoleOutput">
    <outputString><![CDATA[!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Proxy[RemoteModel,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62775](remote),objID:[-577209a8:17f90888291:-7fff, -4386951440615284181]]]]]
facebook.RemoteClientFacebookMapReduce@307f6b8c
?????????????????????????????????
Thread[main,5,main]:facebook.RemoteClientFacebookMapReduce@307f6b8c:wait
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Thread[RMI TCP Connection(4)-192.168.1.161,5,RMI Runtime]:Model:Register:Proxy[ClientInterface"), Diff(INSERT,"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!¶Proxy[RemoteModel"), Diff(EQUAL,",RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:627"), Diff(DELETE,"83"), Diff(INSERT,"75"), Diff(EQUAL,"](remote),objID:[-"), Diff(DELETE,"7ae933f9"), Diff(INSERT,"577209a8"), Diff(EQUAL,":17f9088"), Diff(DELETE,"b442"), Diff(INSERT,"8291"), Diff(EQUAL,":-7fff, "), Diff(DELETE,"5933634923929200606]]]]]"), Diff(INSERT,"-4386951440615284181]]]]]¶facebook.RemoteClientFacebookMapReduce@307f6b8c¶?????????????????????????????????¶Thread[main,5,main]:facebook.RemoteClientFacebookMapReduce@307f6b8c:wait"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1353" _type="PauseCommand" date="Tue Mar 15 22:22:38 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3157216">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4379]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1354" _type="MoveCaretCommand" caretOffset="164" date="Tue Mar 15 22:22:38 EDT 2022" docOffset="164" starttimestamp="1647394201042" timestamp="3157266" />
  <Command __id="1355" _type="MoveCaretCommand" caretOffset="164" date="Tue Mar 15 22:22:38 EDT 2022" docOffset="164" starttimestamp="1647394201042" timestamp="3157323" />
  <Command __id="1357" _type="PauseCommand" date="Tue Mar 15 22:22:40 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3159441">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2118]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1356" _type="ConsoleInput" date="Tue Mar 15 22:22:40 EDT 2022" starttimestamp="1647394201042" timestamp="3159441" type="Exception">
    <outputString><![CDATA[3
]]></outputString>
  </Command>
  <Command __id="1358" _type="ConsoleOutput" date="Tue Mar 15 22:22:40 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3159546" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:comp533.joiner.Joiner@de3a06f:Joiner Created:comp533.joiner.Joiner@de3a06f:3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!¶Proxy[RemoteModel,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62775](remote),objID:[-577209a8:17f90888291:-7fff, -4386951440615284181]]]]]¶facebook.RemoteClientFacebookMapReduce@307f6b8c¶?????????????????????????????????¶Thread[main,5,main]:facebook.RemoteClientFacebookMapReduce@307f6b8c:wait"), Diff(INSERT,"Thread[main,5,main]:comp533.joiner.Joiner@de3a06f:Joiner Created:comp533.joiner.Joiner@de3a06f:3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1359" _type="ConsoleOutput" date="Tue Mar 15 22:22:40 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3159649" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:comp533.barrier.Barrier@3d8314f0:Barrier Created:comp533.barrier.Barrier@3d8314f0:3
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:comp533."), Diff(DELETE,"joiner.Joiner@de3a06f:Join"), Diff(INSERT,"barrier.Barrier@3d8314f0:Barri"), Diff(EQUAL,"er Created:comp533."), Diff(DELETE,"joiner.Joiner@de3a06f"), Diff(INSERT,"barrier.Barrier@3d8314f0"), Diff(EQUAL,":3¶")]]]></diff>
  </Command>
  <Command __id="1360" _type="ConsoleOutput" date="Tue Mar 15 22:22:40 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3159704" type="ConsoleOutput">
    <outputString><![CDATA[@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
[facebook.FacebookSlave@58a90037, facebook.FacebookSlave@74294adb, facebook.FacebookSlave@70a9f84e]
[Proxy[ClientInterface,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62777](remote),objID:[-7a45ad21:17f90889ac7:-7fff, -4571585151119462268]]]]], Proxy[ClientInterface,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62783](remote),objID:[-7ae933f9:17f9088b442:-7fff, 5933634923929200606]]]]]]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
[facebook.FacebookSlave@58a90037, facebook.FacebookSlave@74294adb]
[Proxy[ClientInterface,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62777](remote),objID:[-7a45ad21:17f90889ac7:-7fff, -4571585151119462268]]]]]]
Thread[main,5,main]:Controller:Please enter quit or a line of tokens to be processed separated by spaces
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Thread[main,5,main]:comp533.barrier.Barrier@3d8314f0:Barrier Created:comp533.barrier.Barrier@3d8314f0:3"), Diff(INSERT,"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@¶[facebook.FacebookSlave@58a90037, facebook.FacebookSlave@74294adb, facebook.FacebookSlave@70a9f84e]¶[Proxy[ClientInterface,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62777](remote),objID:[-7a45ad21:17f90889ac7:-7fff, -4571585151119462268]]]]], Proxy[ClientInterface,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62783](remote),objID:[-7ae933f9:17f9088b442:-7fff, 5933634923929200606]]]]]]¶@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@¶[facebook.FacebookSlave@58a90037, facebook.FacebookSlave@74294adb]¶[Proxy[ClientInterface,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62777](remote),objID:[-7a45ad21:17f90889ac7:-7fff, -4571585151119462268]]]]]]¶Thread[main,5,main]:Controller:Please enter quit or a line of tokens to be processed separated by spaces"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1362" _type="PauseCommand" date="Tue Mar 15 22:22:59 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3178355">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[18651]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1361" _type="ConsoleInput" date="Tue Mar 15 22:22:59 EDT 2022" starttimestamp="1647394201042" timestamp="3178355" type="Exception">
    <outputString><![CDATA[a,b,c b,a,c c,a,b,d d,c
]]></outputString>
  </Command>
  <Command __id="1363" _type="ConsoleOutput" date="Tue Mar 15 22:22:59 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3178409" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:View:java.beans.PropertyChangeEvent[propertyName=InputString; oldValue=null; newValue=a,b,c b,a,c c,a,b,d d,c; propagationId=null; source=Model]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@¶[facebook.FacebookSlave@58a90037, facebook.FacebookSlave@74294adb, facebook.FacebookSlave@70a9f84e]¶[Proxy[ClientInterface,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62777](remote),objID:[-7a45ad21:17f90889ac7:-7fff, -4571585151119462268]]]]], Proxy[ClientInterface,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62783](remote),objID:[-7ae933f9:17f9088b442:-7fff, 5933634923929200606]]]]]]¶@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@¶[facebook.FacebookSlave@58a90037, facebook.FacebookSlave@74294adb]¶[Proxy[ClientInterface,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.161:62777](remote),objID:[-7a45ad21:17f90889ac7:-7fff, -4571585151119462268]]]]]]¶Thread[main,5,main]:Controller:Please enter quit or a line of tokens to be processed separated by spaces"), Diff(INSERT,"Thread[main,5,main]:View:java.beans.PropertyChangeEvent[propertyName=InputString; oldValue=null; newValue=a,b,c b,a,c c,a,b,d d,c; propagationId=null; source=Model]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1364" _type="ConsoleOutput" date="Tue Mar 15 22:22:59 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3178512" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:facebook.FacebookSlave@58a90037:notify
Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:[]
Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:[]
Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:dequeue:[]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:"), Diff(DELETE,"View:java.beans.PropertyChangeEvent[propertyName=InputString; oldValue=null; newValue=a,b,c b,a,c c,a,b,d d,c; propagationId=null; source=Model"), Diff(INSERT,"facebook.FacebookSlave@58a90037:notify¶Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:[]¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:[]¶Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:dequeue:["), Diff(EQUAL,"]¶")]]]></diff>
  </Command>
  <Command __id="1365" _type="ConsoleOutput" date="Tue Mar 15 22:22:59 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3178612" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:facebook.FacebookSlave@74294adb:notify
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:facebook.FacebookSlave@"), Diff(DELETE,"58a90037:notify¶Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:[]¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:[]¶Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:dequeue:[]"), Diff(INSERT,"74294adb:notify"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1366" _type="ConsoleOutput" date="Tue Mar 15 22:22:59 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3178716" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:facebook.FacebookSlave@70a9f84e:notify
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:facebook.FacebookSlave@7"), Diff(DELETE,"4294adb"), Diff(INSERT,"0a9f84e"), Diff(EQUAL,":notify¶")]]]></diff>
  </Command>
  <Command __id="1367" _type="ConsoleOutput" date="Tue Mar 15 22:22:59 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3178813" type="ConsoleOutput">
    <outputString><![CDATA[()()()()()()()()()()(()(())(()())()()(())(()()(
Thread[main,5,main]:Model:Remote List:[Ljava.lang.String;@166fa74d
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Thread[main,5,main]:facebook.FacebookSlave@70a9f84e:notify"), Diff(INSERT,"()()()()()()()()()()(()(())(()())()()(())(()()(¶Thread[main,5,main]:Model:Remote List:[Ljava.lang.String;@166fa74d"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1368" _type="ConsoleOutput" date="Tue Mar 15 22:22:59 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3178931" type="ConsoleOutput">
    <outputString><![CDATA[+++++++++++++++++++++++++++++++++++++++++++++++++
a_b [b, c]
Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:a,b,c:(a_b,[b, c])
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"()()()()()()()()()()(()(())(()())()()(())(()()(¶Thread[main,5,main]:Model:Remote List:[Ljava.lang.String;@166fa74d"), Diff(INSERT,"+++++++++++++++++++++++++++++++++++++++++++++++++¶a_b [b, c]¶Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:a,b,c:(a_b,[b, c])"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1369" _type="ConsoleOutput" date="Tue Mar 15 22:23:00 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3179066" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:(a_b,[b, c])
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"+++++++++++++++++++++++++++++++++++++++++++++++++¶a_b [b, c]¶Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:a,b,c"), Diff(INSERT,"Thread[main,5,main]:Model:enqueue"), Diff(EQUAL,":(a_b,[b, c])¶")]]]></diff>
  </Command>
  <Command __id="1370" _type="ConsoleOutput" date="Tue Mar 15 22:23:00 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3179183" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:[(a_b,[b, c])]
Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:(a_b,[b, c])
a_c [b, c]
Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:[]
Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:a,b,c:(a_c,[b, c])
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:Model:enqueue:"), Diff(INSERT,"["), Diff(EQUAL,"(a_b,[b,"), Diff(INSERT," c])]¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:(a_b,[b, c])¶a_c [b, c]¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:[]¶Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:a,b,c:(a_c,[b,"), Diff(EQUAL," c])¶")]]]></diff>
  </Command>
  <Command __id="1371" _type="ConsoleOutput" date="Tue Mar 15 22:23:00 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3179367" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:(a_c,[b, c])
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:Model:enqueue:"), Diff(DELETE,"[(a_b,[b, c])]¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:(a_b,[b, c])¶a_c [b, c]¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:[]¶Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:a,b,c:"), Diff(EQUAL,"(a_c,[b, c])¶")]]]></diff>
  </Command>
  <Command __id="1372" _type="ConsoleOutput" date="Tue Mar 15 22:23:00 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3179467" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:[(a_c,[b, c])]
Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:(a_c,[b, c])
()()()()()()()()()()(()(())(()())()()(())(()()(
Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:[]
Thread[main,5,main]:Model:Remote List:[Ljava.lang.String;@33b37288
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:Model:enqueue:"), Diff(INSERT,"["), Diff(EQUAL,"(a_c,[b, c])"), Diff(INSERT,"]¶Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:(a_c,[b, c])¶()()()()()()()()()()(()(())(()())()()(())(()()(¶Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:[]¶Thread[main,5,main]:Model:Remote List:[Ljava.lang.String;@33b37288"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1373" _type="ConsoleOutput" date="Tue Mar 15 22:23:00 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3179618" type="ConsoleOutput">
    <outputString><![CDATA[+++++++++++++++++++++++++++++++++++++++++++++++++
a_b [a, c]
Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:b,a,c:(a_b,[a, c])
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Thread[main,5,main]:Model:enqueue:[(a_c,[b"), Diff(INSERT,"+++++++++++++++++++++++++++++++++++++++++++++++++¶a_b [a"), Diff(EQUAL,", c]"), Diff(DELETE,")]"), Diff(EQUAL,"¶Thread["), Diff(DELETE,"Slave0"), Diff(INSERT,"main"), Diff(EQUAL,",5,main]:facebook.Facebook"), Diff(DELETE,"Slave@58a90037:dequeue:(a_c,[b, c])¶()()()()()()()()()()(()(())(()())()()(())(()()(¶Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:[]¶Thread[main,5,main]:Model:Remote List:[Ljava.lang.String;@33b37288"), Diff(INSERT,"Mapper@588df31b:Map:b,a,c:(a_b,[a, c])"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1374" _type="ConsoleOutput" date="Tue Mar 15 22:23:00 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3179724" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:(a_b,[a, c])
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"+++++++++++++++++++++++++++++++++++++++++++++++++¶a_b [a, c]¶Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:b,a,c"), Diff(INSERT,"Thread[main,5,main]:Model:enqueue"), Diff(EQUAL,":(a_b,[a, c])¶")]]]></diff>
  </Command>
  <Command __id="1375" _type="ConsoleOutput" date="Tue Mar 15 22:23:00 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3179868" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:[(a_b,[a, c])]
Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:dequeue:(a_b,[a, c])
b_c [a, c]
Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:dequeue:[]
Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:b,a,c:(b_c,[a, c])
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:Model:enqueue:"), Diff(INSERT,"["), Diff(EQUAL,"(a_b,[a,"), Diff(INSERT," c])]¶Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:dequeue:(a_b,[a, c])¶b_c [a, c]¶Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:dequeue:[]¶Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:b,a,c:(b_c,[a,"), Diff(EQUAL," c])¶")]]]></diff>
  </Command>
  <Command __id="1376" _type="ConsoleOutput" date="Tue Mar 15 22:23:01 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3180019" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:(b_c,[a, c])
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:Model:enqueue:"), Diff(DELETE,"[(a_b,[a, c])]¶Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:dequeue:(a_b,[a, c])¶b_c [a, c]¶Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:dequeue:[]¶Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:b,a,c:"), Diff(EQUAL,"(b_c,[a, c])¶")]]]></diff>
  </Command>
  <Command __id="1377" _type="ConsoleOutput" date="Tue Mar 15 22:23:01 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3180122" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:[(b_c,[a, c])]
Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:(b_c,[a, c])
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:Model:enqueue:"), Diff(INSERT,"[(b_c,[a, c])]¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:"), Diff(EQUAL,"(b_c,[a, c])¶")]]]></diff>
  </Command>
  <Command __id="1378" _type="ConsoleOutput" date="Tue Mar 15 22:23:01 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3180231" type="ConsoleOutput">
    <outputString><![CDATA[()()()()()()()()()()(()(())(()())()()(())(()()(
Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:[]
Thread[main,5,main]:Model:Remote List:[Ljava.lang.String;@77a57272
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Thread[main,5,main]:Model:enqueue:[(b_c,[a, c])]"), Diff(INSERT,"()()()()()()()()()()(()(())(()())()()(())(()()("), Diff(EQUAL,"¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:"), Diff(DELETE,"(b_c,[a, c])"), Diff(INSERT,"[]¶Thread[main,5,main]:Model:Remote List:[Ljava.lang.String;@77a57272"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1379" _type="ConsoleOutput" date="Tue Mar 15 22:23:01 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3180345" type="ConsoleOutput">
    <outputString><![CDATA[+++++++++++++++++++++++++++++++++++++++++++++++++
a_c [a, b, d]
Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:c,a,b,d:(a_c,[a, b, d])
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"()()()()()()()()()()(()(())(()())()()(())(()()("), Diff(INSERT,"+++++++++++++++++++++++++++++++++++++++++++++++++¶a_c [a, b, d]"), Diff(EQUAL,"¶Thread["), Diff(DELETE,"Slave2"), Diff(INSERT,"main"), Diff(EQUAL,",5,main]:facebook.Facebook"), Diff(DELETE,"Slave@70a9f84e:dequeue:[]¶Thread[main,5,main]:Model:Remote List:[Ljava.lang.String;@77a57272"), Diff(INSERT,"Mapper@588df31b:Map:c,a,b,d:(a_c,[a, b, d])"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1380" _type="ConsoleOutput" date="Tue Mar 15 22:23:01 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3180448" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:(a_c,[a, b, d])
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"+++++++++++++++++++++++++++++++++++++++++++++++++¶a_c [a, b, d]¶Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:c,a,b,d"), Diff(INSERT,"Thread[main,5,main]:Model:enqueue"), Diff(EQUAL,":(a_c,[a, b, d])¶")]]]></diff>
  </Command>
  <Command __id="1381" _type="ConsoleOutput" date="Tue Mar 15 22:23:01 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3180523" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:[(a_c,[a, b, d])]
Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:(a_c,[a, b, d])
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:Model:enqueue:"), Diff(INSERT,"[(a_c,[a, b, d])]¶Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:"), Diff(EQUAL,"(a_c,[a, b, d])¶")]]]></diff>
  </Command>
  <Command __id="1382" _type="ConsoleOutput" date="Tue Mar 15 22:23:01 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3180623" type="ConsoleOutput">
    <outputString><![CDATA[b_c [a, b, d]
Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:[]
Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:c,a,b,d:(b_c,[a, b, d])
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"b_c [a, b, d]¶"), Diff(EQUAL,"Thread["), Diff(DELETE,"main"), Diff(INSERT,"Slave0"), Diff(EQUAL,",5,main]:"), Diff(DELETE,"Model:enqueue:[(a_c,[a, b, d])"), Diff(INSERT,"facebook.FacebookSlave@58a90037:dequeue:["), Diff(EQUAL,"]¶Thread["), Diff(DELETE,"Slave0"), Diff(INSERT,"main"), Diff(EQUAL,",5,main]:facebook.Facebook"), Diff(DELETE,"Slave@58a90037:dequeue"), Diff(INSERT,"Mapper@588df31b:Map:c,a,b,d"), Diff(EQUAL,":("), Diff(DELETE,"a"), Diff(INSERT,"b"), Diff(EQUAL,"_c,[a, b, d])¶")]]]></diff>
  </Command>
  <Command __id="1383" _type="ConsoleOutput" date="Tue Mar 15 22:23:01 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3180725" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:(b_c,[a, b, d])
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"b_c [a, b, d]¶"), Diff(EQUAL,"Thread["), Diff(DELETE,"Slave0"), Diff(INSERT,"main"), Diff(EQUAL,",5,main]:"), Diff(DELETE,"facebook.FacebookSlave@58a90037:dequeue:[]¶Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:c,a,b,d"), Diff(INSERT,"Model:enqueue"), Diff(EQUAL,":(b_c,[a, b, d])¶")]]]></diff>
  </Command>
  <Command __id="1384" _type="ConsoleOutput" date="Tue Mar 15 22:23:01 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3180829" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:[(b_c,[a, b, d])]
Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:dequeue:(b_c,[a, b, d])
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:Model:enqueue:"), Diff(INSERT,"[(b_c,[a, b, d])]¶Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:dequeue:"), Diff(EQUAL,"(b_c,[a, b, d])¶")]]]></diff>
  </Command>
  <Command __id="1385" _type="ConsoleOutput" date="Tue Mar 15 22:23:01 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3180945" type="ConsoleOutput">
    <outputString><![CDATA[c_d [a, b, d]
Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:dequeue:[]
Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:c,a,b,d:(c_d,[a, b, d])
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"c_d [a, b, d]¶"), Diff(EQUAL,"Thread["), Diff(DELETE,"main"), Diff(INSERT,"Slave1"), Diff(EQUAL,",5,main]:"), Diff(DELETE,"Model:enqueue:[(b_c,[a, b, d])"), Diff(INSERT,"facebook.FacebookSlave@74294adb:dequeue:["), Diff(EQUAL,"]¶Thread["), Diff(DELETE,"Slave1"), Diff(INSERT,"main"), Diff(EQUAL,",5,main]:facebook.Facebook"), Diff(DELETE,"Slave@74294adb:dequeue:(b_c"), Diff(INSERT,"Mapper@588df31b:Map:c,a,b,d:(c_d"), Diff(EQUAL,",[a, b, d])¶")]]]></diff>
  </Command>
  <Command __id="1386" _type="ConsoleOutput" date="Tue Mar 15 22:23:02 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3181026" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:(c_d,[a, b, d])
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"c_d [a, b, d]¶"), Diff(EQUAL,"Thread["), Diff(DELETE,"Slave1"), Diff(INSERT,"main"), Diff(EQUAL,",5,main]:"), Diff(DELETE,"facebook.FacebookSlave@74294adb:dequeue:[]¶Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:c,a,b,d"), Diff(INSERT,"Model:enqueue"), Diff(EQUAL,":(c_d,[a, b, d])¶")]]]></diff>
  </Command>
  <Command __id="1387" _type="ConsoleOutput" date="Tue Mar 15 22:23:02 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3181140" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:[(c_d,[a, b, d])]
Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:(c_d,[a, b, d])
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:Model:enqueue:"), Diff(INSERT,"[(c_d,[a, b, d])]¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:"), Diff(EQUAL,"(c_d,[a, b, d])¶")]]]></diff>
  </Command>
  <Command __id="1388" _type="ConsoleOutput" date="Tue Mar 15 22:23:02 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3181243" type="ConsoleOutput">
    <outputString><![CDATA[()()()()()()()()()()(()(())(()())()()(())(()()(
Thread[main,5,main]:Model:Remote List:[Ljava.lang.String;@7181ae3f
Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:[]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Thread[main,5,main]:Model:enqueue:[(c_d,[a, b, d])]"), Diff(INSERT,"()()()()()()()()()()(()(())(()())()()(())(()()(¶Thread[main,5,main]:Model:Remote List:[Ljava.lang.String;@7181ae3f"), Diff(EQUAL,"¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:"), Diff(DELETE,"(c_d,[a, b, d])"), Diff(INSERT,"[]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1389" _type="ConsoleOutput" date="Tue Mar 15 22:23:02 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3181377" type="ConsoleOutput">
    <outputString><![CDATA[+++++++++++++++++++++++++++++++++++++++++++++++++
c_d [c]
Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:d,c:(c_d,[c])
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"()()()()()()()()()()(()(())(()())()()(())(()()(¶Thread[main,5,main]:Model:Remote List:[Ljava.lang.String;@7181ae3f"), Diff(INSERT,"+++++++++++++++++++++++++++++++++++++++++++++++++¶c_d [c]"), Diff(EQUAL,"¶Thread["), Diff(DELETE,"Slave2"), Diff(INSERT,"main"), Diff(EQUAL,",5,main]:facebook.Facebook"), Diff(DELETE,"Slave@70a9f84e:dequeue:[]"), Diff(INSERT,"Mapper@588df31b:Map:d,c:(c_d,[c])"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1390" _type="ConsoleOutput" date="Tue Mar 15 22:23:02 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3181430" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:(c_d,[c])
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"+++++++++++++++++++++++++++++++++++++++++++++++++¶c_d [c]¶Thread[main,5,main]:facebook.FacebookMapper@588df31b:Map:d,c"), Diff(INSERT,"Thread[main,5,main]:Model:enqueue"), Diff(EQUAL,":(c_d,[c])¶")]]]></diff>
  </Command>
  <Command __id="1391" _type="ConsoleOutput" date="Tue Mar 15 22:23:02 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3181578" type="ConsoleOutput">
    <outputString><![CDATA[Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:(c_d,[c])
Thread[main,5,main]:Model:enqueue:[(c_d,[c])]
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:(c_d,[c])¶"), Diff(EQUAL,"Thread[main,5,main]:Model:enqueue:"), Diff(INSERT,"["), Diff(EQUAL,"(c_d,[c])"), Diff(INSERT,"]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1392" _type="ConsoleOutput" date="Tue Mar 15 22:23:02 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3181641" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:(null,null)
Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:[]
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Thread[main,5,main]:Model:enqueue:(null,null)¶"), Diff(EQUAL,"Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:"), Diff(DELETE,"(c_d,[c])¶Thread[main,5,main]:Model:enqueue:[(c_d,[c])"), Diff(INSERT,"["), Diff(EQUAL,"]¶")]]]></diff>
  </Command>
  <Command __id="1393" _type="ConsoleOutput" date="Tue Mar 15 22:23:02 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3181780" type="ConsoleOutput">
    <outputString><![CDATA[Thread[main,5,main]:Model:enqueue:(null,null)
Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:(null,null)
Thread[main,5,main]:Model:enqueue:(null,null)
Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:(null,null)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[main,5,main]:Model:enqueue:(null,null)¶Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:dequeue:"), Diff(DELETE,"[]"), Diff(INSERT,"(null,null)¶Thread[main,5,main]:Model:enqueue:(null,null)¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:(null,null)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1394" _type="ConsoleOutput" date="Tue Mar 15 22:23:02 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3181881" type="ConsoleOutput">
    <outputString><![CDATA[slave3333333333333333333333333333
Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:Remote List:[(a_c,[b, c]), (a_c,[a, b, d]), (c_d,[c])]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Thread[main,5,main]:Model:enqueue:(null,null)"), Diff(INSERT,"slave3333333333333333333333333333"), Diff(EQUAL,"¶Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:"), Diff(DELETE,"dequeue:(null,null)¶Thread[main,5,main]:Model:enqueue:(null,null)¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:dequeue:(null,null)"), Diff(INSERT,"Remote List:[(a_c,[b, c]), (a_c,[a, b, d]), (c_d,[c])]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1395" _type="ConsoleOutput" date="Tue Mar 15 22:23:02 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3181935" type="ConsoleOutput">
    <outputString><![CDATA[slave3333333333333333333333333333
Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:dequeue:(null,null)
Thread[main,5,main]:comp533.joiner.Joiner@de3a06f:Joiner Wait Start:comp533.joiner.Joiner@de3a06f:3:0
slave44444444444444444444444444444
Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Remote List:[(a_b,[b, c]), (b_c,[a, c]), (c_d,[a, b, d])]
****************
[(a_c,[b, c]), (a_c,[a, b, d]), (c_d,[c])]
Thread[Slave0,5,main]:facebook.FacebookReducer@4a334ce8:reduce:[(a_c,[b, c]), (a_c,[a, b, d]), (c_d,[c])]:{a_c=[b], c_d=[c]}
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"slave3333333333333333333333333333¶Thread[Slave"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,",5,main]:facebook.FacebookSlave@"), Diff(DELETE,"58a90037:Remote List:[(a_c,[b, c]), (a_c,[a, b, d]), (c_d,[c])]"), Diff(INSERT,"74294adb:dequeue:(null,null)¶Thread[main,5,main]:comp533.joiner.Joiner@de3a06f:Joiner Wait Start:comp533.joiner.Joiner@de3a06f:3:0¶slave44444444444444444444444444444¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Remote List:[(a_b,[b, c]), (b_c,[a, c]), (c_d,[a, b, d])]¶****************¶[(a_c,[b, c]), (a_c,[a, b, d]), (c_d,[c])]¶Thread[Slave0,5,main]:facebook.FacebookReducer@4a334ce8:reduce:[(a_c,[b, c]), (a_c,[a, b, d]), (c_d,[c])]:{a_c=[b], c_d=[c]}"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1396" _type="ConsoleOutput" date="Tue Mar 15 22:23:03 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3182034" type="ConsoleOutput">
    <outputString><![CDATA[slave44444444444444444444444444444
Thread[main,5,main]:comp533.joiner.Joiner@de3a06f:wait
slave3333333333333333333333333333
****************
Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:Remote List:[(a_b,[a, c]), (b_c,[a, b, d])]
[(a_b,[b, c]), (b_c,[a, c]), (c_d,[a, b, d])]
Thread[Slave2,5,main]:facebook.FacebookReducer@6a491758:reduce:[(a_b,[b, c]), (b_c,[a, c]), (c_d,[a, b, d])]:{a_b=[b, c], b_c=[a, c], c_d=[a, b, d]}
reducer11111111111111111111111111111111111111
Thread[Slave0,5,main]:facebook.FacebookReducer@4a334ce8:Remote List:[(a_c,[b, c]), (a_c,[a, b, d]), (c_d,[c])]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"slave"), Diff(DELETE,"3"), Diff(INSERT,"44444444444444444444444444444¶Thread[main,5,main]:comp533.joiner.Joiner@de3a06f:wait¶slave"), Diff(EQUAL,"333333333333333333333333333"), Diff(INSERT,"3¶****************"), Diff(EQUAL,"¶Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:"), Diff(DELETE,"dequeue:(null,null)¶Thread[main,5,main]:comp533.joiner.Joiner@de3a06f:Joiner Wait Start:comp533.joiner.Joiner@de3a06f:3:0¶slave44444444444444444444444444444"), Diff(INSERT,"Remote List:[(a_b,[a, c]), (b_c,[a, b, d])]¶[(a_b,[b, c]), (b_c,[a, c]), (c_d,[a, b, d])]"), Diff(EQUAL,"¶Thread[Slave2,5,main]:facebook.Facebook"), Diff(DELETE,"Slave@70a9f84e:Remote List"), Diff(INSERT,"Reducer@6a491758:reduce"), Diff(EQUAL,":[(a_b,[b, c]), (b_c,[a, c]), (c_d,[a, b, d])]"), Diff(DELETE,"¶****************¶[(a_c,"), Diff(INSERT,":{a_b="), Diff(EQUAL,"[b, c]"), Diff(DELETE,")"), Diff(EQUAL,", "), Diff(DELETE,"(a_c,[a, b, d]), (c_d,[c])]"), Diff(INSERT,"b_c=[a, c], c_d=[a, b, d]}¶reducer11111111111111111111111111111111111111"), Diff(EQUAL,"¶Thread[Slave0,5,main]:facebook.FacebookReducer@4a334ce8:"), Diff(DELETE,"reduce"), Diff(INSERT,"Remote List"), Diff(EQUAL,":[(a_c,[b, c]), (a_c,[a, b, d]), (c_d,[c])]"), Diff(DELETE,":{a_c=[b], c_d=[c]}"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1397" _type="ConsoleOutput" date="Tue Mar 15 22:23:03 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3182152" type="ConsoleOutput">
    <outputString><![CDATA[slave44444444444444444444444444444
reducer11111111111111111111111111111111111111
****************
Thread[Slave2,5,main]:facebook.FacebookReducer@6a491758:Remote List:[(a_b,[b, c]), (b_c,[a, c]), (c_d,[a, b, d])]
[(a_b,[a, c]), (b_c,[a, b, d])]
Thread[Slave1,5,main]:facebook.FacebookReducer@471aa2f5:reduce:[(a_b,[a, c]), (b_c,[a, b, d])]:{a_b=[a, c], b_c=[a, b, d]}
reducer2222222222222222222222222222222222222222
map
[(a_c,[b, c]), (a_c,[a, b, d]), (c_d,[c])]
Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:Partition Assigned:a_c:[b]:0:3
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"slave44444444444444444444444444444¶"), Diff(DELETE,"Thread[main,5,main]:comp533.joiner.Joiner@de3a06f:wait¶slave3333333333333333333333333333"), Diff(INSERT,"reducer11111111111111111111111111111111111111"), Diff(EQUAL,"¶****************¶Thread[Slave"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,",5,main]:facebook.Facebook"), Diff(DELETE,"Slave@74294adb"), Diff(INSERT,"Reducer@6a491758"), Diff(EQUAL,":Remote List:[(a_b,["), Diff(DELETE,"a"), Diff(INSERT,"b"), Diff(EQUAL,", c]), (b_c,[a,"), Diff(INSERT," c]), (c_d,[a,"), Diff(EQUAL," b, d])]¶[(a_b,["), Diff(DELETE,"b"), Diff(INSERT,"a"), Diff(EQUAL,", c]), (b_c,[a,"), Diff(DELETE," c]), (c_d,[a,"), Diff(EQUAL," b, d])]¶Thread[Slave"), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,",5,main]:facebook.FacebookReducer@"), Diff(DELETE,"6a491758"), Diff(INSERT,"471aa2f5"), Diff(EQUAL,":reduce:[(a_b,["), Diff(DELETE,"b"), Diff(INSERT,"a"), Diff(EQUAL,", c]), (b_c,[a,"), Diff(DELETE," c]), (c_d,[a,"), Diff(EQUAL," b, d])]:{a_b=["), Diff(DELETE,"b"), Diff(INSERT,"a"), Diff(EQUAL,", c], b_c=[a, "), Diff(DELETE,"c], c_d=[a, b, d]}¶reducer11111111111111111111111111111111111111"), Diff(INSERT,"b, d]}¶reducer2222222222222222222222222222222222222222¶map¶[(a_c,[b, c]), (a_c,[a, b, d]), (c_d,[c])]"), Diff(EQUAL,"¶Thread[Slave0,5,main]:facebook.Facebook"), Diff(DELETE,"Reducer@4a334ce8:Remote List:[("), Diff(INSERT,"Slave@58a90037:Partition Assigned:"), Diff(EQUAL,"a_c"), Diff(DELETE,","), Diff(INSERT,":"), Diff(EQUAL,"[b"), Diff(DELETE,", c]), (a_c,[a, b, d]), (c_d,[c])]"), Diff(INSERT,"]:0:3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1398" _type="ConsoleOutput" date="Tue Mar 15 22:23:03 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3182270" type="ConsoleOutput">
    <outputString><![CDATA[reducer2222222222222222222222222222222222222222
map
reducer11111111111111111111111111111111111111
[(a_b,[b, c]), (b_c,[a, c]), (c_d,[a, b, d])]
Thread[Slave1,5,main]:facebook.FacebookReducer@471aa2f5:Remote List:[(a_b,[a, c]), (b_c,[a, b, d])]
Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Partition Assigned:a_b:[b, c]:0:3
Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:Partition Assigned:c_d:[c]:0:3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"slave44444444444444444444444444444¶reducer11111111111111111111111111111111111111¶****************¶Thread[Slave2,5,main]:facebook.FacebookReducer@6a491758:Remote List:"), Diff(INSERT,"reducer2222222222222222222222222222222222222222¶map¶reducer11111111111111111111111111111111111111¶"), Diff(EQUAL,"[(a_b,[b, c]), (b_c,[a, c]), (c_d,[a, b, d])]¶"), Diff(DELETE,"[(a_b,[a, c]), (b_c,[a, b, d])]¶"), Diff(EQUAL,"Thread[Slave1,5,main]:facebook.FacebookReducer@471aa2f5:"), Diff(DELETE,"reduce"), Diff(INSERT,"Remote List"), Diff(EQUAL,":[(a_b,[a, c]), (b_c,[a, b, d])]"), Diff(DELETE,":{a_b=[a, c], b_c=[a, b, d]}¶reducer2222222222222222222222222222222222222222¶map¶[(a_c,[b, c]), (a_c,[a, b, d]), (c_d,[c])]"), Diff(INSERT,"¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Partition Assigned:a_b:[b, c]:0:3"), Diff(EQUAL,"¶Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:Partition Assigned:"), Diff(DELETE,"a_c"), Diff(INSERT,"c_d"), Diff(EQUAL,":["), Diff(DELETE,"b"), Diff(INSERT,"c"), Diff(EQUAL,"]:0:3¶")]]]></diff>
  </Command>
  <Command __id="1399" _type="ConsoleOutput" date="Tue Mar 15 22:23:03 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3182339" type="ConsoleOutput">
    <outputString><![CDATA[reducer2222222222222222222222222222222222222222
map
[(a_b,[a, c]), (b_c,[a, b, d])]
Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Partition Assigned:b_c:[a, c]:0:3
Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:Partition Assigned:a_b:[a, c]:0:3
Thread[Slave0,5,main]:comp533.barrier.Barrier@3d8314f0:Barrier Wait Start:comp533.barrier.Barrier@3d8314f0:3:1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"reducer2222222222222222222222222222222222222222¶map¶"), Diff(DELETE,"reducer11111111111111111111111111111111111111¶"), Diff(EQUAL,"[(a_b,["), Diff(DELETE,"b"), Diff(INSERT,"a"), Diff(EQUAL,", c]), (b_c,[a,"), Diff(DELETE," c]), (c_d,[a,"), Diff(EQUAL," b, d])]¶Thread[Slave"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,",5,main]:facebook.Facebook"), Diff(DELETE,"Reducer@471aa2f5:Remote List:[(a_b,[a, c]), ("), Diff(INSERT,"Slave@70a9f84e:Partition Assigned:"), Diff(EQUAL,"b_c"), Diff(DELETE,","), Diff(INSERT,":"), Diff(EQUAL,"[a, "), Diff(DELETE,"b, d])]"), Diff(INSERT,"c]:0:3"), Diff(EQUAL,"¶Thread[Slave"), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,",5,main]:facebook.FacebookSlave@7"), Diff(DELETE,"0a9f84e"), Diff(INSERT,"4294adb"), Diff(EQUAL,":Partition Assigned:a_b:["), Diff(DELETE,"b"), Diff(INSERT,"a"), Diff(EQUAL,", c]:0:3¶Thread[Slave0,5,main]:"), Diff(DELETE,"facebook.FacebookSlave@58a90037:Partition Assigned:c_d:[c]:"), Diff(INSERT,"comp533.barrier.Barrier@3d8314f0:Barrier Wait Start:comp533.barrier.Barrier@3d8314f"), Diff(EQUAL,"0:3"), Diff(INSERT,":1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1400" _type="ConsoleOutput" date="Tue Mar 15 22:23:03 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3182485" type="ConsoleOutput">
    <outputString><![CDATA[Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Partition Assigned:c_d:[a, b, d]:0:3
Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:Partition Assigned:b_c:[a, b, d]:0:3
Thread[Slave1,5,main]:comp533.barrier.Barrier@3d8314f0:Barrier Wait Start:comp533.barrier.Barrier@3d8314f0:3:2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"reducer2222222222222222222222222222222222222222¶map¶[(a_b,[a, c]), (b_c,[a, b, d])]¶"), Diff(EQUAL,"Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Partition Assigned:"), Diff(DELETE,"b_c"), Diff(INSERT,"c_d"), Diff(EQUAL,":[a, "), Diff(DELETE,"c"), Diff(INSERT,"b, d"), Diff(EQUAL,"]:0:3¶Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:Partition Assigned:"), Diff(DELETE,"a_b"), Diff(INSERT,"b_c"), Diff(EQUAL,":[a, "), Diff(DELETE,"c"), Diff(INSERT,"b, d"), Diff(EQUAL,"]:0:3¶Thread[Slave"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,",5,main]:comp533.barrier.Barrier@3d8314f0:Barrier Wait Start:comp533.barrier.Barrier@3d8314f0:3:"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1401" _type="ConsoleOutput" date="Tue Mar 15 22:23:03 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3182637" type="ConsoleOutput">
    <outputString><![CDATA[Thread[Slave2,5,main]:comp533.barrier.Barrier@3d8314f0:Barrier Release All:3:3:0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[Slave2,5,main]:"), Diff(DELETE,"facebook.FacebookSlave@70a9f84e:Partition Assigned:c_d:[a, b, d]:0:3¶Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:Partition Assigned:b_c:[a, b, d]:0:3¶Thread[Slave1,5,main]:comp533.barrier.Barrier@3d8314f0:Barrier Wait Start:"), Diff(EQUAL,"comp533.barrier.Barrier@3d8314f0"), Diff(INSERT,":Barrier Release All:3"), Diff(EQUAL,":3:"), Diff(DELETE,"2"), Diff(INSERT,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1402" _type="ConsoleOutput" date="Tue Mar 15 22:23:03 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3182738" type="ConsoleOutput">
    <outputString><![CDATA[Thread[Slave0,5,main]:comp533.barrier.Barrier@3d8314f0:Barrier Wait End:comp533.barrier.Barrier@3d8314f0:3:0
Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Partition After Barrier:2:[[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])], [], []]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[Slave"), Diff(DELETE,"2"), Diff(INSERT,"0"), Diff(EQUAL,",5,main]:comp533.barrier.Barrier@3d8314f0:Barrier "), Diff(DELETE,"Release All:3:3:0"), Diff(INSERT,"Wait End:comp533.barrier.Barrier@3d8314f0:3:0¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Partition After Barrier:2:[[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])], [], []]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1403" _type="ConsoleOutput" date="Tue Mar 15 22:23:03 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3182889" type="ConsoleOutput">
    <outputString><![CDATA[Thread[Slave1,5,main]:comp533.barrier.Barrier@3d8314f0:Barrier Wait End:comp533.barrier.Barrier@3d8314f0:3:0
Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:Partition After Barrier:0:[[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])], [], []]
slave3333333333333333333333333333
Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Remote List:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]
slave44444444444444444444444444444
Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:Partition After Barrier:1:[[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])], [], []]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Thread[Slave"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,",5,main]:comp533.barrier.Barrier@3d8314f0:Barrier Wait End:comp533.barrier.Barrier@3d8314f0:3:0¶Thread[Slave"), Diff(DELETE,"2,5,main]:facebook.FacebookSlave@70a9f84e"), Diff(INSERT,"0,5,main]:facebook.FacebookSlave@58a90037:Partition After Barrier:0:[[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])], [], []]¶slave3333333333333333333333333333¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Remote List:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]¶slave44444444444444444444444444444¶Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb"), Diff(EQUAL,":Partition After Barrier:"), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,":[[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])], [], []]¶")]]]></diff>
  </Command>
  <Command __id="1404" _type="ConsoleOutput" date="Tue Mar 15 22:23:03 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3182945" type="ConsoleOutput">
    <outputString><![CDATA[slave3333333333333333333333333333
****************
Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:Remote List:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]
[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]
Thread[Slave2,5,main]:facebook.FacebookReducer@6a491758:reduce:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]:{a_c=[b], a_b=[c], b_c=[a], c_d=[]}
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Thread[Slave1,5,main]:comp533.barrier.Barrier@3d8314f0:Barrier Wait End:comp533.barrier.Barrier@3d8314f0:3:0"), Diff(INSERT,"slave3333333333333333333333333333¶****************"), Diff(EQUAL,"¶Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:"), Diff(DELETE,"Partition After Barrier:0:["), Diff(INSERT,"Remote List:"), Diff(EQUAL,"[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]"), Diff(DELETE,", [], []]¶slave3333333333333333333333333333¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Remote List:"), Diff(INSERT,"¶"), Diff(EQUAL,"[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]¶"), Diff(DELETE,"slave44444444444444444444444444444¶"), Diff(EQUAL,"Thread[Slave"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,",5,main]:facebook.Facebook"), Diff(DELETE,"Slave@74294adb:Partition After Barrier:1:["), Diff(INSERT,"Reducer@6a491758:reduce:"), Diff(EQUAL,"[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]"), Diff(DELETE,", [], []]"), Diff(INSERT,":{a_c=[b], a_b=[c], b_c=[a], c_d=[]}"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1405" _type="ConsoleOutput" date="Tue Mar 15 22:23:04 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3183042" type="ConsoleOutput">
    <outputString><![CDATA[reducer11111111111111111111111111111111111111
slave3333333333333333333333333333
slave44444444444444444444444444444
Thread[Slave2,5,main]:facebook.FacebookReducer@6a491758:Remote List:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]
****************
Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:Remote List:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]
[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]
Thread[Slave0,5,main]:facebook.FacebookReducer@4a334ce8:reduce:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]:{a_c=[b], a_b=[c], b_c=[a], c_d=[]}
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"slave3333333333333333333333333333"), Diff(INSERT,"reducer11111111111111111111111111111111111111¶slave3333333333333333333333333333¶slave44444444444444444444444444444¶Thread[Slave2,5,main]:facebook.FacebookReducer@6a491758:Remote List:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]"), Diff(EQUAL,"¶****************¶Thread[Slave"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,",5,main]:facebook.FacebookSlave@"), Diff(DELETE,"58a90037"), Diff(INSERT,"74294adb"), Diff(EQUAL,":Remote List:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]¶[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]¶Thread[Slave"), Diff(DELETE,"2"), Diff(INSERT,"0"), Diff(EQUAL,",5,main]:facebook.FacebookReducer@"), Diff(DELETE,"6a49175"), Diff(INSERT,"4a334ce"), Diff(EQUAL,"8:reduce:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]:{a_c=[b], a_b=[c], b_c=[a], c_d=[]}¶")]]]></diff>
  </Command>
  <Command __id="1406" _type="ConsoleOutput" date="Tue Mar 15 22:23:04 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3183141" type="ConsoleOutput">
    <outputString><![CDATA[slave44444444444444444444444444444
reducer2222222222222222222222222222222222222222
map
reducer11111111111111111111111111111111111111
[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]
Thread[Slave0,5,main]:facebook.FacebookReducer@4a334ce8:Remote List:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]
****************
slave3333333333333333333333333333
Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Remote List:[]
[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]
Thread[Slave1,5,main]:facebook.FacebookReducer@471aa2f5:reduce:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]:{a_c=[b], a_b=[c], b_c=[a], c_d=[]}
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"reducer11111111111111111111111111111111111111¶slave3333333333333333333333333333¶"), Diff(EQUAL,"slave44444444444444444444444444444¶"), Diff(DELETE,"Thread[Slave2,5,main]:facebook.FacebookReducer@6a491758:Remote List:"), Diff(INSERT,"reducer2222222222222222222222222222222222222222¶map¶reducer11111111111111111111111111111111111111¶"), Diff(EQUAL,"[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]¶"), Diff(DELETE,"****************¶"), Diff(EQUAL,"Thread[Slave"), Diff(DELETE,"1"), Diff(INSERT,"0"), Diff(EQUAL,",5,main]:facebook.Facebook"), Diff(DELETE,"Slave@74294adb"), Diff(INSERT,"Reducer@4a334ce8"), Diff(EQUAL,":Remote List:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]¶"), Diff(INSERT,"****************¶slave3333333333333333333333333333¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Remote List:[]¶"), Diff(EQUAL,"[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]¶Thread[Slave"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,",5,main]:facebook.FacebookReducer@4"), Diff(DELETE,"a334ce8"), Diff(INSERT,"71aa2f5"), Diff(EQUAL,":reduce:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]:{a_c=[b], a_b=[c], b_c=[a], c_d=[]}¶")]]]></diff>
  </Command>
  <Command __id="1407" _type="ConsoleOutput" date="Tue Mar 15 22:23:04 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3183264" type="ConsoleOutput">
    <outputString><![CDATA[reducer11111111111111111111111111111111111111
reducer2222222222222222222222222222222222222222
Thread[Slave1,5,main]:facebook.FacebookReducer@471aa2f5:Remote List:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]
slave44444444444444444444444444444
map
****************
[]
[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]
slave3333333333333333333333333333
Thread[Slave2,5,main]:facebook.FacebookReducer@6a491758:reduce:[]:{}
Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:Remote List:[]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"slave44444444444444444444444444444"), Diff(INSERT,"reducer11111111111111111111111111111111111111"), Diff(EQUAL,"¶reducer2222222222222222222222222222222222222222¶"), Diff(DELETE,"map¶reducer11111111111111111111111111111111111111¶[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]¶"), Diff(EQUAL,"Thread[Slave"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,",5,main]:facebook.FacebookReducer@4"), Diff(DELETE,"a334ce8"), Diff(INSERT,"71aa2f5"), Diff(EQUAL,":Remote List:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]¶"), Diff(DELETE,"****************¶slave3333333333333333333333333333¶Thread[Slave2,5,main]:facebook.FacebookSlave@70a9f84e:Remote List:"), Diff(INSERT,"slave44444444444444444444444444444¶map¶****************¶"), Diff(EQUAL,"[]¶[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]¶"), Diff(INSERT,"slave3333333333333333333333333333¶"), Diff(EQUAL,"Thread[Slave"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,",5,main]:facebook.FacebookReducer@"), Diff(DELETE,"471aa2f5"), Diff(INSERT,"6a491758"), Diff(EQUAL,":reduce:["), Diff(DELETE,"(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]:{a_c=[b], a_b=[c], b_c=[a], c_d="), Diff(INSERT,"]:{}¶Thread[Slave0,5,main]:facebook.FacebookSlave@58a90037:Remote List:"), Diff(EQUAL,"[]"), Diff(DELETE,"}"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1408" _type="ConsoleOutput" date="Tue Mar 15 22:23:04 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3183343" type="ConsoleOutput">
    <outputString><![CDATA[reducer2222222222222222222222222222222222222222
map
reducer11111111111111111111111111111111111111
slave44444444444444444444444444444
[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]
****************
[]
Thread[Slave2,5,main]:facebook.FacebookReducer@6a491758:Remote List:[]
Thread[Slave0,5,main]:facebook.FacebookReducer@4a334ce8:reduce:[]:{}
slave3333333333333333333333333333
Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:Remote List:[]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"reducer11111111111111111111111111111111111111¶"), Diff(EQUAL,"reducer2222222222222222222222222222222222222222¶"), Diff(DELETE,"Thread[Slave1,5,main]:facebook.FacebookReducer@471aa2f5:Remote List:[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]"), Diff(INSERT,"map¶reducer11111111111111111111111111111111111111"), Diff(EQUAL,"¶slave44444444444444444444444444444¶"), Diff(DELETE,"map¶****************¶[]¶"), Diff(EQUAL,"[(a_c,[b]), (a_b,[b, c]), (c_d,[c]), (a_b,[a, c]), (b_c,[a, c]), (c_d,[a, b, d]), (b_c,[a, b, d])]¶"), Diff(DELETE,"slave3333333333333333333333333333"), Diff(INSERT,"****************¶[]"), Diff(EQUAL,"¶Thread[Slave2,5,main]:facebook.FacebookReducer@6a491758:"), Diff(DELETE,"reduce:[]:{}"), Diff(INSERT,"Remote List:[]¶Thread[Slave0,5,main]:facebook.FacebookReducer@4a334ce8:reduce:[]:{}¶slave3333333333333333333333333333"), Diff(EQUAL,"¶Thread[Slave"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,",5,main]:facebook.FacebookSlave@"), Diff(DELETE,"58a90037"), Diff(INSERT,"74294adb"), Diff(EQUAL,":Remote List:[]¶")]]]></diff>
  </Command>
  <Command __id="1429" _type="PauseCommand" date="Tue Mar 15 22:24:32 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3271242">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3418]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1428" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:24:32 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3271242" type="Run" />
  <Command __id="1430" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:24:32 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3271242" type="Run" />
  <Command __id="1432" _type="PauseCommand" date="Tue Mar 15 22:24:35 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3273986">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2744]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1431" _type="ShellCommand" date="Tue Mar 15 22:24:35 EDT 2022" starttimestamp="1647394201042" timestamp="3273986" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1434" _type="PauseCommand" date="Tue Mar 15 22:24:36 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3275228">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1242]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1433" _type="ConsoleOutput" date="Tue Mar 15 22:24:36 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3275228" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):23
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Thread[main,5,main]:C"), Diff(INSERT,"A3Configurati"), Diff(EQUAL,"on"), Diff(DELETE,"t"), Diff(INSERT,"P"), Diff(EQUAL,"ro"), Diff(DELETE,"ller:Please enter quit or a line of tokens to be processed separated by spaces¶Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:Remote Result:{a_c=[b], a_b=[c], b_c=[a], c_d=[]}¶Thread[Slave1,5,main]:facebook.FacebookSlave@74294adb:wait"), Diff(INSERT,"vided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):23"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1436" _type="PauseCommand" date="Tue Mar 15 22:24:40 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3279267">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4039]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1435" _type="ShellCommand" date="Tue Mar 15 22:24:40 EDT 2022" starttimestamp="1647394201042" timestamp="3279267" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1438" _type="PauseCommand" date="Tue Mar 15 22:24:42 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3281683">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2416]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1437" _type="ShellCommand" date="Tue Mar 15 22:24:42 EDT 2022" starttimestamp="1647394201042" timestamp="3281683" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1440" _type="PauseCommand" date="Tue Mar 15 22:24:54 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3293503">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11820]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1439" _type="ConsoleOutput" date="Tue Mar 15 22:24:54 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3293503" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):23"), Diff(INSERT,"Number of traces > 600  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1442" _type="PauseCommand" date="Tue Mar 15 22:25:06 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3305013">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11510]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1441" _type="ConsoleOutput" date="Tue Mar 15 22:25:06 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3305013" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1443" _type="ConsoleOutput" date="Tue Mar 15 22:25:06 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3305113" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="1444" _type="ConsoleOutput" date="Tue Mar 15 22:25:06 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3305213" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="1446" _type="PauseCommand" date="Tue Mar 15 22:25:26 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="3325829">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[20616]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1445" _type="ConsoleOutput" date="Tue Mar 15 22:25:26 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3325829" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):50539
Number of traces > 600  turning tracing off
Number of traces > 600  turning tracing off
Test execution time (ms):5
Number of traces > 600  turning tracing off
Number of traces > 600  turning tracing off
DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0











































]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), g"), Diff(INSERT,"Test execution time (ms):50539¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning t"), Diff(EQUAL,"ra"), Diff(DELETE,"d"), Diff(INSERT,"c"), Diff(EQUAL,"ing"), Diff(DELETE,"Tools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(INSERT," off¶Test execution time (ms):5¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1448" _type="PauseCommand" date="Tue Mar 15 22:25:28 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3327686">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1857]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1447" _type="ShellCommand" date="Tue Mar 15 22:25:28 EDT 2022" starttimestamp="1647394201042" timestamp="3327686" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1450" _type="PauseCommand" date="Tue Mar 15 22:25:36 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="3335541">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7855]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1449" _type="ShellCommand" date="Tue Mar 15 22:25:36 EDT 2022" starttimestamp="1647394201042" timestamp="3335541" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1457" _type="PauseCommand" date="Tue Mar 15 22:25:50 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3349716">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3298]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1456" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:25:50 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3349716" type="Run" />
  <Command __id="1458" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:25:50 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3349716" type="Run" />
  <Command __id="1460" _type="PauseCommand" date="Tue Mar 15 22:25:53 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3352476">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2760]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1459" _type="ShellCommand" date="Tue Mar 15 22:25:53 EDT 2022" starttimestamp="1647394201042" timestamp="3352476" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1462" _type="PauseCommand" date="Tue Mar 15 22:25:56 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3355456">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2980]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1461" _type="ConsoleOutput" date="Tue Mar 15 22:25:56 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3355456" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):23
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):50539¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶Test execution time (ms):5¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Conn"), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test ex"), Diff(EQUAL,"ec"), Diff(INSERT,"u"), Diff(EQUAL,"tion"), Diff(DELETE,".*:.*Remote List.*?%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(INSERT," time (ms):23"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1464" _type="PauseCommand" date="Tue Mar 15 22:26:14 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3373593">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[18137]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1463" _type="ConsoleOutput" date="Tue Mar 15 22:26:14 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3373593" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):23"), Diff(INSERT,"Number of traces > 600  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1466" _type="PauseCommand" date="Tue Mar 15 22:26:25 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3384905">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11312]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="1465" _type="ExceptionCommand" date="Tue Mar 15 22:26:25 EDT 2022" starttimestamp="1647394201042" timestamp="3384905" type="Exception">
    <exceptionString><![CDATA[(MapReduce Server)Exception in thread "Slave1" java.util.ConcurrentModificationException
(MapReduce Server)	at java.base/java.util.HashMap$HashIterator.nextNode(HashMap.java:1493)
(MapReduce Server)	at java.base/java.util.HashMap$EntryIterator.next(HashMap.java:1526)
(MapReduce Server)	at java.base/java.util.HashMap$EntryIterator.next(HashMap.java:1524)
(MapReduce Server)	at java.base/java.util.AbstractMap.toString(AbstractMap.java:551)
(MapReduce Server)	at java.base/java.lang.String.valueOf(String.java:2951)
(MapReduce Server)	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
(MapReduce Server)	at gradingTools.comp533s19.assignment0.AMapReduceTracer.traceRemoteResult(AMapReduceTracer.java:280)
(MapReduce Server)	at facebook.FacebookSlave.run(FacebookSlave.java:130)
(MapReduce Server)	at java.base/java.lang.Thread.run(Thread.java:834)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1467" _type="ConsoleOutput" date="Tue Mar 15 22:26:26 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3385309" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1468" _type="ConsoleOutput" date="Tue Mar 15 22:26:26 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3385510" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="1470" _type="PauseCommand" date="Tue Mar 15 22:26:31 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="3390851">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5341]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1469" _type="ShellCommand" date="Tue Mar 15 22:26:31 EDT 2022" starttimestamp="1647394201042" timestamp="3390851" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1472" _type="PauseCommand" date="Tue Mar 15 22:26:47 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3406085">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[15234]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1471" _type="ConsoleOutput" date="Tue Mar 15 22:26:47 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3406085" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):50618
Number of traces > 600  turning tracing off
Number of traces > 600  turning tracing off
Test execution time (ms):8
Number of traces > 600  turning tracing off
Number of traces > 600  turning tracing off
DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0











































]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), g"), Diff(INSERT,"Test execution time (ms):50618¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning t"), Diff(EQUAL,"ra"), Diff(DELETE,"d"), Diff(INSERT,"c"), Diff(EQUAL,"ing"), Diff(DELETE,"Tools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(INSERT," off¶Test execution time (ms):8¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1473" _type="ShellCommand" date="Tue Mar 15 22:26:47 EDT 2022" starttimestamp="1647394201042" timestamp="3406391" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1475" _type="PauseCommand" date="Tue Mar 15 22:26:48 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3407892">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1501]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1474" _type="ShellCommand" date="Tue Mar 15 22:26:48 EDT 2022" starttimestamp="1647394201042" timestamp="3407892" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1477" _type="PauseCommand" date="Tue Mar 15 22:26:56 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="3415639">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7747]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1478" _type="MoveCaretCommand" caretOffset="570" date="Tue Mar 15 22:26:56 EDT 2022" docOffset="1332" starttimestamp="1647394201042" timestamp="3415890" />
  <Command __id="1480" _type="PauseCommand" date="Tue Mar 15 22:27:04 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="3423321">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7431]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1481" _type="MoveCaretCommand" caretOffset="512" date="Tue Mar 15 22:27:04 EDT 2022" docOffset="1207" starttimestamp="1647394201042" timestamp="3423548" />
  <Command __id="1483" _type="PauseCommand" date="Tue Mar 15 22:27:07 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3426513">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2965]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1484" _type="SelectTextCommand" caretOffset="4763" date="Tue Mar 15 22:27:07 EDT 2022" end="4763" start="4762" starttimestamp="1647394201042" timestamp="3426613" />
  <Command __id="1486" _type="PauseCommand" date="Tue Mar 15 22:27:09 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3428160">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1547]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1485" _type="SelectTextCommand" caretOffset="4825" date="Tue Mar 15 22:27:09 EDT 2022" end="4825" start="4762" starttimestamp="1647394201042" timestamp="3428160" />
  <Command __id="1493" _type="PauseCommand" date="Tue Mar 15 22:27:20 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3439335">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1806]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1492" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:27:20 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3439335" type="Run" />
  <Command __id="1494" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:27:20 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3439335" type="Run" />
  <Command __id="1496" _type="PauseCommand" date="Tue Mar 15 22:27:24 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3443289">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[3954]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1495" _type="ShellCommand" date="Tue Mar 15 22:27:24 EDT 2022" starttimestamp="1647394201042" timestamp="3443289" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1497" _type="ConsoleOutput" date="Tue Mar 15 22:27:24 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3443642" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):22
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):50618¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶Test execution time (ms):8¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Conn"), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test ex"), Diff(EQUAL,"ec"), Diff(INSERT,"u"), Diff(EQUAL,"tion"), Diff(DELETE,".*:.*Remote List.*?%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(INSERT," time (ms):22"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1499" _type="PauseCommand" date="Tue Mar 15 22:27:42 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3461649">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[18007]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1498" _type="ConsoleOutput" date="Tue Mar 15 22:27:42 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3461649" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):22"), Diff(INSERT,"Number of traces > 600  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1501" _type="PauseCommand" date="Tue Mar 15 22:27:54 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3473319">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11670]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1500" _type="ConsoleOutput" date="Tue Mar 15 22:27:54 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3473319" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1502" _type="ConsoleOutput" date="Tue Mar 15 22:27:54 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3473419" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="1503" _type="ConsoleOutput" date="Tue Mar 15 22:27:54 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3473527" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="1505" _type="PauseCommand" date="Tue Mar 15 22:27:56 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3475539">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2012]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1504" _type="ShellCommand" date="Tue Mar 15 22:27:56 EDT 2022" starttimestamp="1647394201042" timestamp="3475539" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1507" _type="PauseCommand" date="Tue Mar 15 22:28:15 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3494142">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18603]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1506" _type="ConsoleOutput" date="Tue Mar 15 22:28:15 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3494142" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):50491
Number of traces > 600  turning tracing off
Number of traces > 600  turning tracing off
Test execution time (ms):13
Number of traces > 600  turning tracing off
Number of traces > 600  turning tracing off
DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0











































]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), g"), Diff(INSERT,"Test execution time (ms):50491¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning t"), Diff(EQUAL,"ra"), Diff(DELETE,"d"), Diff(INSERT,"c"), Diff(EQUAL,"ing"), Diff(DELETE,"Tools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(INSERT," off¶Test execution time (ms):13¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1509" _type="PauseCommand" date="Tue Mar 15 22:28:22 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="3501357">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7215]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1508" _type="ShellCommand" date="Tue Mar 15 22:28:22 EDT 2022" starttimestamp="1647394201042" timestamp="3501357" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1511" _type="PauseCommand" date="Tue Mar 15 22:28:24 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3503485">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2128]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1510" _type="ShellCommand" date="Tue Mar 15 22:28:24 EDT 2022" starttimestamp="1647394201042" timestamp="3503485" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1513" _type="PauseCommand" date="Tue Mar 15 22:28:35 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3514493">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11008]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1512" _type="ShellCommand" date="Tue Mar 15 22:28:35 EDT 2022" starttimestamp="1647394201042" timestamp="3514493" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1517" _type="PauseCommand" date="Tue Mar 15 22:29:54 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3593623">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18635]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1516" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:29:54 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3593623" type="Run" />
  <Command __id="1519" _type="PauseCommand" date="Tue Mar 15 22:29:57 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3596346">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2723]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1518" _type="ShellCommand" date="Tue Mar 15 22:29:57 EDT 2022" starttimestamp="1647394201042" timestamp="3596346" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1521" _type="PauseCommand" date="Tue Mar 15 22:30:00 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3599705">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3359]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1520" _type="ShellCommand" date="Tue Mar 15 22:30:00 EDT 2022" starttimestamp="1647394201042" timestamp="3599705" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1522" _type="BalloonCommand" date="Tue Mar 15 22:30:01 EDT 2022" message="*******************************************
Worked 45 minutes(fixed)/55 minutes(context based) from
Tue Mar 15 21:30:02 EDT 2022 to Tue Mar 15 22:30:00 EDT 2022
Edited 1 Projects: 
	533Assignment3
Edited 9 Files: 
	C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookSlave.java
	C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\FacebookModel.java
	C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\server\IntegerSummerServer.java
	C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\main\TokenCounterModel.java
	C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\slave\Slave.java
	C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\RemoteClientFacebookMapReduce.java
	C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\client\Client.java
	C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\facebook\ServerFacebookMapReduce.java
	C:\Users\KaihaoLiu\eclipse-workspace\533Assignment3\src\comp533\server\TokenCounterServer.java
Number of insert: 242
Number of delete: 777
" starttimestamp="1647394201042" timestamp="3600096">
    <fineGrainedWorkTime><![CDATA[55]]></fineGrainedWorkTime>
    <insert><![CDATA[242]]></insert>
    <startTime><![CDATA[1647394202923]]></startTime>
    <endTime><![CDATA[1647397800747]]></endTime>
    <workTime><![CDATA[45]]></workTime>
    <delete><![CDATA[777]]></delete>
  </Command>
  <Command __id="1524" _type="PauseCommand" date="Tue Mar 15 22:30:04 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3603835">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[3739]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1523" _type="ShellCommand" date="Tue Mar 15 22:30:04 EDT 2022" starttimestamp="1647394201042" timestamp="3603835" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1525" _type="ShellCommand" date="Tue Mar 15 22:30:05 EDT 2022" starttimestamp="1647394201042" timestamp="3604129" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1526" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:30:06 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3605033" type="Run" />
  <Command __id="1527" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:30:06 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3605033" type="Run" />
  <Command __id="1529" _type="PauseCommand" date="Tue Mar 15 22:30:18 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3617160">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[12127]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1528" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Tue Mar 15 22:30:18 EDT 2022" starttimestamp="1647394201042" timestamp="3617160" />
  <Command __id="1531" _type="PauseCommand" date="Tue Mar 15 22:30:21 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3620029">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2869]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="1530" _type="CopyCommand" date="Tue Mar 15 22:30:21 EDT 2022" starttimestamp="1647394201042" timestamp="3620029" />
  <Command __id="1532" _type="ShellCommand" date="Tue Mar 15 22:30:22 EDT 2022" starttimestamp="1647394201042" timestamp="3620972" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1534" _type="PauseCommand" date="Tue Mar 15 22:30:30 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="3629608">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8636]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1533" _type="ShellCommand" date="Tue Mar 15 22:30:30 EDT 2022" starttimestamp="1647394201042" timestamp="3629608" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1536" _type="PauseCommand" date="Tue Mar 15 22:30:34 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3633568">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3960]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1535" _type="ShellCommand" date="Tue Mar 15 22:30:34 EDT 2022" starttimestamp="1647394201042" timestamp="3633568" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1537" _type="ShellCommand" date="Tue Mar 15 22:30:35 EDT 2022" starttimestamp="1647394201042" timestamp="3634074" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1538" _type="ShellCommand" date="Tue Mar 15 22:30:35 EDT 2022" starttimestamp="1647394201042" timestamp="3634560" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1545" _type="PauseCommand" date="Tue Mar 15 22:30:43 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3642855">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2127]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1544" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:30:43 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3642855" type="Run" />
  <Command __id="1546" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:30:43 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3642855" type="Run" />
  <Command __id="1548" _type="PauseCommand" date="Tue Mar 15 22:30:46 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3645603">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2747]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1547" _type="ShellCommand" date="Tue Mar 15 22:30:46 EDT 2022" starttimestamp="1647394201042" timestamp="3645602" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1550" _type="PauseCommand" date="Tue Mar 15 22:30:48 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3647202">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1600]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1549" _type="ConsoleOutput" date="Tue Mar 15 22:30:48 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3647202" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):22
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):50491¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶Test execution time (ms):13¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Conn"), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test ex"), Diff(EQUAL,"ec"), Diff(INSERT,"u"), Diff(EQUAL,"tion"), Diff(DELETE,".*:.*Remote List.*?%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(INSERT," time (ms):22"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1552" _type="PauseCommand" date="Tue Mar 15 22:31:06 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3665182">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[17980]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1551" _type="ConsoleOutput" date="Tue Mar 15 22:31:06 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3665182" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):22"), Diff(INSERT,"Number of traces > 600  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1554" _type="PauseCommand" date="Tue Mar 15 22:31:17 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3676847">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11665]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1553" _type="ConsoleOutput" date="Tue Mar 15 22:31:17 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3676847" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1555" _type="ConsoleOutput" date="Tue Mar 15 22:31:18 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3676965" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="1556" _type="ConsoleOutput" date="Tue Mar 15 22:31:18 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3677069" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="1558" _type="PauseCommand" date="Tue Mar 15 22:31:38 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="3697614">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[20545]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1557" _type="ConsoleOutput" date="Tue Mar 15 22:31:38 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3697614" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):50452
Number of traces > 600  turning tracing off
Number of traces > 600  turning tracing off
Test execution time (ms):13
Number of traces > 600  turning tracing off
Number of traces > 600  turning tracing off
DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0











































]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), g"), Diff(INSERT,"Test execution time (ms):50452¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning t"), Diff(EQUAL,"ra"), Diff(DELETE,"d"), Diff(INSERT,"c"), Diff(EQUAL,"ing"), Diff(DELETE,"Tools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(INSERT," off¶Test execution time (ms):13¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Connection.*:.*Remote List.*?%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1560" _type="PauseCommand" date="Tue Mar 15 22:31:53 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3712096">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[14482]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1559" _type="ShellCommand" date="Tue Mar 15 22:31:53 EDT 2022" starttimestamp="1647394201042" timestamp="3712096" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1562" _type="PauseCommand" date="Tue Mar 15 22:32:19 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="3738878">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[26782]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1561" _type="ShellCommand" date="Tue Mar 15 22:32:19 EDT 2022" starttimestamp="1647394201042" timestamp="3738878" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1564" _type="PauseCommand" date="Tue Mar 15 22:32:36 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3755387">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16509]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1563" _type="ShellCommand" date="Tue Mar 15 22:32:36 EDT 2022" starttimestamp="1647394201042" timestamp="3755387" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1566" _type="PauseCommand" date="Tue Mar 15 22:32:40 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3759386">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3999]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1565" _type="ShellCommand" date="Tue Mar 15 22:32:40 EDT 2022" starttimestamp="1647394201042" timestamp="3759386" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1568" _type="PauseCommand" date="Tue Mar 15 22:32:52 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3771402">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12016]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1567" _type="ShellCommand" date="Tue Mar 15 22:32:52 EDT 2022" starttimestamp="1647394201042" timestamp="3771402" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1573" _type="PauseCommand" date="Tue Mar 15 22:33:19 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3798558">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1141]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1572" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:33:19 EDT 2022" starttimestamp="1647394201042" timestamp="3798558" />
  <Command __id="1574" _type="EclipseCommand" commandID="" date="Tue Mar 15 22:33:19 EDT 2022" starttimestamp="1647394201042" timestamp="3798562" />
  <Command __id="1576" _type="PauseCommand" date="Tue Mar 15 22:33:29 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="3808278">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[9716]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1575" _type="MoveCaretCommand" caretOffset="615" date="Tue Mar 15 22:33:29 EDT 2022" docOffset="734" starttimestamp="1647394201042" timestamp="3808278" />
  <Command __id="1577" _type="SelectTextCommand" caretOffset="617" date="Tue Mar 15 22:33:29 EDT 2022" end="617" start="613" starttimestamp="1647394201042" timestamp="3808401" />
  <Command __id="1596" _type="PauseCommand" date="Tue Mar 15 22:33:39 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3818523">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1383]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1595" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:33:39 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3818523" type="Run" />
  <Command __id="1597" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:33:39 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3818523" type="Run" />
  <Command __id="1599" _type="PauseCommand" date="Tue Mar 15 22:33:42 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3821337">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2814]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1598" _type="ShellCommand" date="Tue Mar 15 22:33:42 EDT 2022" starttimestamp="1647394201042" timestamp="3821337" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1600" _type="ShellCommand" date="Tue Mar 15 22:33:42 EDT 2022" starttimestamp="1647394201042" timestamp="3821442" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1602" _type="PauseCommand" date="Tue Mar 15 22:33:44 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3823646">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2204]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1601" _type="ShellCommand" date="Tue Mar 15 22:33:44 EDT 2022" starttimestamp="1647394201042" timestamp="3823646" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1604" _type="PauseCommand" date="Tue Mar 15 22:33:48 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3827193">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3547]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1603" _type="ConsoleOutput" date="Tue Mar 15 22:33:48 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3827193" type="ConsoleOutput">
    <outputString><![CDATA[
A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616
Test execution time (ms):23
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):50452¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶Test execution time (ms):13¶Number of traces > 600  turning tracing off¶Number of traces > 600  turning tracing off¶DistributedFacebookMapReducePartialReduce did not pass completely:All Output Did not match:.*MapReduce Client 1.*RMI TCP Conn"), Diff(INSERT,"¶A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶Test ex"), Diff(EQUAL,"ec"), Diff(INSERT,"u"), Diff(EQUAL,"tion"), Diff(DELETE,".*:.*Remote List.*?%0.0¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(INSERT," time (ms):23"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1606" _type="PauseCommand" date="Tue Mar 15 22:34:08 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="3847895">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[20702]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1605" _type="ShellCommand" date="Tue Mar 15 22:34:08 EDT 2022" starttimestamp="1647394201042" timestamp="3847895" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1608" _type="PauseCommand" date="Tue Mar 15 22:34:17 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="3856853">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8957]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1607" _type="ConsoleOutput" date="Tue Mar 15 22:34:17 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3856852" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶Test execution time (ms):23"), Diff(INSERT,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1609" _type="ConsoleOutput" date="Tue Mar 15 22:34:17 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3856956" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="1610" _type="ConsoleOutput" date="Tue Mar 15 22:34:18 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3857104" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]¶")]]]></diff>
  </Command>
  <Command __id="1612" _type="PauseCommand" date="Tue Mar 15 22:34:38 EDT 2022" range="20s-30s" starttimestamp="1647394201042" timestamp="3877608">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[20504]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1611" _type="ConsoleOutput" date="Tue Mar 15 22:34:38 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3877608" type="ConsoleOutput">
    <outputString><![CDATA[

















































]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(INSERT,"¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1614" _type="PauseCommand" date="Tue Mar 15 22:35:47 EDT 2022" range="1m-2m" starttimestamp="1647394201042" timestamp="3946755">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[69147]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1613" _type="ShellCommand" date="Tue Mar 15 22:35:47 EDT 2022" starttimestamp="1647394201042" timestamp="3946755" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1620" _type="PauseCommand" date="Tue Mar 15 22:35:52 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3951173">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2560]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1619" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:35:52 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3951173" type="Run" />
  <Command __id="1621" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:35:52 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3951174" type="Run" />
  <Command __id="1623" _type="PauseCommand" date="Tue Mar 15 22:35:54 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3953934">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2760]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1622" _type="ShellCommand" date="Tue Mar 15 22:35:54 EDT 2022" starttimestamp="1647394201042" timestamp="3953934" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1625" _type="PauseCommand" date="Tue Mar 15 22:35:57 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3956555">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2621]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1624" _type="ConsoleOutput" date="Tue Mar 15 22:35:57 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="3956555" type="ConsoleOutput">
    <outputString><![CDATA[
A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616
Test execution time (ms):21
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"¶"), Diff(DELETE,"¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶"), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶Test execution time (ms):21"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1627" _type="PauseCommand" date="Tue Mar 15 22:36:11 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="3970298">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13743]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1626" _type="ShellCommand" date="Tue Mar 15 22:36:11 EDT 2022" starttimestamp="1647394201042" timestamp="3970298" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1636" _type="PauseCommand" date="Tue Mar 15 22:36:33 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="3992652">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1592]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1635" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:36:33 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3992652" type="Run" />
  <Command __id="1637" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:36:33 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="3992653" type="Run" />
  <Command __id="1639" _type="PauseCommand" date="Tue Mar 15 22:36:36 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="3995444">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2791]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1638" _type="ShellCommand" date="Tue Mar 15 22:36:36 EDT 2022" starttimestamp="1647394201042" timestamp="3995444" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1645" _type="PauseCommand" date="Tue Mar 15 22:36:56 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="4015409">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2546]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1644" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:36:56 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4015409" type="Run" />
  <Command __id="1646" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:36:56 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4015409" type="Run" />
  <Command __id="1648" _type="PauseCommand" date="Tue Mar 15 22:36:59 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="4018158">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2749]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1647" _type="ShellCommand" date="Tue Mar 15 22:36:59 EDT 2022" starttimestamp="1647394201042" timestamp="4018158" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1650" _type="PauseCommand" date="Tue Mar 15 22:37:00 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="4019351">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1193]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1649" _type="ConsoleOutput" date="Tue Mar 15 22:37:00 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="4019351" type="ConsoleOutput">
    <outputString><![CDATA[
A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616
Test execution time (ms):28
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***[java.base/java.lang.Object.wait(Native Method), java.base/java.lang.Object.wait(Object.java:328), gradingTools.comp533s19.assignment0.AMapReduceTracer.synchronizedWait(AMapReduceTracer.java:298), facebook.FacebookSlave.run(FacebookSlave.java:131), java.base/java.lang.Thread.run(Thread.java:834)]"), Diff(INSERT,"¶A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶Test execution time (ms):28"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1656" _type="PauseCommand" date="Tue Mar 15 22:37:49 EDT 2022" range="30s-1m" starttimestamp="1647394201042" timestamp="4068781">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[44969]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1655" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:37:49 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4068781" type="Run" />
  <Command __id="1657" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:37:49 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4068781" type="Run" />
  <Command __id="1658" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:37:50 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4069230" type="Run" />
  <Command __id="1659" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:37:50 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4069230" type="Run" />
  <Command __id="1660" _type="ShellCommand" date="Tue Mar 15 22:37:50 EDT 2022" starttimestamp="1647394201042" timestamp="4069277" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1661" _type="ExceptionCommand" date="Tue Mar 15 22:37:50 EDT 2022" starttimestamp="1647394201042" timestamp="4069411" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:513)
	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:525)
Caused by: java.lang.RuntimeException: Class java/lang/UnknownError could not be instrumented.
	at org.jacoco.agent.rt.internal_c13123e.core.runtime.ModifiedSystemClassRuntime.createFor(ModifiedSystemClassRuntime.java:140)
	at org.jacoco.agent.rt.internal_c13123e.core.runtime.ModifiedSystemClassRuntime.createFor(ModifiedSystemClassRuntime.java:101)
	at org.jacoco.agent.rt.internal_c13123e.PreMain.createRuntime(PreMain.java:55)
	at org.jacoco.agent.rt.internal_c13123e.PreMain.premain(PreMain.java:47)
	... 6 more
Caused by: java.lang.NoSuchFieldException: $jacocoAccess
	at java.base/java.lang.Class.getField(Class.java:1999)
	at org.jacoco.agent.rt.internal_c13123e.core.runtime.ModifiedSystemClassRuntime.createFor(ModifiedSystemClassRuntime.java:138)
	... 9 more
FATAL ERROR in native method: processing of -javaagent failed
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1663" _type="PauseCommand" date="Tue Mar 15 22:37:52 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="4071104">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1693]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1662" _type="ShellCommand" date="Tue Mar 15 22:37:52 EDT 2022" starttimestamp="1647394201042" timestamp="4071104" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1665" _type="PauseCommand" date="Tue Mar 15 22:37:53 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="4072338">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1234]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1664" _type="ShellCommand" date="Tue Mar 15 22:37:53 EDT 2022" starttimestamp="1647394201042" timestamp="4072338" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1666" _type="ShellCommand" date="Tue Mar 15 22:37:53 EDT 2022" starttimestamp="1647394201042" timestamp="4072429" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1668" _type="PauseCommand" date="Tue Mar 15 22:37:59 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="4078482">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6053]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1667" _type="MoveCaretCommand" caretOffset="88" date="Tue Mar 15 22:37:59 EDT 2022" docOffset="207" starttimestamp="1647394201042" timestamp="4078482" />
  <Command __id="1669" _type="MoveCaretCommand" caretOffset="90" date="Tue Mar 15 22:38:00 EDT 2022" docOffset="209" starttimestamp="1647394201042" timestamp="4079167" />
  <Command __id="1671" _type="PauseCommand" date="Tue Mar 15 22:38:04 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="4083707">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4540]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1670" _type="ShellCommand" date="Tue Mar 15 22:38:04 EDT 2022" starttimestamp="1647394201042" timestamp="4083707" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1676" _type="PauseCommand" date="Tue Mar 15 22:38:13 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="4092521">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7468]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1675" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:38:13 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4092520" type="Run" />
  <Command __id="1677" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:38:13 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4092521" type="Run" />
  <Command __id="1678" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:38:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4093181" type="Run" />
  <Command __id="1679" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:38:14 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4093243" type="Run" />
  <Command __id="1680" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:38:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4093451" type="Run" />
  <Command __id="1681" _type="ConsoleOutput" date="Tue Mar 15 22:38:14 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="4093521" type="ConsoleOutput">
    <outputString><![CDATA[JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶Test execution time (ms):28"), Diff(INSERT,"JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1685" _type="PauseCommand" date="Tue Mar 15 22:38:19 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="4098159">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1751]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1684" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:38:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4098159" type="Run" />
  <Command __id="1686" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:38:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4098292" type="Run" />
  <Command __id="1687" _type="ConsoleOutput" date="Tue Mar 15 22:38:19 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="4098294" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):45
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55."), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):45"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1688" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:38:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4098351" type="Run" />
  <Command __id="1689" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:38:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4098353" type="Run" />
  <Command __id="1691" _type="PauseCommand" date="Tue Mar 15 22:38:20 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="4099546">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1193]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1690" _type="ConsoleOutput" date="Tue Mar 15 22:38:20 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="4099546" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***Port already in use: 1092; nested exception is: 
(MapReduce Server)	java.net.BindException: Address already in use: NET_Bind
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):45"), Diff(INSERT,"(MapReduce Server)E***Port already in use: 1092; nested exception is: ¶(MapReduce Server)	java.net.BindException: Address already in use: NET_Bind"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1692" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:38:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4100374" type="Run" />
  <Command __id="1693" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:38:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4100377" type="Run" />
  <Command __id="1697" _type="PauseCommand" date="Tue Mar 15 22:38:28 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="4107392">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5958]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1696" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:38:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4107392" type="Run" />
  <Command __id="1698" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:38:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4107395" type="Run" />
  <Command __id="1700" _type="PauseCommand" date="Tue Mar 15 22:38:29 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="4108895">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1500]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="1699" _type="ExceptionCommand" date="Tue Mar 15 22:38:29 EDT 2022" starttimestamp="1647394201042" timestamp="4108895" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1702" _type="PauseCommand" date="Tue Mar 15 22:39:40 EDT 2022" range="1m-2m" starttimestamp="1647394201042" timestamp="4179499">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[70604]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="1701" _type="ExceptionCommand" date="Tue Mar 15 22:39:40 EDT 2022" starttimestamp="1647394201042" timestamp="4179499" type="Exception">
    <exceptionString><![CDATA[java.lang.AssertionError: MapReduce Server Output Did not match:.*View.*Result.*b_c=\[a, d, e\].*%0.0
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at grader.basics.testcase.PassFailJUnitTestCase.assertTrue(PassFailJUnitTestCase.java:288)
	at gradingTools.shared.testcases.MethodExecutionTest.checkWithChecker(MethodExecutionTest.java:930)
	at gradingTools.comp533s19.assignment0.testcases.counts.standalone.SingleThreadTokenCountResult.isValidOutput(SingleThreadTokenCountResult.java:93)
	at gradingTools.shared.testcases.MethodExecutionTest.computeOutputErrorStatus(MethodExecutionTest.java:262)
	at gradingTools.shared.testcases.MethodExecutionTest.setOutputErrorStatus(MethodExecutionTest.java:241)
	at gradingTools.shared.testcases.MainMethodForkerTest.test(MainMethodForkerTest.java:105)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at gradingTools.comp533s21.assignment3.facebookMapReduce.tests.DistributedFacebookMapReduceResult.defaultTest(DistributedFacebookMapReduceResult.java:64)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
]]></exceptionString>
    <language><![CDATA[SML]]></language>
  </Command>
  <Command __id="1703" _type="ConsoleOutput" date="Tue Mar 15 22:39:40 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="4179503" type="ConsoleOutput">
    <outputString><![CDATA[java.lang.AssertionError: MapReduce Server Output Did not match:.*View.*Result.*b_c=\[a, d, e\].*%0.0
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at grader.basics.testcase.PassFailJUnitTestCase.assertTrue(PassFailJUnitTestCase.java:288)
	at gradingTools.shared.testcases.MethodExecutionTest.checkWithChecker(MethodExecutionTest.java:930)
	at gradingTools.comp533s19.assignment0.testcases.counts.standalone.SingleThreadTokenCountResult.isValidOutput(SingleThreadTokenCountResult.java:93)
	at gradingTools.shared.testcases.MethodExecutionTest.computeOutputErrorStatus(MethodExecutionTest.java:262)
	at gradingTools.shared.testcases.MethodExecutionTest.setOutputErrorStatus(MethodExecutionTest.java:241)
	at gradingTools.shared.testcases.MainMethodForkerTest.test(MainMethodForkerTest.java:105)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at gradingTools.comp533s21.assignment3.facebookMapReduce.tests.DistributedFacebookMapReduceResult.defaultTest(DistributedFacebookMapReduceResult.java:64)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***Port already in use: 1092; nested exception is: ¶(MapReduce Server)	java.net.BindException: Address already in use: NET_Bind"), Diff(INSERT,"java.lang.AssertionError: MapReduce Server Output Did not match:.*View.*Result.*b_c=\[a, d, e\].*%0.0¶	at org.junit.Assert.fail(Assert.java:88)¶	at org.junit.Assert.assertTrue(Assert.java:41)¶	at grader.basics.testcase.PassFailJUnitTestCase.assertTrue(PassFailJUnitTestCase.java:288)¶	at gradingTools.shared.testcases.MethodExecutionTest.checkWithChecker(MethodExecutionTest.java:930)¶	at gradingTools.comp533s19.assignment0.testcases.counts.standalone.SingleThreadTokenCountResult.isValidOutput(SingleThreadTokenCountResult.java:93)¶	at gradingTools.shared.testcases.MethodExecutionTest.computeOutputErrorStatus(MethodExecutionTest.java:262)¶	at gradingTools.shared.testcases.MethodExecutionTest.setOutputErrorStatus(MethodExecutionTest.java:241)¶	at gradingTools.shared.testcases.MainMethodForkerTest.test(MainMethodForkerTest.java:105)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)¶	at gradingTools.comp533s21.assignment3.facebookMapReduce.tests.DistributedFacebookMapReduceResult.defaultTest(DistributedFacebookMapReduceResult.java:64)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1705" _type="PauseCommand" date="Tue Mar 15 22:42:11 EDT 2022" range="2m-5m" starttimestamp="1647394201042" timestamp="4330441">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[150938]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1704" _type="MoveCaretCommand" caretOffset="614" date="Tue Mar 15 22:42:11 EDT 2022" docOffset="733" starttimestamp="1647394201042" timestamp="4330441" />
  <Command __id="1706" _type="SelectTextCommand" caretOffset="618" date="Tue Mar 15 22:42:11 EDT 2022" end="618" start="613" starttimestamp="1647394201042" timestamp="4330555" />
  <Command __id="1724" _type="PauseCommand" date="Tue Mar 15 22:42:18 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="4337281">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2591]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1723" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:42:18 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4337281" type="Run" />
  <Command __id="1725" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:42:18 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4337622" type="Run" />
  <Command __id="1726" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:42:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4337840" type="Run" />
  <Command __id="1727" _type="ConsoleOutput" date="Tue Mar 15 22:42:18 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="4337942" type="ConsoleOutput">
    <outputString><![CDATA[JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"java.lang.AssertionError: MapReduce Server Output Did not match:.*View.*Result.*b_c=\[a, d, e\].*%0.0¶	at org.junit.Assert.fail(Assert.java:88)¶	at org.junit.Assert.assertTrue(Assert.java:41)¶	at grader.basics.testcase.PassFailJUnitTestCase.assertTrue(PassFailJUnitTestCase.java:288)¶	at gradingTools.shared.testcases.MethodExecutionTest.checkWithChecker(MethodExecutionTest.java:930)¶	at gradingTools.comp533s19.assignment0.testcases.counts.standalone.SingleThreadTokenCountResult.isValidOutput(SingleThreadTokenCountResult.java:93)¶	at gradingTools.shared.testcases.MethodExecutionTest.computeOutputErrorStatus(MethodExecutionTest.java:262)¶	at gradingTools.shared.testcases.MethodExecutionTest.setOutputErrorStatus(MethodExecutionTest.java:241)¶	at gradingTools.shared.testcases.MainMethodForkerTest.test(MainMethodForkerTest.java:105)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)¶	at gradingTools.comp533s21.assignment3.facebookMapReduce.tests.DistributedFacebookMapReduceResult.defaultTest(DistributedFacebookMapReduceResult.java:64)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)"), Diff(INSERT,"JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1731" _type="PauseCommand" date="Tue Mar 15 22:42:23 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="4342221">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1219]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1730" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:42:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4342221" type="Run" />
  <Command __id="1732" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:42:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4342387" type="Run" />
  <Command __id="1733" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:42:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4342446" type="Run" />
  <Command __id="1734" _type="ConsoleOutput" date="Tue Mar 15 22:42:23 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="4342447" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):63
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55."), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):63"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1735" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:42:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4342449" type="Run" />
  <Command __id="1741" _type="PauseCommand" date="Tue Mar 15 22:42:32 EDT 2022" range="5s-10s" starttimestamp="1647394201042" timestamp="4351486">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[7017]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1740" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:42:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4351486" type="Run" />
  <Command __id="1742" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:42:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4351488" type="Run" />
  <Command __id="1744" _type="PauseCommand" date="Tue Mar 15 22:42:34 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="4353075">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1587]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="1743" _type="ExceptionCommand" date="Tue Mar 15 22:42:34 EDT 2022" starttimestamp="1647394201042" timestamp="4353075" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicRunningProject.newInputLine(BasicRunningProject.java:796)
	at util.pipe.AnAbstractInputGenerator.notifyNewInputLine(AnAbstractInputGenerator.java:29)
	at gradingTools.comp533s19.assignment0.testcases.MapReduceInputGenerator.newOutputLine(MapReduceInputGenerator.java:31)
	at grader.basics.execution.BasicRunningProject.doAppendProcessProcessedOutput(BasicRunningProject.java:457)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:250)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1746" _type="PauseCommand" date="Tue Mar 15 22:42:53 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="4372710">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[19635]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1745" _type="ShellCommand" date="Tue Mar 15 22:42:53 EDT 2022" starttimestamp="1647394201042" timestamp="4372710" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1748" _type="PauseCommand" date="Tue Mar 15 22:43:05 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="4384123">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11413]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1747" _type="ShellCommand" date="Tue Mar 15 22:43:05 EDT 2022" starttimestamp="1647394201042" timestamp="4384123" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1761" _type="PauseCommand" date="Tue Mar 15 22:43:11 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="4390626">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2826]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1760" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:43:11 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4390626" type="Run" />
  <Command __id="1762" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:43:11 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4390626" type="Run" />
  <Command __id="1763" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:43:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4390932" type="Run" />
  <Command __id="1764" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:43:12 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4390965" type="Run" />
  <Command __id="1765" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:43:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4391178" type="Run" />
  <Command __id="1766" _type="ConsoleOutput" date="Tue Mar 15 22:43:12 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="4391230" type="ConsoleOutput">
    <outputString><![CDATA[JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***Port already in use: 1092; nested exception is: ¶(MapReduce Server)	java.net.BindException: Address already in use: NET_Bind"), Diff(INSERT,"JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1770" _type="PauseCommand" date="Tue Mar 15 22:43:17 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="4396608">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2456]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1769" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:43:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4396608" type="Run" />
  <Command __id="1771" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:43:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4396736" type="Run" />
  <Command __id="1772" _type="ConsoleOutput" date="Tue Mar 15 22:43:17 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="4396737" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):31
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55."), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):31"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1773" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:43:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4396796" type="Run" />
  <Command __id="1774" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:43:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4396799" type="Run" />
  <Command __id="1776" _type="PauseCommand" date="Tue Mar 15 22:43:19 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="4398099">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1300]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1775" _type="ConsoleOutput" date="Tue Mar 15 22:43:19 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="4398099" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***Port already in use: 1092; nested exception is: 
(MapReduce Server)	java.net.BindException: Address already in use: NET_Bind
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):31"), Diff(INSERT,"(MapReduce Server)E***Port already in use: 1092; nested exception is: ¶(MapReduce Server)	java.net.BindException: Address already in use: NET_Bind"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1777" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:43:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4398818" type="Run" />
  <Command __id="1778" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 15 22:43:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1647394201042" timestamp="4398820" type="Run" />
  <Command __id="1785" _type="PauseCommand" date="Tue Mar 15 22:43:36 EDT 2022" range="10s-20s" starttimestamp="1647394201042" timestamp="4415514">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[10380]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1784" _type="ProgramExecutionEvent" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:43:36 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4415514" type="Run" />
  <Command __id="1786" _type="RunCommand" className="/533Assignment3/src/comp533/RunSpring22Assignment3Tests.java" date="Tue Mar 15 22:43:36 EDT 2022" kind="HitBreakPoint" projectName="533Assignment3" starttimestamp="1647394201042" timestamp="4415515" type="Run" />
  <Command __id="1788" _type="PauseCommand" date="Tue Mar 15 22:43:39 EDT 2022" range="2s-5s" starttimestamp="1647394201042" timestamp="4418372">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2857]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1787" _type="ShellCommand" date="Tue Mar 15 22:43:39 EDT 2022" starttimestamp="1647394201042" timestamp="4418372" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1790" _type="PauseCommand" date="Tue Mar 15 22:43:41 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="4420031">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1659]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1789" _type="ConsoleOutput" date="Tue Mar 15 22:43:41 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="4420031" type="ConsoleOutput">
    <outputString><![CDATA[A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616

Test execution time (ms):23
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(MapReduce Server)E***Port already in use: 1092; nested exception is: ¶(MapReduce Server)	java.net.BindException: Address already in use: NET_Bind"), Diff(INSERT,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):23"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1792" _type="PauseCommand" date="Tue Mar 15 22:43:42 EDT 2022" range="1s-2s" starttimestamp="1647394201042" timestamp="4421275">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1244]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1791" _type="ConsoleOutput" date="Tue Mar 15 22:43:42 EDT 2022" overflow="false" starttimestamp="1647394201042" timestamp="4421275" type="ConsoleOutput">
    <outputString><![CDATA[(MapReduce Server)E***Port already in use: 1092; nested exception is: 
(MapReduce Server)	java.net.BindException: Address already in use: NET_Bind
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A3ConfigurationProvided did not pass completely:Style checks will be scaled by 0.9615384615384616 because of duplicate configuration classes: [class comp533.client.Client]%0.9615384615384616¶¶Test execution time (ms):23"), Diff(INSERT,"(MapReduce Server)E***Port already in use: 1092; nested exception is: ¶(MapReduce Server)	java.net.BindException: Address already in use: NET_Bind"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
</Events>
