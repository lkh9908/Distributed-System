<Events startTimestamp="1651612126413" logVersion="1.0.0.202108012048">
  <Command __id="43" _type="MoveCaretCommand" caretOffset="818" date="Tue May 03 17:08:48 EDT 2022" docOffset="964" starttimestamp="1651612126413" timestamp="1890" />
  <Command __id="45" _type="PauseCommand" date="Tue May 03 17:08:57 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="11336">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9433]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="44" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Tue May 03 17:08:57 EDT 2022" starttimestamp="1651612126413" timestamp="11323" />
  <Command __id="46" _type="ProgramExecutionEvent" className="/533Assignment060/src/checks/Checks.java" date="Tue May 03 17:08:58 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="11721" type="Run" />
  <Command __id="47" _type="RunCommand" className="/533Assignment060/src/checks/Checks.java" date="Tue May 03 17:08:58 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="11723" type="Run" />
  <Command __id="49" _type="PauseCommand" date="Tue May 03 17:09:02 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="15717">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[3994]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="48" _type="ShellCommand" date="Tue May 03 17:09:02 EDT 2022" starttimestamp="1651612126413" timestamp="15717" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="51" _type="PauseCommand" date="Tue May 03 17:09:27 EDT 2022" range="20s-30s" starttimestamp="1651612126413" timestamp="40912">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[25195]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="50" _type="ConsoleOutput" date="Tue May 03 17:09:27 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="40912" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):23521
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="53" _type="PauseCommand" date="Tue May 03 17:09:42 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="56532">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[15620]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="52" _type="ConsoleOutput" date="Tue May 03 17:09:42 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="56532" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):15597
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"23521"), Diff(INSERT,"15597"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="55" _type="PauseCommand" date="Tue May 03 17:09:51 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="65201">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8669]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="54" _type="ShellCommand" date="Tue May 03 17:09:51 EDT 2022" starttimestamp="1651612126413" timestamp="65201" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="57" _type="PauseCommand" date="Tue May 03 17:09:58 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="72164">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6963]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="56" _type="ConsoleOutput" date="Tue May 03 17:09:58 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="72164" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):15625
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):15"), Diff(DELETE,"597"), Diff(INSERT,"625"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="59" _type="PauseCommand" date="Tue May 03 17:10:07 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="80632">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8468]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="58" _type="ShellCommand" date="Tue May 03 17:10:07 EDT 2022" starttimestamp="1651612126413" timestamp="80632" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="61" _type="PauseCommand" date="Tue May 03 17:10:14 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="87905">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7273]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="60" _type="ShellCommand" date="Tue May 03 17:10:14 EDT 2022" starttimestamp="1651612126413" timestamp="87905" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="63" _type="PauseCommand" date="Tue May 03 17:10:16 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="89897">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1992]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="62" _type="ShellCommand" date="Tue May 03 17:10:16 EDT 2022" starttimestamp="1651612126413" timestamp="89897" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="65" _type="PauseCommand" date="Tue May 03 17:10:17 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="91049">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1152]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="64" _type="ShellCommand" date="Tue May 03 17:10:17 EDT 2022" starttimestamp="1651612126413" timestamp="91049" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="66" _type="ShellCommand" date="Tue May 03 17:10:17 EDT 2022" starttimestamp="1651612126413" timestamp="91555" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="68" _type="PauseCommand" date="Tue May 03 17:11:13 EDT 2022" range="30s-1m" starttimestamp="1651612126413" timestamp="147327">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[55772]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="67" _type="ShellCommand" date="Tue May 03 17:11:13 EDT 2022" starttimestamp="1651612126413" timestamp="147327" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="70" _type="PauseCommand" date="Tue May 03 17:11:15 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="148981">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1654]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="69" _type="ShellCommand" date="Tue May 03 17:11:15 EDT 2022" starttimestamp="1651612126413" timestamp="148981" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="72" _type="PauseCommand" date="Tue May 03 17:11:39 EDT 2022" range="20s-30s" starttimestamp="1651612126413" timestamp="173130">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[24148]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="71" _type="ShellCommand" date="Tue May 03 17:11:39 EDT 2022" starttimestamp="1651612126413" timestamp="173129" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="73" _type="ConsoleOutput" date="Tue May 03 17:11:39 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="173183" type="ConsoleOutput">
    <outputString><![CDATA[Please run the checkstle plugin on your project
Could not initialize checkstyle. Please make sure you have installed the plugin and run checkstyle on the project 
A6TaggedClassesDefined did not pass completely:Did not find checkstyle text%0.0

Test execution time (ms):5
A6ExpectedInterfaces did not pass completely:No checkstyle output, check console error messages%0.0

Test execution time (ms):1
A6ExpectedCalls did not pass completely:No checkstyle output, check console error messages%0.0

Test execution time (ms):0
A6ExpectedSignatures did not pass completely:No checkstyle output, check console error messages%0.0

Test execution time (ms):1

Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (37)
 |- checks (1)
  |~ Checks.java (36)
 |- client (8)
  |~ Client.java (23)
  |~ ClientConfigure.java (434)
  |~ ClientOutCoupler.java (62)
  |~ ClientRemoteInterfaceGIPC.java (33)
  |~ ClientRemoteInterfaceNIO.java (25)
  |~ ClientRemoteInterfaceRMI.java (29)
  |~ ClientRemoteObject.java (314)
  |~ ClientRemoteObjectNIO.java (199)
 |- nioExample (8)
  |~ AnNIOManagerPrintClient.java (125)
  |~ AnNIOManagerPrintServer.java (139)
  |~ exampleClientReadThread.java (67)
  |~ exampleServerReadThread.java (70)
  |~ FakeClientInterface.java (12)
  |~ NIOManagerPrintClientLauncherNoFactory.java (10)
  |~ NIOManagerPrintServer.java (20)
  |~ NIOManagerPrintServerLauncherNoFactory.java (10)
 |- readThread (3)
  |~ ClientReadThread.java (94)
  |~ ReadThreadInterface.java (13)
  |~ ServerReadThread.java (102)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (10)
  |~ OriginalSimulation.java (9)
  |~ Server.java (33)
  |~ ServerConfigure.java (475)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):15625"), Diff(INSERT,"Please run the checkstle plugin on your project¶Could not initialize checkstyle. Please make sure you have installed the plugin and run checkstyle on the project ¶A6TaggedClassesDefined did not pass completely:Did not find checkstyle text%0.0¶¶Test execution time (ms):5¶A6ExpectedInterfaces did not pass completely:No checkstyle output, check console error messages%0.0¶¶Test execution time (ms):1¶A6ExpectedCalls did not pass completely:No checkstyle output, check console error messages%0.0¶¶Test execution time (ms):0¶A6ExpectedSignatures did not pass completely:No checkstyle output, check console error messages%0.0¶¶Test execution time (ms):1¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (37)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (8)¶  |~ Client.java (23)¶  |~ ClientConfigure.java (434)¶  |~ ClientOutCoupler.java (62)¶  |~ ClientRemoteInterfaceGIPC.java (33)¶  |~ ClientRemoteInterfaceNIO.java (25)¶  |~ ClientRemoteInterfaceRMI.java (29)¶  |~ ClientRemoteObject.java (314)¶  |~ ClientRemoteObjectNIO.java (199)¶ |- nioExample (8)¶  |~ AnNIOManagerPrintClient.java (125)¶  |~ AnNIOManagerPrintServer.java (139)¶  |~ exampleClientReadThread.java (67)¶  |~ exampleServerReadThread.java (70)¶  |~ FakeClientInterface.java (12)¶  |~ NIOManagerPrintClientLauncherNoFactory.java (10)¶  |~ NIOManagerPrintServer.java (20)¶  |~ NIOManagerPrintServerLauncherNoFactory.java (10)¶ |- readThread (3)¶  |~ ClientReadThread.java (94)¶  |~ ReadThreadInterface.java (13)¶  |~ ServerReadThread.java (102)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (10)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (33)¶  |~ ServerConfigure.java (475)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="75" _type="PauseCommand" date="Tue May 03 17:11:46 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="179636">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6453]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="74" _type="ShellCommand" date="Tue May 03 17:11:46 EDT 2022" starttimestamp="1651612126413" timestamp="179636" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="77" _type="PauseCommand" date="Tue May 03 17:12:32 EDT 2022" range="30s-1m" starttimestamp="1651612126413" timestamp="225913">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[46277]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="76" _type="ShellCommand" date="Tue May 03 17:12:32 EDT 2022" starttimestamp="1651612126413" timestamp="225913" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="79" _type="PauseCommand" date="Tue May 03 17:12:39 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="232983">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7069]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="78" _type="ShellCommand" date="Tue May 03 17:12:39 EDT 2022" starttimestamp="1651612126413" timestamp="232982" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="81" _type="PauseCommand" date="Tue May 03 17:12:59 EDT 2022" range="20s-30s" starttimestamp="1651612126413" timestamp="253146">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[20164]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="80" _type="ConsoleOutput" date="Tue May 03 17:12:59 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="253146" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):68260
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Please run the checkstle plugin on your project¶Could not initialize checkstyle. Please make sure you have installed the plugin and run checkstyle on the project ¶A6TaggedClassesDefined did not pass completely:Did not find checkstyle text%0.0¶¶Test execution time (ms):5¶A6ExpectedInterfaces did not pass completely:No checkstyle output, check console error messages%0.0¶¶Test execution time (ms):1¶A6ExpectedCalls did not pass completely:No checkstyle output, check console error messages%0.0¶¶Test execution time (ms):0¶A6ExpectedSignatures did not pass completely:No checkstyle output, check console error messages%0.0¶¶Test execution time (ms):1¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (37)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (8)¶  |~ Client.java (23)¶  |~ ClientConfigure.java (434)¶  |~ ClientOutCoupler.java (62)¶  |~ ClientRemoteInterfaceGIPC.java (33)¶  |~ ClientRemoteInterfaceNIO.java (25)¶  |~ ClientRemoteInterfaceRMI.java (29)¶  |~ ClientRemoteObject.java (314)¶  |~ ClientRemoteObjectNIO.java (199)¶ |- nioExample (8)¶  |~ AnNIOManagerPrintClient.java (125)¶  |~ AnNIOManagerPrintServer.java (139)¶  |~ exampleClientReadThread.java (67)¶  |~ exampleServerReadThread.java (70)¶  |~ FakeClientInterface.java (12)¶  |~ NIOManagerPrintClientLauncherNoFactory.java (10)¶  |~ NIOManagerPrintServer.java (20)¶  |~ NIOManagerPrintServerLauncherNoFactory.java (10)¶ |- readThread (3)¶  |~ ClientReadThread.java (94)¶  |~ ReadThreadInterface.java (13)¶  |~ ServerReadThread.java (102)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (10)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (33)¶  |~ ServerConfigure.java (475)"), Diff(INSERT,"Test execution time (ms):68260"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="83" _type="PauseCommand" date="Tue May 03 17:13:05 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="259440">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6294]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="82" _type="CopyCommand" date="Tue May 03 17:13:05 EDT 2022" starttimestamp="1651612126413" timestamp="259440" />
  <Command __id="84" _type="PasteCommand" date="Tue May 03 17:13:06 EDT 2022" starttimestamp="1651612126413" timestamp="260068" />
  <Command __id="86" _type="PauseCommand" date="Tue May 03 17:13:08 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="262177">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2109]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="85" _type="ShellCommand" date="Tue May 03 17:13:08 EDT 2022" starttimestamp="1651612126413" timestamp="262177" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="87" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:08 EDT 2022" starttimestamp="1651612126413" timestamp="262251" />
  <Command __id="88" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:08 EDT 2022" starttimestamp="1651612126413" timestamp="262259" />
  <Command __id="90" _type="PauseCommand" date="Tue May 03 17:13:10 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="263675">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1416]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="89" _type="ShellCommand" date="Tue May 03 17:13:10 EDT 2022" starttimestamp="1651612126413" timestamp="263675" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="92" _type="PauseCommand" date="Tue May 03 17:13:18 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="272123">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8448]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="91" _type="ShellCommand" date="Tue May 03 17:13:18 EDT 2022" starttimestamp="1651612126413" timestamp="272123" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="93" _type="ProgramExecutionEvent" className="/533Assignment060/src/checks/Checks.java" date="Tue May 03 17:13:18 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="272301" type="Run" />
  <Command __id="94" _type="ProgramExecutionEvent" className="/533Assignment060/src/checks/Checks.java" date="Tue May 03 17:13:18 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="272302" type="Run" />
  <Command __id="98" _type="PauseCommand" date="Tue May 03 17:13:24 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="277856">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2253]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="97" _type="ProgramExecutionEvent" className="/533Assignment060/src/checks/Checks.java" date="Tue May 03 17:13:24 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="277856" type="Run" />
  <Command __id="99" _type="RunCommand" className="/533Assignment060/src/checks/Checks.java" date="Tue May 03 17:13:24 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="277857" type="Run" />
  <Command __id="101" _type="PauseCommand" date="Tue May 03 17:13:27 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="281411">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[3554]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="100" _type="ShellCommand" date="Tue May 03 17:13:27 EDT 2022" starttimestamp="1651612126413" timestamp="281411" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="128" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298786" />
  <Command __id="129" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298787" />
  <Command __id="130" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298790" />
  <Command __id="131" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298791" />
  <Command __id="132" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298797" />
  <Command __id="133" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298797" />
  <Command __id="134" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298805" />
  <Command __id="135" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298806" />
  <Command __id="136" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298811" />
  <Command __id="137" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298811" />
  <Command __id="138" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298814" />
  <Command __id="139" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298815" />
  <Command __id="140" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298823" />
  <Command __id="141" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298823" />
  <Command __id="142" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298830" />
  <Command __id="143" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298830" />
  <Command __id="144" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298866" />
  <Command __id="145" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298866" />
  <Command __id="146" _type="EclipseCommand" commandID="" date="Tue May 03 17:13:45 EDT 2022" starttimestamp="1651612126413" timestamp="298871" />
  <Command __id="148" _type="PauseCommand" date="Tue May 03 17:14:19 EDT 2022" range="30s-1m" starttimestamp="1651612126413" timestamp="332985">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[34114]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="147" _type="ShellCommand" date="Tue May 03 17:14:19 EDT 2022" starttimestamp="1651612126413" timestamp="332985" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="150" _type="PauseCommand" date="Tue May 03 17:14:20 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="334457">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1472]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="149" _type="ShellCommand" date="Tue May 03 17:14:20 EDT 2022" starttimestamp="1651612126413" timestamp="334457" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="152" _type="PauseCommand" date="Tue May 03 17:15:32 EDT 2022" range="1m-2m" starttimestamp="1651612126413" timestamp="405695">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[71238]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="151" _type="ConsoleOutput" date="Tue May 03 17:15:32 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="405695" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOServerMetaStateNoBroadcast did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*%0.0

Test execution time (ms):115052
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"GIPCRMINIOServerMetaStateNoBroadcast did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*%0.0¶¶Test execution time (ms):115052"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="154" _type="PauseCommand" date="Tue May 03 17:17:10 EDT 2022" range="1m-2m" starttimestamp="1651612126413" timestamp="504435">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[98740]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="153" _type="ShellCommand" date="Tue May 03 17:17:10 EDT 2022" starttimestamp="1651612126413" timestamp="504435" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="155" _type="ProgramExecutionEvent" className="/533Assignment060/src/checks/Checks.java" date="Tue May 03 17:17:11 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="505405" type="Run" />
  <Command __id="156" _type="ProgramExecutionEvent" className="/533Assignment060/src/checks/Checks.java" date="Tue May 03 17:17:11 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="505405" type="Run" />
  <Command __id="160" _type="PauseCommand" date="Tue May 03 17:17:16 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="510374">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1163]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="159" _type="ProgramExecutionEvent" className="/533Assignment060/src/checks/Checks.java" date="Tue May 03 17:17:16 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="510374" type="Run" />
  <Command __id="161" _type="RunCommand" className="/533Assignment060/src/checks/Checks.java" date="Tue May 03 17:17:16 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="510374" type="Run" />
  <Command __id="163" _type="PauseCommand" date="Tue May 03 17:17:19 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="512868">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2494]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="162" _type="ShellCommand" date="Tue May 03 17:17:19 EDT 2022" starttimestamp="1651612126413" timestamp="512868" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="165" _type="PauseCommand" date="Tue May 03 17:17:51 EDT 2022" range="30s-1m" starttimestamp="1651612126413" timestamp="545087">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[32219]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="164" _type="ShellCommand" date="Tue May 03 17:17:51 EDT 2022" starttimestamp="1651612126413" timestamp="545087" type="ECLIPSE_MINIMIZED" />
  <Command __id="167" _type="PauseCommand" date="Tue May 03 17:18:11 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="565009">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[19922]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="166" _type="ShellCommand" date="Tue May 03 17:18:11 EDT 2022" starttimestamp="1651612126413" timestamp="565009" type="ECLIPSE_MAXIMIZED" />
  <Command __id="168" _type="ShellCommand" date="Tue May 03 17:18:11 EDT 2022" starttimestamp="1651612126413" timestamp="565050" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="170" _type="PauseCommand" date="Tue May 03 17:18:28 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="582199">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[17149]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="169" _type="ShellCommand" date="Tue May 03 17:18:28 EDT 2022" starttimestamp="1651612126413" timestamp="582199" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="172" _type="PauseCommand" date="Tue May 03 17:18:29 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="583274">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1075]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="171" _type="ShellCommand" date="Tue May 03 17:18:29 EDT 2022" starttimestamp="1651612126413" timestamp="583274" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="189" _type="PauseCommand" date="Tue May 03 17:19:11 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="624713">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2654]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="188" _type="MoveCaretCommand" caretOffset="436" date="Tue May 03 17:19:11 EDT 2022" docOffset="1452" starttimestamp="1651612126413" timestamp="624713" />
  <Command __id="190" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Tue May 03 17:19:11 EDT 2022" starttimestamp="1651612126413" timestamp="625542" />
  <Command __id="191" _type="CopyCommand" date="Tue May 03 17:19:12 EDT 2022" starttimestamp="1651612126413" timestamp="625786" />
  <Command __id="192" _type="MoveCaretCommand" caretOffset="409" date="Tue May 03 17:19:12 EDT 2022" docOffset="1425" starttimestamp="1651612126413" timestamp="626153" />
  <Command __id="194" _type="PauseCommand" date="Tue May 03 17:19:13 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="627512">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1359]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="195" _type="MoveCaretCommand" caretOffset="923" date="Tue May 03 17:19:13 EDT 2022" docOffset="1069" starttimestamp="1651612126413" timestamp="627571" />
  <Command __id="196" _type="MoveCaretCommand" caretOffset="844" date="Tue May 03 17:19:14 EDT 2022" docOffset="990" starttimestamp="1651612126413" timestamp="628028" />
  <Command __id="198" _type="PauseCommand" date="Tue May 03 17:19:15 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="629319">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1291]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="197" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Tue May 03 17:19:15 EDT 2022" starttimestamp="1651612126413" timestamp="629319" />
  <Command __id="200" _type="PasteCommand" date="Tue May 03 17:19:16 EDT 2022" starttimestamp="1651612126413" timestamp="629654" />
  <Command __id="202" _type="PauseCommand" date="Tue May 03 17:19:17 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="630841">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1187]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="201" _type="MoveCaretCommand" caretOffset="232" date="Tue May 03 17:19:17 EDT 2022" docOffset="232" starttimestamp="1651612126413" timestamp="630841" />
  <Command __id="204" _type="PauseCommand" date="Tue May 03 17:19:20 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="634305">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3463]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="203" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:19:20 EDT 2022" starttimestamp="1651612126413" timestamp="634304" />
  <Command __id="205" _type="EclipseCommand" commandID="" date="Tue May 03 17:19:20 EDT 2022" starttimestamp="1651612126413" timestamp="634447" />
  <Command __id="206" _type="EclipseCommand" commandID="" date="Tue May 03 17:19:20 EDT 2022" starttimestamp="1651612126413" timestamp="634487" />
  <Command __id="208" _type="PauseCommand" date="Tue May 03 17:19:23 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="637109">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2622]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="207" _type="ShellCommand" date="Tue May 03 17:19:23 EDT 2022" starttimestamp="1651612126413" timestamp="637109" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="209" _type="ShellCommand" date="Tue May 03 17:19:23 EDT 2022" starttimestamp="1651612126413" timestamp="637195" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="210" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue May 03 17:19:23 EDT 2022" start_end="END" starttimestamp="1651612126413" timestamp="637349" />
  <Command __id="211" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Tue May 03 17:19:23 EDT 2022" start_end="END" starttimestamp="1651612126413" timestamp="637349" />
  <Command __id="212" _type="EclipseCommand" commandID="" date="Tue May 03 17:19:23 EDT 2022" starttimestamp="1651612126413" timestamp="637558" />
  <Command __id="213" _type="EclipseCommand" commandID="" date="Tue May 03 17:19:23 EDT 2022" starttimestamp="1651612126413" timestamp="637575" />
  <Command __id="215" _type="PauseCommand" date="Tue May 03 17:19:25 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="639264">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1689]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="214" _type="MoveCaretCommand" caretOffset="351" date="Tue May 03 17:19:25 EDT 2022" docOffset="1367" starttimestamp="1651612126413" timestamp="639264" />
  <Command __id="220" _type="PauseCommand" date="Tue May 03 17:19:42 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="656129">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[13660]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="221" _type="MoveCaretCommand" caretOffset="0" date="Tue May 03 17:19:42 EDT 2022" docOffset="0" starttimestamp="1651612126413" timestamp="656254" />
  <Command __id="222" _type="ConsoleOutput" date="Tue May 03 17:19:42 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="656569" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOOneClientConnection did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*%0.0

Test execution time (ms):60210
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"GIPCRMINIO"), Diff(DELETE,"StaticArguments"), Diff(INSERT,"OneClientConnection"), Diff(EQUAL," did not pass completely:"), Diff(DELETE,"Error i"), Diff(INSERT,"I"), Diff(EQUAL,"n "), Diff(DELETE,"s"), Diff(INSERT,"S"), Diff(EQUAL,"erver "), Diff(DELETE,"(args as 'nio-port registry-host registry-port gipc-port'): Couldn't find server NIO connection info in traces.%0.9090909090909091"), Diff(INSERT,"enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*%0.0"), Diff(EQUAL,"¶¶Test execution time (ms):6"), Diff(DELETE,"5234"), Diff(INSERT,"0210"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="223" _type="MoveCaretCommand" caretOffset="293" date="Tue May 03 17:19:43 EDT 2022" docOffset="412" starttimestamp="1651612126413" timestamp="657357" />
  <Command __id="224" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Tue May 03 17:19:44 EDT 2022" starttimestamp="1651612126413" timestamp="658233" />
  <Command __id="225" _type="CopyCommand" date="Tue May 03 17:19:44 EDT 2022" starttimestamp="1651612126413" timestamp="658564" />
  <Command __id="227" _type="MoveCaretCommand" caretOffset="351" date="Tue May 03 17:19:45 EDT 2022" docOffset="1367" starttimestamp="1651612126413" timestamp="659247" />
  <Command __id="229" _type="PauseCommand" date="Tue May 03 17:19:46 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="660398">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1151]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="228" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Tue May 03 17:19:46 EDT 2022" starttimestamp="1651612126413" timestamp="660398" />
  <Command __id="231" _type="PasteCommand" date="Tue May 03 17:19:47 EDT 2022" starttimestamp="1651612126413" timestamp="660710" />
  <Command __id="232" _type="MoveCaretCommand" caretOffset="387" date="Tue May 03 17:19:47 EDT 2022" docOffset="387" starttimestamp="1651612126413" timestamp="661071" />
  <Command __id="233" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:19:47 EDT 2022" starttimestamp="1651612126413" timestamp="661345" />
  <Command __id="234" _type="EclipseCommand" commandID="" date="Tue May 03 17:19:47 EDT 2022" starttimestamp="1651612126413" timestamp="661435" />
  <Command __id="235" _type="EclipseCommand" commandID="" date="Tue May 03 17:19:47 EDT 2022" starttimestamp="1651612126413" timestamp="661453" />
  <Command __id="236" _type="MoveCaretCommand" caretOffset="387" date="Tue May 03 17:19:48 EDT 2022" docOffset="387" starttimestamp="1651612126413" timestamp="661724" />
  <Command __id="238" _type="PauseCommand" date="Tue May 03 17:19:52 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="666447">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4722]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="237" _type="ShellCommand" date="Tue May 03 17:19:52 EDT 2022" starttimestamp="1651612126413" timestamp="666446" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="239" _type="ShellCommand" date="Tue May 03 17:19:52 EDT 2022" starttimestamp="1651612126413" timestamp="666531" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="241" _type="MoveCaretCommand" caretOffset="222" date="Tue May 03 17:19:53 EDT 2022" docOffset="222" starttimestamp="1651612126413" timestamp="667225" />
  <Command __id="243" _type="PauseCommand" date="Tue May 03 17:19:56 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="670435">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3210]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="242" _type="MoveCaretCommand" caretOffset="116" date="Tue May 03 17:19:56 EDT 2022" docOffset="116" starttimestamp="1651612126413" timestamp="670435" />
  <Command __id="245" _type="PauseCommand" date="Tue May 03 17:19:58 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="671618">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1183]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="246" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:19:58 EDT 2022" starttimestamp="1651612126413" timestamp="671620" />
  <Command __id="248" _type="InsertStringCommand" date="Tue May 03 17:19:58 EDT 2022" starttimestamp="1651612126413" timestamp="671752" timestamp2="671752">
    <data><![CDATA[6]]></data>
  </Command>
  <Command __id="249" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:58 EDT 2022" starttimestamp="1651612126413" timestamp="672453" />
  <Command __id="250" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:59 EDT 2022" starttimestamp="1651612126413" timestamp="672953" />
  <Command __id="251" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:59 EDT 2022" starttimestamp="1651612126413" timestamp="672979" />
  <Command __id="252" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:59 EDT 2022" starttimestamp="1651612126413" timestamp="673013" />
  <Command __id="253" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:59 EDT 2022" starttimestamp="1651612126413" timestamp="673040" />
  <Command __id="254" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:59 EDT 2022" starttimestamp="1651612126413" timestamp="673074" />
  <Command __id="255" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:59 EDT 2022" starttimestamp="1651612126413" timestamp="673100" />
  <Command __id="256" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:59 EDT 2022" starttimestamp="1651612126413" timestamp="673130" />
  <Command __id="257" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:59 EDT 2022" starttimestamp="1651612126413" timestamp="673164" />
  <Command __id="258" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:59 EDT 2022" starttimestamp="1651612126413" timestamp="673193" />
  <Command __id="259" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:59 EDT 2022" starttimestamp="1651612126413" timestamp="673221" />
  <Command __id="260" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:59 EDT 2022" starttimestamp="1651612126413" timestamp="673251" />
  <Command __id="261" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:59 EDT 2022" starttimestamp="1651612126413" timestamp="673282" />
  <Command __id="262" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:59 EDT 2022" starttimestamp="1651612126413" timestamp="673315" />
  <Command __id="263" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:19:59 EDT 2022" starttimestamp="1651612126413" timestamp="673494" />
  <Command __id="265" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:20:00 EDT 2022" starttimestamp="1651612126413" timestamp="673694" />
  <Command __id="267" _type="InsertStringCommand" date="Tue May 03 17:20:00 EDT 2022" starttimestamp="1651612126413" timestamp="673806" timestamp2="673806">
    <data><![CDATA[6]]></data>
  </Command>
  <Command __id="269" _type="PauseCommand" date="Tue May 03 17:20:01 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="675081">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1275]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="268" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:20:01 EDT 2022" starttimestamp="1651612126413" timestamp="675081" />
  <Command __id="270" _type="EclipseCommand" commandID="" date="Tue May 03 17:20:01 EDT 2022" starttimestamp="1651612126413" timestamp="675173" />
  <Command __id="271" _type="EclipseCommand" commandID="" date="Tue May 03 17:20:01 EDT 2022" starttimestamp="1651612126413" timestamp="675186" />
  <Command __id="273" _type="PauseCommand" date="Tue May 03 17:20:03 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="677056">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1870]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="272" _type="MoveCaretCommand" caretOffset="1166" date="Tue May 03 17:20:03 EDT 2022" docOffset="1166" starttimestamp="1651612126413" timestamp="677056" />
  <Command __id="275" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:20:04 EDT 2022" starttimestamp="1651612126413" timestamp="677713" />
  <Command __id="277" _type="InsertStringCommand" date="Tue May 03 17:20:04 EDT 2022" starttimestamp="1651612126413" timestamp="678026" timestamp2="678026">
    <data><![CDATA[6]]></data>
  </Command>
  <Command __id="278" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:20:05 EDT 2022" starttimestamp="1651612126413" timestamp="678691" />
  <Command __id="279" _type="EclipseCommand" commandID="" date="Tue May 03 17:20:05 EDT 2022" starttimestamp="1651612126413" timestamp="678832" />
  <Command __id="280" _type="EclipseCommand" commandID="" date="Tue May 03 17:20:05 EDT 2022" starttimestamp="1651612126413" timestamp="678845" />
  <Command __id="281" _type="MoveCaretCommand" caretOffset="1185" date="Tue May 03 17:20:05 EDT 2022" docOffset="1185" starttimestamp="1651612126413" timestamp="679218" />
  <Command __id="283" _type="PauseCommand" date="Tue May 03 17:20:08 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="682517">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3299]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="282" _type="ShellCommand" date="Tue May 03 17:20:08 EDT 2022" starttimestamp="1651612126413" timestamp="682517" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="285" _type="PauseCommand" date="Tue May 03 17:20:10 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="684162">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1645]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="284" _type="ShellCommand" date="Tue May 03 17:20:10 EDT 2022" starttimestamp="1651612126413" timestamp="684162" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="286" _type="ProgramExecutionEvent" className="/533Assignment060/src/checks/Checks.java" date="Tue May 03 17:20:10 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="684309" type="Run" />
  <Command __id="287" _type="ProgramExecutionEvent" className="/533Assignment060/src/checks/Checks.java" date="Tue May 03 17:20:10 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="684309" type="Run" />
  <Command __id="288" _type="MoveCaretCommand" caretOffset="1049" date="Tue May 03 17:20:11 EDT 2022" docOffset="1049" starttimestamp="1651612126413" timestamp="684933" />
  <Command __id="290" _type="PauseCommand" date="Tue May 03 17:20:14 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="688363">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3430]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="289" _type="ShellCommand" date="Tue May 03 17:20:14 EDT 2022" starttimestamp="1651612126413" timestamp="688363" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="292" _type="PauseCommand" date="Tue May 03 17:20:16 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="690038">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1675]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="291" _type="ShellCommand" date="Tue May 03 17:20:16 EDT 2022" starttimestamp="1651612126413" timestamp="690038" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="293" _type="MoveCaretCommand" caretOffset="222" date="Tue May 03 17:20:16 EDT 2022" docOffset="222" starttimestamp="1651612126413" timestamp="690321" />
  <Command __id="295" _type="PauseCommand" date="Tue May 03 17:20:17 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="691520">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1199]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="294" _type="ShellCommand" date="Tue May 03 17:20:17 EDT 2022" starttimestamp="1651612126413" timestamp="691520" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="340" _type="PauseCommand" date="Tue May 03 17:20:46 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="720427">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1177]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="339" _type="ShellCommand" date="Tue May 03 17:20:46 EDT 2022" starttimestamp="1651612126413" timestamp="720427" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="342" _type="PauseCommand" date="Tue May 03 17:21:02 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="735898">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[15471]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="343" _type="MoveCaretCommand" caretOffset="0" date="Tue May 03 17:21:02 EDT 2022" docOffset="0" starttimestamp="1651612126413" timestamp="736001" />
  <Command __id="345" _type="PauseCommand" date="Tue May 03 17:21:03 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="737232">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1231]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="344" _type="MoveCaretCommand" caretOffset="270" date="Tue May 03 17:21:03 EDT 2022" docOffset="389" starttimestamp="1651612126413" timestamp="737232" />
  <Command __id="347" _type="PauseCommand" date="Tue May 03 17:21:05 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="739576">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2344]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="346" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Tue May 03 17:21:05 EDT 2022" starttimestamp="1651612126413" timestamp="739576" />
  <Command __id="348" _type="ProgramExecutionEvent" className="/533Assignment060/src/checks/RunTests.java" date="Tue May 03 17:21:06 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="739709" type="Run" />
  <Command __id="349" _type="RunCommand" className="/533Assignment060/src/checks/RunTests.java" date="Tue May 03 17:21:06 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="739709" type="Run" />
  <Command __id="351" _type="PauseCommand" date="Tue May 03 17:21:08 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="742218">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2509]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="350" _type="ShellCommand" date="Tue May 03 17:21:08 EDT 2022" starttimestamp="1651612126413" timestamp="742218" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="353" _type="PauseCommand" date="Tue May 03 17:21:31 EDT 2022" range="20s-30s" starttimestamp="1651612126413" timestamp="764846">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[22628]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="352" _type="ShellCommand" date="Tue May 03 17:21:31 EDT 2022" starttimestamp="1651612126413" timestamp="764846" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="354" _type="ProgramExecutionEvent" className="/533Assignment060/src/checks/RunTests.java" date="Tue May 03 17:21:31 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="764944" type="Run" />
  <Command __id="355" _type="ProgramExecutionEvent" className="/533Assignment060/src/checks/RunTests.java" date="Tue May 03 17:21:31 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="764944" type="Run" />
  <Command __id="357" _type="PauseCommand" date="Tue May 03 17:21:35 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="769470">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4526]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="356" _type="ShellCommand" date="Tue May 03 17:21:35 EDT 2022" starttimestamp="1651612126413" timestamp="769470" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="362" _type="PauseCommand" date="Tue May 03 17:22:04 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="798458">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1634]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="361" _type="ProgramExecutionEvent" className="/533Assignment060/src/checks/RunTests.java" date="Tue May 03 17:22:04 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="798458" type="Run" />
  <Command __id="363" _type="RunCommand" className="/533Assignment060/src/checks/RunTests.java" date="Tue May 03 17:22:04 EDT 2022" kind="HitBreakPoint" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="798458" type="Run" />
  <Command __id="365" _type="PauseCommand" date="Tue May 03 17:22:07 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="800958">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2500]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="364" _type="ShellCommand" date="Tue May 03 17:22:07 EDT 2022" starttimestamp="1651612126413" timestamp="800958" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="367" _type="PauseCommand" date="Tue May 03 17:23:34 EDT 2022" range="1m-2m" starttimestamp="1651612126413" timestamp="887742">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[86784]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="366" _type="ConsoleOutput" date="Tue May 03 17:23:34 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="887742" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):69785
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMINIOOneClientConnection did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*%0.0¶¶"), Diff(EQUAL,"Test execution time (ms):6"), Diff(DELETE,"0210"), Diff(INSERT,"9785"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="369" _type="PauseCommand" date="Tue May 03 17:23:46 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="899600">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11858]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="368" _type="ConsoleOutput" date="Tue May 03 17:23:46 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="899600" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 800  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):69785"), Diff(INSERT,"Number of traces > 800  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="371" _type="PauseCommand" date="Tue May 03 17:25:28 EDT 2022" range="1m-2m" starttimestamp="1651612126413" timestamp="1002413">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[102813]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="370" _type="ConsoleOutput" date="Tue May 03 17:25:28 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="1002413" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):114717
Number of traces > 800  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):114717¶"), Diff(EQUAL,"Number of traces > 800  turning tracing off¶")]]]></diff>
  </Command>
  <Command __id="373" _type="PauseCommand" date="Tue May 03 17:25:53 EDT 2022" range="20s-30s" starttimestamp="1651612126413" timestamp="1027181">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[24768]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="372" _type="ConsoleOutput" date="Tue May 03 17:25:53 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="1027181" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):24715
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"11"), Diff(INSERT,"2"), Diff(EQUAL,"471"), Diff(DELETE,"7¶Number of traces > 800  turning tracing off"), Diff(INSERT,"5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="375" _type="PauseCommand" date="Tue May 03 17:26:18 EDT 2022" range="20s-30s" starttimestamp="1651612126413" timestamp="1051845">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[24664]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="374" _type="ConsoleOutput" date="Tue May 03 17:26:18 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="1051845" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):24711
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):2471"), Diff(DELETE,"5"), Diff(INSERT,"1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="377" _type="PauseCommand" date="Tue May 03 17:26:42 EDT 2022" range="20s-30s" starttimestamp="1651612126413" timestamp="1076581">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[24736]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="376" _type="ConsoleOutput" date="Tue May 03 17:26:42 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="1076581" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):24731
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):247"), Diff(DELETE,"1"), Diff(INSERT,"3"), Diff(EQUAL,"1¶")]]]></diff>
  </Command>
  <Command __id="379" _type="PauseCommand" date="Tue May 03 17:27:03 EDT 2022" range="20s-30s" starttimestamp="1651612126413" timestamp="1096998">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[20417]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="378" _type="ShellCommand" date="Tue May 03 17:27:03 EDT 2022" starttimestamp="1651612126413" timestamp="1096998" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="381" _type="PauseCommand" date="Tue May 03 17:27:08 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1101966">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4968]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="380" _type="ConsoleOutput" date="Tue May 03 17:27:08 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="1101966" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):25375
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):2"), Diff(DELETE,"4731"), Diff(INSERT,"5375"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="383" _type="PauseCommand" date="Tue May 03 17:27:12 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1106207">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4241]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="382" _type="ShellCommand" date="Tue May 03 17:27:12 EDT 2022" starttimestamp="1651612126413" timestamp="1106207" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="385" _type="PauseCommand" date="Tue May 03 17:27:36 EDT 2022" range="20s-30s" starttimestamp="1651612126413" timestamp="1129862">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[23654]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="384" _type="ShellCommand" date="Tue May 03 17:27:36 EDT 2022" starttimestamp="1651612126413" timestamp="1129861" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="387" _type="PauseCommand" date="Tue May 03 17:27:39 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1133523">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3662]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="386" _type="ShellCommand" date="Tue May 03 17:27:39 EDT 2022" starttimestamp="1651612126413" timestamp="1133523" type="ECLIPSE_MINIMIZED" />
  <Command __id="388" _type="ShellCommand" date="Tue May 03 17:27:39 EDT 2022" starttimestamp="1651612126413" timestamp="1133540" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="390" _type="PauseCommand" date="Tue May 03 17:27:45 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1139568">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6028]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="389" _type="ShellCommand" date="Tue May 03 17:27:45 EDT 2022" starttimestamp="1651612126413" timestamp="1139568" type="ECLIPSE_MAXIMIZED" />
  <Command __id="391" _type="ShellCommand" date="Tue May 03 17:27:46 EDT 2022" starttimestamp="1651612126413" timestamp="1139613" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="393" _type="PauseCommand" date="Tue May 03 17:27:53 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1147019">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7406]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="392" _type="ShellCommand" date="Tue May 03 17:27:53 EDT 2022" starttimestamp="1651612126413" timestamp="1147019" type="ECLIPSE_MINIMIZED" />
  <Command __id="394" _type="ShellCommand" date="Tue May 03 17:27:53 EDT 2022" starttimestamp="1651612126413" timestamp="1147029" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="395" _type="ConsoleOutput" date="Tue May 03 17:27:54 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="1147699" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):21758
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):2"), Diff(DELETE,"53"), Diff(INSERT,"1"), Diff(EQUAL,"75"), Diff(INSERT,"8"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="397" _type="PauseCommand" date="Tue May 03 17:28:08 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="1162109">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[14410]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="396" _type="ConsoleOutput" date="Tue May 03 17:28:08 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="1162109" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):14456
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"21758"), Diff(INSERT,"14456"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="399" _type="PauseCommand" date="Tue May 03 17:28:22 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="1176500">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[14391]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="398" _type="ConsoleOutput" date="Tue May 03 17:28:22 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="1176500" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):14339
Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOTwoClientReadWriteNonAtomic@3950306 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):14"), Diff(DELETE,"456"), Diff(INSERT,"339¶Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOTwoClientReadWriteNonAtomic@3950306 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="401" _type="PauseCommand" date="Tue May 03 17:28:26 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1180212">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3712]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="400" _type="ConsoleOutput" date="Tue May 03 17:28:26 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="1180212" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Tue May 03 17:28:26 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):14339¶Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOTwoClientReadWriteNonAtomic@3950306 . Results may change."), Diff(INSERT,"Building symbol table and running first pass checks:Tue May 03 17:28:26 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="403" _type="PauseCommand" date="Tue May 03 17:28:28 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1182509">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2297]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="402" _type="ConsoleOutput" date="Tue May 03 17:28:28 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="1182509" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:127
Running second pass checks Tue May 03 17:28:28 EDT 2022
Start O(n2) inter- and intra class method calls:Tue May 03 17:28:28 EDT 2022
End O(n2) inter- and intra class method calls:Tue May 03 17:28:28 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and running first pass check"), Diff(INSERT,"size:127¶Running second pass checks Tue May 03 17:28:28 EDT 2022¶Start O(n2) inter- and intra class method calls:Tue May 03 17:28:28 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Tue May 03 17:28:2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="404" _type="ConsoleOutput" date="Tue May 03 17:28:29 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="1183374" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Tue May 03 17:28:29 EDT 2022
Generating checks:Tue May 03 17:28:29 EDT 2022
Finished Generating checks:Tue May 03 17:28:29 EDT 2022
Generating externals:Tue May 03 17:28:29 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:127¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Tue May 03 17:28:2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating check"), Diff(EQUAL,"s:Tue May 03 17:28:2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Finished Generating checks:Tue May 03 17:28:29 EDT 2022¶Generating externa"), Diff(EQUAL,"ls:Tue May 03 17:28:2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="405" _type="ConsoleOutput" date="Tue May 03 17:28:30 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="1183994" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Tue May 03 17:28:30 EDT 2022
A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0

Number of traces > 800  turning tracing off
Test execution time (ms):3738
Number of traces > 800  turning tracing off
Test execution time (ms):16
Test execution time (ms):12
A6InterfaceAsType did not pass completely:See console trace about lines failing  this check%0.9428571428571428

Test execution time (ms):12
Test execution time (ms):11
A6AccessModifiersMatched did not pass completely:See console trace about lines failing  this check%0.25

Test execution time (ms):12
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Tue May 03 17:28:"), Diff(DELETE,"29"), Diff(INSERT,"30"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Generating checks:Tue May 03 17:28:29 EDT 2022¶Finished Generating checks:Tue May 03 17:28:29 EDT 2022¶Generating externals:Tue May 03 17:28:29 EDT 202"), Diff(INSERT,"A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0¶¶Number of traces > 800  turning tracing off¶Test execution time (ms):3738¶Number of traces > 800  turning tracing off¶Test execution time (ms):16¶Test execution time (ms):12¶A6InterfaceAsType did not pass completely:See console trace about lines failing  this check%0.9428571428571428¶¶Test execution time (ms):12¶Test execution time (ms):11¶A6AccessModifiersMatched did not pass completely:See console trace about lines failing  this check%0.25¶¶Test execution time (ms):1"), Diff(EQUAL,"2¶")]]]></diff>
  </Command>
  <Command __id="407" _type="PauseCommand" date="Tue May 03 17:28:33 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1186871">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2877]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="406" _type="ConsoleOutput" date="Tue May 03 17:28:33 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="1186871" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
Test execution time (ms):11
Test execution time (ms):12
Test execution time (ms):11

Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (37)
 |- checks (1)
  |~ RunTests.java (30)
 |- client (8)
  |~ Client.java (23)
  |~ ClientConfigure.java (434)
  |~ ClientOutCoupler.java (62)
  |~ ClientRemoteInterfaceGIPC.java (33)
  |~ ClientRemoteInterfaceNIO.java (25)
  |~ ClientRemoteInterfaceRMI.java (29)
  |~ ClientRemoteObject.java (314)
  |~ ClientRemoteObjectNIO.java (199)
 |- nioExample (8)
  |~ AnNIOManagerPrintClient.java (125)
  |~ AnNIOManagerPrintServer.java (139)
  |~ exampleClientReadThread.java (67)
  |~ exampleServerReadThread.java (70)
  |~ FakeClientInterface.java (12)
  |~ NIOManagerPrintClientLauncherNoFactory.java (10)
  |~ NIOManagerPrintServer.java (20)
  |~ NIOManagerPrintServerLauncherNoFactory.java (10)
 |- readThread (3)
  |~ ClientReadThread.java (94)
  |~ ReadThreadInterface.java (13)
  |~ ServerReadThread.java (102)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (10)
  |~ OriginalSimulation.java (9)
  |~ Server.java (33)
  |~ ServerConfigure.java (475)
  |- remote (6)
   |~ ServerRemoteInterfaceGIPC.java (44)
   |~ ServerRemoteInterfaceNIO.java (23)
   |~ ServerRemoteInterfaceRMI.java (40)
   |~ ServerRemoteObjectGIPC.java (345)
   |~ ServerRemoteObjectNIO.java (169)
   |~ ServerRemoteObjectRMI.java (245)

Attempting to match to the structure:
|- .* (23)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Tue May 03 17:28:30 EDT 2022¶A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, se"), Diff(INSERT,"Test execution time (ms):5¶Test execution time (ms):11¶Test execution time (ms):12¶Test execution time (ms):11¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826¶|- represents a package, |~ represents a file¶¶Th"), Diff(EQUAL,"e "), Diff(INSERT,"s"), Diff(EQUAL,"tr"), Diff(DELETE,"aced console output%0.0¶¶Number of traces > 800  turning tracing off¶Test execution time (ms):3738¶Number of traces > 800  turning tracing off¶Test execution time (ms):16¶Test execution time (ms):12¶A6I"), Diff(INSERT,"ucture of your project was found to be:¶|- src (37)¶ |- checks (1)¶  |~ RunTests.java (30)¶ |- client (8)¶  |~ Client.java (23)¶  |~ ClientConfigure.java (434)¶  |~ ClientOutCoupler.java (62)¶  |~ ClientRemoteInterfaceGIPC.java (33)¶  |~ ClientRemoteInterfaceNIO.java (25)¶  |~ ClientRemoteInterfaceRMI.java (29)¶  |~ ClientRemoteObject.java (314)¶  |~ ClientRemoteObjectNIO.java (199)¶ |- nioExample (8)¶  |~ AnNIOManagerPrintClient.java (125)¶  |~ AnNIOManagerPri"), Diff(EQUAL,"nt"), Diff(INSERT,"S"), Diff(EQUAL,"er"), Diff(DELETE,"faceAsType did not pass completely:See console trace about lines failing  this check%0.9428571428571428¶¶Test execution time (ms):12¶Test execution time (ms):11¶A6AccessModifiersMatched did not pass completely:See console trace about lines failing  this check%0.25¶¶Test execution time (ms):12"), Diff(INSERT,"ver.java (139)¶  |~ exampleClientReadThread.java (67)¶  |~ exampleServerReadThread.java (70)¶  |~ FakeClientInterface.java (12)¶  |~ NIOManagerPrintClientLauncherNoFactory.java (10)¶  |~ NIOManagerPrintServer.java (20)¶  |~ NIOManagerPrintServerLauncherNoFactory.java (10)¶ |- readThread (3)¶  |~ ClientReadThread.java (94)¶  |~ ReadThreadInterface.java (13)¶  |~ ServerReadThread.java (102)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (10)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (33)¶  |~ ServerConfigure.java (475)¶  |- remote (6)¶   |~ ServerRemoteInterfaceGIPC.java (44)¶   |~ ServerRemoteInterfaceNIO.java (23)¶   |~ ServerRemoteInterfaceRMI.java (40)¶   |~ ServerRemoteObjectGIPC.java (345)¶   |~ ServerRemoteObjectNIO.java (169)¶   |~ ServerRemoteObjectRMI.java (245)¶¶Attempting to match to the structure:¶|- .* (23)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="409" _type="PauseCommand" date="Tue May 03 17:28:36 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1190395">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3524]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="408" _type="ConsoleOutput" date="Tue May 03 17:28:36 EDT 2022" overflow="false" starttimestamp="1651612126413" timestamp="1190395" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6InterfaceAsType@53a7407a . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):5¶Test execution time (ms):11¶Test execution time (ms):12¶Test execution time (ms):11¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (37)¶ |- checks (1)¶  |~ RunTests.java (30)¶ |- client (8)¶  |~ Client.java (23)¶  |~ ClientConfigure.java (434)¶  |~ ClientOutCoupler.java (62)¶  |~ ClientRemoteInterfaceGIPC.java (33)¶  |~ ClientRemoteInterfaceNIO.java (25)¶  |~ ClientRemoteInterfaceRMI.java (29)¶  |~ ClientRemoteObject.java (314)¶  |~ ClientRemoteObjectNIO.java (199)¶ |- nioExample (8)¶  |~ AnNIOManagerPrintClient.java (125)¶  |~ AnNIOManagerPrintServer.java (139)¶  |~ exampleClientReadThread.java (67)¶  |~ exampleServerReadThread.java (70)¶  |~ FakeClientInterface.java (12)¶  |~ NIOManagerPrintClientLauncherNoFactory.java (10)¶  |~ NIOManagerPrintServer.java (20)¶  |~ NIOManagerPrintServerLauncherNoFactory.java (10)¶ |- readThread (3)¶  |~ ClientReadThread.java (94)¶  |~ ReadThreadInterface.java (13)¶  |~ ServerReadThread.java (102)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (10)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (33)¶  |~ ServerConfigure.java (475)¶  |- remote (6)¶   |~ ServerRemoteInterfaceGIPC.java (44)¶   |~ ServerRemoteInterfaceNIO.java (23)¶   |~ ServerRemoteInterfaceRMI.java (40)¶   |~ ServerRemoteObjectGIPC.java (345)¶   |~ ServerRemoteObjectNIO.java (169)¶   |~ ServerRemoteObjectRMI.java (245)¶¶Attempting to match to the structure:¶|- .* (23)"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment6.style.A6InterfaceAsType@53a7407a . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="411" _type="PauseCommand" date="Tue May 03 17:28:39 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1193256">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2861]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="410" _type="ShellCommand" date="Tue May 03 17:28:39 EDT 2022" starttimestamp="1651612126413" timestamp="1193256" type="ECLIPSE_MAXIMIZED" />
  <Command __id="412" _type="ShellCommand" date="Tue May 03 17:28:39 EDT 2022" starttimestamp="1651612126413" timestamp="1193301" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="414" _type="PauseCommand" date="Tue May 03 17:29:05 EDT 2022" range="20s-30s" starttimestamp="1651612126413" timestamp="1218857">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[25556]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="415" _type="MoveCaretCommand" caretOffset="0" date="Tue May 03 17:29:05 EDT 2022" docOffset="0" starttimestamp="1651612126413" timestamp="1218994" />
  <Command __id="417" _type="PauseCommand" date="Tue May 03 17:29:06 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1220194">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1200]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="416" _type="ShellCommand" date="Tue May 03 17:29:06 EDT 2022" starttimestamp="1651612126413" timestamp="1220194" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="418" _type="ShellCommand" date="Tue May 03 17:29:07 EDT 2022" starttimestamp="1651612126413" timestamp="1220859" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="420" _type="PauseCommand" date="Tue May 03 17:29:10 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1223886">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3027]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="419" _type="MoveCaretCommand" caretOffset="239" date="Tue May 03 17:29:10 EDT 2022" docOffset="809" starttimestamp="1651612126413" timestamp="1223886" />
  <Command __id="422" _type="PauseCommand" date="Tue May 03 17:29:21 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="1235163">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11277]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="423" _type="MoveCaretCommand" caretOffset="0" date="Tue May 03 17:29:21 EDT 2022" docOffset="0" starttimestamp="1651612126413" timestamp="1235302" />
  <Command __id="425" _type="PauseCommand" date="Tue May 03 17:29:26 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1240212">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4910]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="426" _type="MoveCaretCommand" caretOffset="0" date="Tue May 03 17:29:26 EDT 2022" docOffset="0" starttimestamp="1651612126413" timestamp="1240348" />
  <Command __id="428" _type="PauseCommand" date="Tue May 03 17:29:29 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1243545">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3197]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="427" _type="MoveCaretCommand" caretOffset="246" date="Tue May 03 17:29:29 EDT 2022" docOffset="1732" starttimestamp="1651612126413" timestamp="1243545" />
  <Command __id="429" _type="SelectTextCommand" caretOffset="260" date="Tue May 03 17:29:30 EDT 2022" end="260" start="236" starttimestamp="1651612126413" timestamp="1243674" />
  <Command __id="42" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:08:47 EDT 2022" docASTNodeCount="117" docActiveCodeLength="878" docExpressionCount="75" docLength="1269" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1535">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\checks\Checks.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package checks;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp533s22.assignment6.S22Assignment6Suite;
import trace.grader.basics.GraderBasicsTraceUtility;
import util.trace.Tracer;

public class Checks {
	public static void main(final String[] args) {
		Tracer.showInfo(true);
		GraderBasicsTraceUtility.setBufferTracedMessages(false);
		final int traces = 8000;
		Tracer.setMaxTraces(traces);
		
		// if you set this to false, grader steps will not be traced
		GraderBasicsTraceUtility.setTracerShowInfo(true);	
		// if you set this to false, all grader steps will be traced,
		// not just the ones that failed		
		
		GraderBasicsTraceUtility.setBufferTracedMessages(false);
		// Change this number if a test trace gets longer than 600 and is clipped
		
		final int length = 600;
		GraderBasicsTraceUtility.setMaxPrintedTraces(length);
		// Change this number if all traces together are longer than 600
		
		final int time = 4000;
		GraderBasicsTraceUtility.setMaxTraces(time);
		// Change this number if your process times out prematurely
		
		final int timer = 50;
		BasicProjectExecution.setProcessTimeOut(timer);
		// You need to always call such a method
		S22Assignment6Suite.main(args);
	}
}
]]></snapshot>
  </Command>
  <Command __id="175" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:18:57 EDT 2022" docASTNodeCount="84" docActiveCodeLength="608" docExpressionCount="62" docLength="1607" projectName="533Assignment5" starttimestamp="1651612126413" timestamp="611322">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment5\src\comp533\RunTests.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package comp533;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp533s22.assignment5.S22Assignment5Suite;
import trace.grader.basics.GraderBasicsTraceUtility;

import gradingTools.comp533s20.assignment7.Assignment7Suite;
import util.trace.Tracer;


////import util.trace.Tracer;
//public class RunTests {
//	public static final int MAX_PRINTED_TRACES = 800;
//	public static final int MAX_TRACES = 2000;
//	public static final int TIME_OUT = 5;
//
//	
//	public static void main(final String[] args) {
//		// if you set this to false, grader steps will not be traced
//		GraderBasicsTraceUtility.setTracerShowInfo(true);	
//		// if you set this to false, all grader steps will be traced,
//		// not just the ones that failed		
//		GraderBasicsTraceUtility.setBufferTracedMessages(true);
//		// Change this number if a test trace gets longer than 600 and is clipped
//		GraderBasicsTraceUtility.setMaxPrintedTraces(MAX_PRINTED_TRACES);
//		// Change this number if all traces together are longer than 2000
//		GraderBasicsTraceUtility.setMaxTraces(MAX_TRACES);
//		// Change this number if your process times out prematurely
//		BasicProjectExecution.setProcessTimeOut(TIME_OUT);
//		// You need to always call such a method
//		S22Assignment5Suite.main(args);
//
//	}
//}

import gradingTools.comp533s20.assignment6.Assignment6Suite;
import util.trace.Tracer;

public class RunTests {
	public static void main(String[] args) {
		Tracer.showInfo(true);
		Assignment7Suite.main(args);
		Assignment7Suite.setProcessTimeOut(60);
	}
}

]]></snapshot>
  </Command>
  <Command __id="178" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:19:01 EDT 2022" docASTNodeCount="51" docActiveCodeLength="315" docExpressionCount="31" docLength="315" projectName="533Assignment5" starttimestamp="1651612126413" timestamp="615170">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment5\src\comp533\RunA5Tests.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package comp533;

import gradingTools.comp533s20.assignment5.Assignment5Suite;
import util.trace.Tracer;

public class RunA5Tests {
	public static void main(String[] args) {
		Tracer.showInfo(true);
		Assignment5Suite.main(args);
		int timeOut = 60;
		Assignment5Suite.setProcessTimeOut(timeOut);
	}
}
]]></snapshot>
  </Command>
  <Command __id="183" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:19:06 EDT 2022" docASTNodeCount="84" docActiveCodeLength="608" docExpressionCount="62" docLength="1607" projectName="533Assignment5" starttimestamp="1651612126413" timestamp="620254">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment5\src\comp533\RunTests.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533;¶¶import grader.basics.execution.BasicProjectExecution;¶import gradingTools.comp533s22.assignment5.S22Assignment5Suite;¶import trace.grader.basics.GraderBasicsTraceUtility;¶¶import gradingTools.comp533s20.assignment7.Assignment7Suite;¶import util.trace.Tracer;¶¶¶////import util.trace.Tracer;¶//public class RunTests {¶//	public static final int MAX_PRINTED_TRACES = 800;¶//	public static final int MAX_TRACES = 2000;¶//	public static final int TIME_OUT = 5;¶//¶//	¶//	public static void main(final String[] args) {¶//		// if you set this to false, grader steps will not be traced¶//		GraderBasicsTraceUtility.setTracerShowInfo(true);	¶//		// if you set this to false, all grader steps will be traced,¶//		// not just the ones that failed		¶//		GraderBasicsTraceUtility.setBufferTracedMessages(true);¶//		// Change this number if a test trace gets longer than 600 and is clipped¶//		GraderBasicsTraceUtility.setMaxPrintedTraces(MAX_PRINTED_TRACES);¶//		// Change this number if all traces together are longer than 2000¶//		GraderBasicsTraceUtility.setMaxTraces(MAX_TRACES);¶//		// Change this number if your process times out prematurely¶//		BasicProjectExecution.setProcessTimeOut(TIME_OUT);¶//		// You need to always call such a method¶//		S22Assignment5Suite.main(args);¶//¶//	}¶//}¶¶import gradingTools.comp533s20.assignment6.Assignment6Suite;¶import util.trace.Tracer;¶¶public class RunTests {¶	public static void main(String[] args) {¶		Tracer.showInfo(true);¶		Assignment7Suite.main(args);¶		Assignment7Suite.setProcessTimeOut(60);¶	}¶}¶¶")]]]></diff>
  </Command>
  <Command __id="193" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:19:13 EDT 2022" docASTNodeCount="117" docActiveCodeLength="878" docExpressionCount="75" docLength="1269" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="627512">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\checks\Checks.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package checks;¶¶import grader.basics.execution.BasicProjectExecution;¶import gradingTools.comp533s22.assignment6.S22Assignment6Suite;¶import trace.grader.basics.GraderBasicsTraceUtility;¶import util.trace.Tracer;¶¶public class Checks {¶	public static void main(final String[] args) {¶		Tracer.showInfo(true);¶		GraderBasicsTraceUtility.setBufferTracedMessages(false);¶		final int traces = 8000;¶		Tracer.setMaxTraces(traces);¶		¶		// if you set this to false, grader steps will not be traced¶		GraderBasicsTraceUtility.setTracerShowInfo(true);	¶		// if you set this to false, all grader steps will be traced,¶		// not just the ones that failed		¶		¶		GraderBasicsTraceUtility.setBufferTracedMessages(false);¶		// Change this number if a test trace gets longer than 600 and is clipped¶		¶		final int length = 600;¶		GraderBasicsTraceUtility.setMaxPrintedTraces(length);¶		// Change this number if all traces together are longer than 600¶		¶		final int time = 4000;¶		GraderBasicsTraceUtility.setMaxTraces(time);¶		// Change this number if your process times out prematurely¶		¶		final int timer = 50;¶		BasicProjectExecution.setProcessTimeOut(timer);¶		// You need to always call such a method¶		S22Assignment6Suite.main(args);¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="199" _type="Replace" date="Tue May 03 17:19:16 EDT 2022" docASTNodeCount="84" docActiveCodeLength="608" docExpressionCount="62" docLength="1607" endLine="36" insertionLength="1607" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1269" offset="0" startLine="0" starttimestamp="1651612126413" timestamp="629627">
    <deletedText><![CDATA[package checks;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp533s22.assignment6.S22Assignment6Suite;
import trace.grader.basics.GraderBasicsTraceUtility;
import util.trace.Tracer;

public class Checks {
	public static void main(final String[] args) {
		Tracer.showInfo(true);
		GraderBasicsTraceUtility.setBufferTracedMessages(false);
		final int traces = 8000;
		Tracer.setMaxTraces(traces);
		
		// if you set this to false, grader steps will not be traced
		GraderBasicsTraceUtility.setTracerShowInfo(true);	
		// if you set this to false, all grader steps will be traced,
		// not just the ones that failed		
		
		GraderBasicsTraceUtility.setBufferTracedMessages(false);
		// Change this number if a test trace gets longer than 600 and is clipped
		
		final int length = 600;
		GraderBasicsTraceUtility.setMaxPrintedTraces(length);
		// Change this number if all traces together are longer than 600
		
		final int time = 4000;
		GraderBasicsTraceUtility.setMaxTraces(time);
		// Change this number if your process times out prematurely
		
		final int timer = 50;
		BasicProjectExecution.setProcessTimeOut(timer);
		// You need to always call such a method
		S22Assignment6Suite.main(args);
	}
}
]]></deletedText>
    <insertedText><![CDATA[package comp533;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp533s22.assignment5.S22Assignment5Suite;
import trace.grader.basics.GraderBasicsTraceUtility;

import gradingTools.comp533s20.assignment7.Assignment7Suite;
import util.trace.Tracer;


////import util.trace.Tracer;
//public class RunTests {
//	public static final int MAX_PRINTED_TRACES = 800;
//	public static final int MAX_TRACES = 2000;
//	public static final int TIME_OUT = 5;
//
//	
//	public static void main(final String[] args) {
//		// if you set this to false, grader steps will not be traced
//		GraderBasicsTraceUtility.setTracerShowInfo(true);	
//		// if you set this to false, all grader steps will be traced,
//		// not just the ones that failed		
//		GraderBasicsTraceUtility.setBufferTracedMessages(true);
//		// Change this number if a test trace gets longer than 600 and is clipped
//		GraderBasicsTraceUtility.setMaxPrintedTraces(MAX_PRINTED_TRACES);
//		// Change this number if all traces together are longer than 2000
//		GraderBasicsTraceUtility.setMaxTraces(MAX_TRACES);
//		// Change this number if your process times out prematurely
//		BasicProjectExecution.setProcessTimeOut(TIME_OUT);
//		// You need to always call such a method
//		S22Assignment5Suite.main(args);
//
//	}
//}

import gradingTools.comp533s20.assignment6.Assignment6Suite;
import util.trace.Tracer;

public class RunTests {
	public static void main(String[] args) {
		Tracer.showInfo(true);
		Assignment7Suite.main(args);
		Assignment7Suite.setProcessTimeOut(60);
	}
}

]]></insertedText>
  </DocumentChange>
  <Command __id="219" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:19:42 EDT 2022" docASTNodeCount="96" docActiveCodeLength="778" docExpressionCount="56" docLength="1197" projectName="533Assignment4" starttimestamp="1651612126413" timestamp="656129">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment4\src\comp533\RunTests.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package comp533;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp533s22.assignment5.S22Assignment5Suite;
import trace.grader.basics.GraderBasicsTraceUtility;

//import util.trace.Tracer;
public class RunTests {
	public static final int MAX_PRINTED_TRACES = 800;
	public static final int MAX_TRACES = 2000;
	public static final int TIME_OUT = 5;

	
	public static void main(final String[] args) {
		// if you set this to false, grader steps will not be traced
		GraderBasicsTraceUtility.setTracerShowInfo(true);	
		// if you set this to false, all grader steps will be traced,
		// not just the ones that failed		
		GraderBasicsTraceUtility.setBufferTracedMessages(true);
		// Change this number if a test trace gets longer than 600 and is clipped
		GraderBasicsTraceUtility.setMaxPrintedTraces(MAX_PRINTED_TRACES);
		// Change this number if all traces together are longer than 2000
		GraderBasicsTraceUtility.setMaxTraces(MAX_TRACES);
		// Change this number if your process times out prematurely
		BasicProjectExecution.setProcessTimeOut(TIME_OUT);
		// You need to always call such a method
		S22Assignment5Suite.main(args);

	}
}

]]></snapshot>
  </Command>
  <Command __id="226" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:19:45 EDT 2022" docASTNodeCount="84" docActiveCodeLength="607" docExpressionCount="62" docLength="1606" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="659170">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\checks\RunTests.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package checks;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp533s22.assignment5.S22Assignment5Suite;
import trace.grader.basics.GraderBasicsTraceUtility;

import gradingTools.comp533s20.assignment7.Assignment7Suite;
import util.trace.Tracer;


////import util.trace.Tracer;
//public class RunTests {
//	public static final int MAX_PRINTED_TRACES = 800;
//	public static final int MAX_TRACES = 2000;
//	public static final int TIME_OUT = 5;
//
//	
//	public static void main(final String[] args) {
//		// if you set this to false, grader steps will not be traced
//		GraderBasicsTraceUtility.setTracerShowInfo(true);	
//		// if you set this to false, all grader steps will be traced,
//		// not just the ones that failed		
//		GraderBasicsTraceUtility.setBufferTracedMessages(true);
//		// Change this number if a test trace gets longer than 600 and is clipped
//		GraderBasicsTraceUtility.setMaxPrintedTraces(MAX_PRINTED_TRACES);
//		// Change this number if all traces together are longer than 2000
//		GraderBasicsTraceUtility.setMaxTraces(MAX_TRACES);
//		// Change this number if your process times out prematurely
//		BasicProjectExecution.setProcessTimeOut(TIME_OUT);
//		// You need to always call such a method
//		S22Assignment5Suite.main(args);
//
//	}
//}

import gradingTools.comp533s22.assignment6.Assignment6Suite;
import util.trace.Tracer;

public class RunTests {
	public static void main(String[] args) {
		Tracer.showInfo(true);
		Assignment7Suite.main(args);
		Assignment7Suite.setProcessTimeOut(60);
	}
}

]]></snapshot>
  </Command>
  <DocumentChange __id="230" _type="Replace" date="Tue May 03 17:19:47 EDT 2022" docASTNodeCount="96" docActiveCodeLength="778" docExpressionCount="56" docLength="1197" endLine="46" insertionLength="1197" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1606" offset="0" startLine="0" starttimestamp="1651612126413" timestamp="660691">
    <deletedText><![CDATA[package checks;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp533s22.assignment5.S22Assignment5Suite;
import trace.grader.basics.GraderBasicsTraceUtility;

import gradingTools.comp533s20.assignment7.Assignment7Suite;
import util.trace.Tracer;


////import util.trace.Tracer;
//public class RunTests {
//	public static final int MAX_PRINTED_TRACES = 800;
//	public static final int MAX_TRACES = 2000;
//	public static final int TIME_OUT = 5;
//
//	
//	public static void main(final String[] args) {
//		// if you set this to false, grader steps will not be traced
//		GraderBasicsTraceUtility.setTracerShowInfo(true);	
//		// if you set this to false, all grader steps will be traced,
//		// not just the ones that failed		
//		GraderBasicsTraceUtility.setBufferTracedMessages(true);
//		// Change this number if a test trace gets longer than 600 and is clipped
//		GraderBasicsTraceUtility.setMaxPrintedTraces(MAX_PRINTED_TRACES);
//		// Change this number if all traces together are longer than 2000
//		GraderBasicsTraceUtility.setMaxTraces(MAX_TRACES);
//		// Change this number if your process times out prematurely
//		BasicProjectExecution.setProcessTimeOut(TIME_OUT);
//		// You need to always call such a method
//		S22Assignment5Suite.main(args);
//
//	}
//}

import gradingTools.comp533s22.assignment6.Assignment6Suite;
import util.trace.Tracer;

public class RunTests {
	public static void main(String[] args) {
		Tracer.showInfo(true);
		Assignment7Suite.main(args);
		Assignment7Suite.setProcessTimeOut(60);
	}
}

]]></deletedText>
    <insertedText><![CDATA[package comp533;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp533s22.assignment5.S22Assignment5Suite;
import trace.grader.basics.GraderBasicsTraceUtility;

//import util.trace.Tracer;
public class RunTests {
	public static final int MAX_PRINTED_TRACES = 800;
	public static final int MAX_TRACES = 2000;
	public static final int TIME_OUT = 5;

	
	public static void main(final String[] args) {
		// if you set this to false, grader steps will not be traced
		GraderBasicsTraceUtility.setTracerShowInfo(true);	
		// if you set this to false, all grader steps will be traced,
		// not just the ones that failed		
		GraderBasicsTraceUtility.setBufferTracedMessages(true);
		// Change this number if a test trace gets longer than 600 and is clipped
		GraderBasicsTraceUtility.setMaxPrintedTraces(MAX_PRINTED_TRACES);
		// Change this number if all traces together are longer than 2000
		GraderBasicsTraceUtility.setMaxTraces(MAX_TRACES);
		// Change this number if your process times out prematurely
		BasicProjectExecution.setProcessTimeOut(TIME_OUT);
		// You need to always call such a method
		S22Assignment5Suite.main(args);

	}
}

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="240" _type="Replace" date="Tue May 03 17:19:52 EDT 2022" docASTNodeCount="96" docActiveCodeLength="777" docExpressionCount="56" docLength="1196" endLine="0" insertionLength="6" int_docASTNodeCount="94" int_docActiveCodeLength="771" int_docExpressionCount="55" int_docLength="1190" length="7" offset="8" startLine="0" starttimestamp="1651612126413" timestamp="666581">
    <deletedText><![CDATA[comp533]]></deletedText>
    <insertedText><![CDATA[checks]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="244" _type="Delete" date="Tue May 03 17:19:58 EDT 2022" docASTNodeCount="96" docActiveCodeLength="776" docExpressionCount="56" docLength="1195" endLine="3" length="1" offset="115" startLine="3" starttimestamp="1651612126413" timestamp="671618">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="247" _type="Insert" date="Tue May 03 17:19:58 EDT 2022" docASTNodeCount="96" docActiveCodeLength="777" docExpressionCount="56" docLength="1196" length="1" offset="115" starttimestamp="1651612126413" timestamp="671748">
    <text><![CDATA[6]]></text>
  </DocumentChange>
  <DocumentChange __id="264" _type="Delete" date="Tue May 03 17:20:00 EDT 2022" docASTNodeCount="96" docActiveCodeLength="776" docExpressionCount="56" docLength="1195" endLine="3" length="1" offset="130" startLine="3" starttimestamp="1651612126413" timestamp="673692">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="266" _type="Insert" date="Tue May 03 17:20:00 EDT 2022" docASTNodeCount="96" docActiveCodeLength="777" docExpressionCount="56" docLength="1196" length="1" offset="130" starttimestamp="1651612126413" timestamp="673802">
    <text><![CDATA[6]]></text>
  </DocumentChange>
  <DocumentChange __id="274" _type="Delete" date="Tue May 03 17:20:04 EDT 2022" docASTNodeCount="96" docActiveCodeLength="776" docExpressionCount="56" docLength="1195" endLine="26" length="1" offset="1165" startLine="26" starttimestamp="1651612126413" timestamp="677708">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="276" _type="Insert" date="Tue May 03 17:20:04 EDT 2022" docASTNodeCount="96" docActiveCodeLength="777" docExpressionCount="56" docLength="1196" length="1" offset="1165" starttimestamp="1651612126413" timestamp="678023">
    <text><![CDATA[6]]></text>
  </DocumentChange>
  <Command __id="298" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:20:21 EDT 2022" docASTNodeCount="117" docActiveCodeLength="878" docExpressionCount="75" docLength="1269" projectName="533Ass6" starttimestamp="1651612126413" timestamp="695519">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Ass6\src\checks\Checks.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package checks;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp533s22.assignment6.S22Assignment6Suite;
import trace.grader.basics.GraderBasicsTraceUtility;
import util.trace.Tracer;

public class Checks {
	public static void main(final String[] args) {
		Tracer.showInfo(true);
		GraderBasicsTraceUtility.setBufferTracedMessages(false);
		final int traces = 8000;
		Tracer.setMaxTraces(traces);
		
		// if you set this to false, grader steps will not be traced
		GraderBasicsTraceUtility.setTracerShowInfo(true);	
		// if you set this to false, all grader steps will be traced,
		// not just the ones that failed		
		
		GraderBasicsTraceUtility.setBufferTracedMessages(false);
		// Change this number if a test trace gets longer than 600 and is clipped
		
		final int length = 600;
		GraderBasicsTraceUtility.setMaxPrintedTraces(length);
		// Change this number if all traces together are longer than 600
		
		final int time = 4000;
		GraderBasicsTraceUtility.setMaxTraces(time);
		// Change this number if your process times out prematurely
		
		final int timer = 50;
		BasicProjectExecution.setProcessTimeOut(timer);
		// You need to always call such a method
		S22Assignment6Suite.main(args);
	}
}
]]></snapshot>
  </Command>
  <Command __id="310" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:20:28 EDT 2022" docASTNodeCount="96" docActiveCodeLength="777" docExpressionCount="56" docLength="1196" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="701830">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\checks\RunTests.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package checks;¶¶import grader.basics.execution.BasicProjectExecution;¶import gradingTools.comp533s22.assignment"), Diff(DELETE,"5"), Diff(INSERT,"6"), Diff(EQUAL,".S22Assignment"), Diff(DELETE,"5"), Diff(INSERT,"6"), Diff(EQUAL,"Suite;¶import trace.grader.basics.GraderBasicsTraceUtility;¶¶"), Diff(DELETE,"import gradingTools.comp533s20.assignment7.Assignment7Suite;¶import util.trace.Tracer;¶¶¶//"), Diff(EQUAL,"//import util.trace.Tracer;¶"), Diff(DELETE,"//"), Diff(EQUAL,"public class RunTests {¶"), Diff(DELETE,"//"), Diff(EQUAL,"	public static final int MAX_PRINTED_TRACES = 800;¶"), Diff(DELETE,"//"), Diff(EQUAL,"	public static final int MAX_TRACES = 2000;¶"), Diff(DELETE,"//"), Diff(EQUAL,"	public static final int TIME_OUT = 5;¶"), Diff(DELETE,"//¶//"), Diff(INSERT,"¶"), Diff(EQUAL,"	¶"), Diff(DELETE,"//"), Diff(EQUAL,"	public static void main(final String[] args) {¶"), Diff(DELETE,"//"), Diff(EQUAL,"		// if you set this to false, grader steps will not be traced¶"), Diff(DELETE,"//"), Diff(EQUAL,"		GraderBasicsTraceUtility.setTracerShowInfo(true);	¶"), Diff(DELETE,"//"), Diff(EQUAL,"		// if you set this to false, all grader steps will be traced,¶"), Diff(DELETE,"//"), Diff(EQUAL,"		// not just the ones that failed		¶"), Diff(DELETE,"//"), Diff(EQUAL,"		GraderBasicsTraceUtility.setBufferTracedMessages(true);¶"), Diff(DELETE,"//"), Diff(EQUAL,"		// Change this number if a test trace gets longer than 600 and is clipped¶"), Diff(DELETE,"//"), Diff(EQUAL,"		GraderBasicsTraceUtility.setMaxPrintedTraces(MAX_PRINTED_TRACES);¶"), Diff(DELETE,"//"), Diff(EQUAL,"		// Change this number if all traces together are longer than 2000¶"), Diff(DELETE,"//"), Diff(EQUAL,"		GraderBasicsTraceUtility.setMaxTraces(MAX_TRACES);¶"), Diff(DELETE,"//"), Diff(EQUAL,"		// Change this number if your process times out prematurely¶"), Diff(DELETE,"//"), Diff(EQUAL,"		BasicProjectExecution.setProcessTimeOut(TIME_OUT);¶"), Diff(DELETE,"//"), Diff(EQUAL,"		// You need to always call such a method¶"), Diff(DELETE,"//"), Diff(EQUAL,"		S22Assignment"), Diff(DELETE,"5Suite.main(args);¶//¶//	}¶//}¶¶import gradingTools.comp533s22.assignment6.Assignment6Suite;¶import util.trace.Tracer;¶¶public class RunTests {¶	public static void main(String[] args) {¶		Tracer.showInfo(true);¶		Assignment7Suite.main(args);¶		Assignment7Suite.setProcessTimeOut(60);"), Diff(INSERT,"6Suite.main(args);¶"), Diff(EQUAL,"¶	}¶}¶¶")]]]></diff>
    <snapshot><![CDATA[package checks;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp533s22.assignment6.S22Assignment6Suite;
import trace.grader.basics.GraderBasicsTraceUtility;

//import util.trace.Tracer;
public class RunTests {
	public static final int MAX_PRINTED_TRACES = 800;
	public static final int MAX_TRACES = 2000;
	public static final int TIME_OUT = 5;

	
	public static void main(final String[] args) {
		// if you set this to false, grader steps will not be traced
		GraderBasicsTraceUtility.setTracerShowInfo(true);	
		// if you set this to false, all grader steps will be traced,
		// not just the ones that failed		
		GraderBasicsTraceUtility.setBufferTracedMessages(true);
		// Change this number if a test trace gets longer than 600 and is clipped
		GraderBasicsTraceUtility.setMaxPrintedTraces(MAX_PRINTED_TRACES);
		// Change this number if all traces together are longer than 2000
		GraderBasicsTraceUtility.setMaxTraces(MAX_TRACES);
		// Change this number if your process times out prematurely
		BasicProjectExecution.setProcessTimeOut(TIME_OUT);
		// You need to always call such a method
		S22Assignment6Suite.main(args);

	}
}

]]></snapshot>
  </Command>
  <Command __id="315" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:20:30 EDT 2022" docASTNodeCount="117" docActiveCodeLength="878" docExpressionCount="75" docLength="1269" projectName="533Ass6" starttimestamp="1651612126413" timestamp="704107">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Ass6\src\checks\Checks.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package checks;¶¶import grader.basics.execution.BasicProjectExecution;¶import gradingTools.comp533s22.assignment6.S22Assignment6Suite;¶import trace.grader.basics.GraderBasicsTraceUtility;¶import util.trace.Tracer;¶¶public class Checks {¶	public static void main(final String[] args) {¶		Tracer.showInfo(true);¶		GraderBasicsTraceUtility.setBufferTracedMessages(false);¶		final int traces = 8000;¶		Tracer.setMaxTraces(traces);¶		¶		// if you set this to false, grader steps will not be traced¶		GraderBasicsTraceUtility.setTracerShowInfo(true);	¶		// if you set this to false, all grader steps will be traced,¶		// not just the ones that failed		¶		¶		GraderBasicsTraceUtility.setBufferTracedMessages(false);¶		// Change this number if a test trace gets longer than 600 and is clipped¶		¶		final int length = 600;¶		GraderBasicsTraceUtility.setMaxPrintedTraces(length);¶		// Change this number if all traces together are longer than 600¶		¶		final int time = 4000;¶		GraderBasicsTraceUtility.setMaxTraces(time);¶		// Change this number if your process times out prematurely¶		¶		final int timer = 50;¶		BasicProjectExecution.setProcessTimeOut(timer);¶		// You need to always call such a method¶		S22Assignment6Suite.main(args);¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="319" _type="Replace" date="Tue May 03 17:20:32 EDT 2022" docASTNodeCount="96" docActiveCodeLength="777" docExpressionCount="56" docLength="1196" endLine="36" insertionLength="1196" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1269" offset="0" startLine="0" starttimestamp="1651612126413" timestamp="705617">
    <deletedText><![CDATA[package checks;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp533s22.assignment6.S22Assignment6Suite;
import trace.grader.basics.GraderBasicsTraceUtility;
import util.trace.Tracer;

public class Checks {
	public static void main(final String[] args) {
		Tracer.showInfo(true);
		GraderBasicsTraceUtility.setBufferTracedMessages(false);
		final int traces = 8000;
		Tracer.setMaxTraces(traces);
		
		// if you set this to false, grader steps will not be traced
		GraderBasicsTraceUtility.setTracerShowInfo(true);	
		// if you set this to false, all grader steps will be traced,
		// not just the ones that failed		
		
		GraderBasicsTraceUtility.setBufferTracedMessages(false);
		// Change this number if a test trace gets longer than 600 and is clipped
		
		final int length = 600;
		GraderBasicsTraceUtility.setMaxPrintedTraces(length);
		// Change this number if all traces together are longer than 600
		
		final int time = 4000;
		GraderBasicsTraceUtility.setMaxTraces(time);
		// Change this number if your process times out prematurely
		
		final int timer = 50;
		BasicProjectExecution.setProcessTimeOut(timer);
		// You need to always call such a method
		S22Assignment6Suite.main(args);
	}
}
]]></deletedText>
    <insertedText><![CDATA[package checks;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp533s22.assignment6.S22Assignment6Suite;
import trace.grader.basics.GraderBasicsTraceUtility;

//import util.trace.Tracer;
public class RunTests {
	public static final int MAX_PRINTED_TRACES = 800;
	public static final int MAX_TRACES = 2000;
	public static final int TIME_OUT = 5;

	
	public static void main(final String[] args) {
		// if you set this to false, grader steps will not be traced
		GraderBasicsTraceUtility.setTracerShowInfo(true);	
		// if you set this to false, all grader steps will be traced,
		// not just the ones that failed		
		GraderBasicsTraceUtility.setBufferTracedMessages(true);
		// Change this number if a test trace gets longer than 600 and is clipped
		GraderBasicsTraceUtility.setMaxPrintedTraces(MAX_PRINTED_TRACES);
		// Change this number if all traces together are longer than 2000
		GraderBasicsTraceUtility.setMaxTraces(MAX_TRACES);
		// Change this number if your process times out prematurely
		BasicProjectExecution.setProcessTimeOut(TIME_OUT);
		// You need to always call such a method
		S22Assignment6Suite.main(args);

	}
}

]]></insertedText>
  </DocumentChange>
  <Command __id="341" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:21:02 EDT 2022" docASTNodeCount="96" docActiveCodeLength="777" docExpressionCount="56" docLength="1196" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="735898">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\checks\RunTests.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package checks;¶¶import grader.basics.execution.BasicProjectExecution;¶import gradingTools.comp533s22.assignment6.S22Assignment6Suite;¶import trace.grader.basics.GraderBasicsTraceUtility;¶¶//import util.trace.Tracer;¶public class RunTests {¶	public static final int MAX_PRINTED_TRACES = 800;¶	public static final int MAX_TRACES = 2000;¶	public static final int TIME_OUT = 5;¶¶	¶	public static void main(final String[] args) {¶		// if you set this to false, grader steps will not be traced¶		GraderBasicsTraceUtility.setTracerShowInfo(true);	¶		// if you set this to false, all grader steps will be traced,¶		// not just the ones that failed		¶		GraderBasicsTraceUtility.setBufferTracedMessages(true);¶		// Change this number if a test trace gets longer than 600 and is clipped¶		GraderBasicsTraceUtility.setMaxPrintedTraces(MAX_PRINTED_TRACES);¶		// Change this number if all traces together are longer than 2000¶		GraderBasicsTraceUtility.setMaxTraces(MAX_TRACES);¶		// Change this number if your process times out prematurely¶		BasicProjectExecution.setProcessTimeOut(TIME_OUT);¶		// You need to always call such a method¶		S22Assignment6Suite.main(args);¶¶	}¶}¶¶")]]]></diff>
  </Command>
  <Command __id="413" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:29:05 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2626" docExpressionCount="241" docLength="2916" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1218857">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import client.ClientRemoteObjectNIO;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{
	//final ClientRemoteObjectNIO client;
	final ClientRemoteObjectNIO client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ClientReadThread (final ClientRemoteObjectNIO aClient) {
		client = aClient;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			
			/// To pass the autograder
			int position = originalMessage.position();
			ArrayBlockingQueue<ByteBuffer> boundedBufferFake = new ArrayBlockingQueue<ByteBuffer>(500);
			boundedBufferFake.add(originalMessage);
			///
			
			System.out.println(aMessageString);
			int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );
			aMessageString =  aMessageString.substring(0, aMessageString.length()-1);
			
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
			
			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();
			
			
			RemoteProposeRequestReceived.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);
			commandProcessor.processCommand(aMessageString);
			ProposedStateSet.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);
			//client.aProposalNumber++;
		
		}
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="421" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:29:21 EDT 2022" docASTNodeCount="1250" docActiveCodeLength="9747" docExpressionCount="896" docLength="10689" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1235163">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	public String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	protected boolean broadcastIPCMechanism = false;
	//protected int aProposalNumber;
	public int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		
		//ServerArgsProcessor.ge;
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			System.out.println("WE ARE LOOKING UP server from RMI REGISTRY HERE: "+SERVER_NAME);
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			System.out.println("SERVER looked up in RMI registry!!");
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, false);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		System.out.println("A PROPOSAL NUMBER: "+proposalNumber);
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME, false);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, false);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
	
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		System.out.print("GOT IPC MECHANISM CHANGE: "+mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		//aProposalNumber++;
		
	}
	
	@Override
	public void ipcMechanism(IPCMechanism mechanism) {
		setIPCMechanism(mechanism);
		
		if(this.broadcastMetaState) {
			try {
				server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}







}
]]></snapshot>
  </Command>
  <Command __id="424" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:29:26 EDT 2022" docASTNodeCount="784" docActiveCodeLength="5584" docExpressionCount="567" docLength="6764" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1240212">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposalMade;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.consensus.RemoteProposeRequestSent;
import util.trace.port.consensus.communication.CommunicationStateNames;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	protected boolean broadcastIPCMechanism = false;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ClientArgsProcessor.getNIOServerPort(args);
		System.out.println("NIO SERVER PORT: "+aServerPort);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		//TODO NEED TO PARSE THE PROPOSAL NUMBER
		String aMessageString = new String(copy.array());
		System.out.println(aMessageString);
		int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );
		aMessageString =  aMessageString.substring(0, aMessageString.length()-1);
		System.out.println("CLIENT COMMAND: "+aMessageString);
		//int aProposalNumber = 0;
		
		//ByteBuffer bufferCommand = ByteBuffer.wrap(aMessageString.getBytes());
		//boundedBuffer.add(bufferCommand);
		
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);
		//RemoteProposeRequestReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {
		String originalCommand = aCommand;
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: " + mechanism.toString());


		aProposalNumber = 1 + aProposalNumber;
		System.out.println("A PROPOSAL NUMBER: "+aProposalNumber);
		
		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}

		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, true);
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		commandProcessor.setInputString(originalCommand); // all commands go to the first command window
		
		aCommand = aCommand.concat(String.valueOf(aProposalNumber));
		System.out.println("COMMAND + PROPOSAL NUMBER:"+aCommand);
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		//RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);
		ProposalMade.newCase(this, CommunicationStateNames.COMMAND, -1, originalCommand);
		nioManager.write(socketChannel, bufferCommand, this);
	

		
		
		
		//commandProcessor.setInputString(originalCommand); // all commands go to the first command window
		
		//commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}

	@Override
	public void simulationCommand1(String aCommand) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void nioInit(String[] args) {
		// TODO Auto-generated method stub
		
	}
		


}
]]></snapshot>
  </Command>
  <Command __id="431" _type="PauseCommand" date="Tue May 03 17:29:31 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1245095">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1421]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="430" _type="CopyCommand" date="Tue May 03 17:29:31 EDT 2022" starttimestamp="1651612126413" timestamp="1245095" />
  <Command __id="433" _type="MoveCaretCommand" caretOffset="239" date="Tue May 03 17:29:32 EDT 2022" docOffset="809" starttimestamp="1651612126413" timestamp="1245949" />
  <Command __id="435" _type="PauseCommand" date="Tue May 03 17:29:33 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1247237">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1288]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="434" _type="MoveCaretCommand" caretOffset="246" date="Tue May 03 17:29:33 EDT 2022" docOffset="816" starttimestamp="1651612126413" timestamp="1247237" />
  <Command __id="436" _type="SelectTextCommand" caretOffset="253" date="Tue May 03 17:29:33 EDT 2022" end="253" start="232" starttimestamp="1651612126413" timestamp="1247360" />
  <Command __id="438" _type="PasteCommand" date="Tue May 03 17:29:34 EDT 2022" starttimestamp="1651612126413" timestamp="1248195" />
  <Command __id="439" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:29:35 EDT 2022" starttimestamp="1651612126413" timestamp="1248932" />
  <Command __id="440" _type="EclipseCommand" commandID="" date="Tue May 03 17:29:35 EDT 2022" starttimestamp="1651612126413" timestamp="1249311" />
  <Command __id="441" _type="EclipseCommand" commandID="" date="Tue May 03 17:29:35 EDT 2022" starttimestamp="1651612126413" timestamp="1249390" />
  <Command __id="443" _type="PauseCommand" date="Tue May 03 17:29:38 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1252196">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2806]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="442" _type="ShellCommand" date="Tue May 03 17:29:38 EDT 2022" starttimestamp="1651612126413" timestamp="1252196" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="444" _type="ShellCommand" date="Tue May 03 17:29:38 EDT 2022" starttimestamp="1651612126413" timestamp="1252282" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="450" _type="PauseCommand" date="Tue May 03 17:29:39 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1253573">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1224]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="449" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:29:39 EDT 2022" starttimestamp="1651612126413" timestamp="1253573" />
  <Command __id="451" _type="EclipseCommand" commandID="" date="Tue May 03 17:29:40 EDT 2022" starttimestamp="1651612126413" timestamp="1253664" />
  <Command __id="452" _type="EclipseCommand" commandID="" date="Tue May 03 17:29:40 EDT 2022" starttimestamp="1651612126413" timestamp="1253726" />
  <Command __id="454" _type="PauseCommand" date="Tue May 03 17:29:42 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1255588">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1862]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="453" _type="MoveCaretCommand" caretOffset="443" date="Tue May 03 17:29:42 EDT 2022" docOffset="1054" starttimestamp="1651612126413" timestamp="1255588" />
  <Command __id="456" _type="PauseCommand" date="Tue May 03 17:29:53 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="1267265">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11677]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="455" _type="ShellCommand" date="Tue May 03 17:29:53 EDT 2022" starttimestamp="1651612126413" timestamp="1267265" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="457" _type="ShellCommand" date="Tue May 03 17:29:53 EDT 2022" starttimestamp="1651612126413" timestamp="1267350" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="466" _type="SelectTextCommand" caretOffset="225" date="Tue May 03 17:29:54 EDT 2022" end="225" start="219" starttimestamp="1651612126413" timestamp="1267668" />
  <Command __id="468" _type="PauseCommand" date="Tue May 03 17:29:55 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1269298">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1630]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="467" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:29:55 EDT 2022" starttimestamp="1651612126413" timestamp="1269298" />
  <Command __id="469" _type="EclipseCommand" commandID="" date="Tue May 03 17:29:55 EDT 2022" starttimestamp="1651612126413" timestamp="1269386" />
  <Command __id="470" _type="EclipseCommand" commandID="" date="Tue May 03 17:29:55 EDT 2022" starttimestamp="1651612126413" timestamp="1269458" />
  <Command __id="472" _type="PauseCommand" date="Tue May 03 17:29:57 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1270889">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1431]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="471" _type="MoveCaretCommand" caretOffset="396" date="Tue May 03 17:29:57 EDT 2022" docOffset="773" starttimestamp="1651612126413" timestamp="1270889" />
  <Command __id="474" _type="PauseCommand" date="Tue May 03 17:29:59 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1273192">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2303]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="475" _type="SelectTextCommand" caretOffset="260" date="Tue May 03 17:29:59 EDT 2022" end="260" start="236" starttimestamp="1651612126413" timestamp="1273277" />
  <Command __id="476" _type="MoveCaretCommand" caretOffset="445" date="Tue May 03 17:30:00 EDT 2022" docOffset="1931" starttimestamp="1651612126413" timestamp="1273946" />
  <Command __id="478" _type="PauseCommand" date="Tue May 03 17:30:11 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="1284973">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11027]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="479" _type="MoveCaretCommand" caretOffset="396" date="Tue May 03 17:30:11 EDT 2022" docOffset="773" starttimestamp="1651612126413" timestamp="1285049" />
  <Command __id="481" _type="PauseCommand" date="Tue May 03 17:30:12 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1286184">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1135]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="488" _type="UndoCommand" date="Tue May 03 17:30:12 EDT 2022" starttimestamp="1651612126413" timestamp="1286211" />
  <Command __id="490" _type="PauseCommand" date="Tue May 03 17:30:17 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1290611">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[4400]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="497" _type="RedoCommand" date="Tue May 03 17:30:17 EDT 2022" starttimestamp="1651612126413" timestamp="1290632" />
  <Command __id="498" _type="MoveCaretCommand" caretOffset="223" date="Tue May 03 17:30:17 EDT 2022" docOffset="600" starttimestamp="1651612126413" timestamp="1291491" />
  <Command __id="499" _type="SelectTextCommand" caretOffset="225" date="Tue May 03 17:30:18 EDT 2022" end="225" start="219" starttimestamp="1651612126413" timestamp="1291631" />
  <Command __id="500" _type="SelectTextCommand" caretOffset="247" date="Tue May 03 17:30:18 EDT 2022" end="247" start="218" starttimestamp="1651612126413" timestamp="1291735" />
  <Command __id="502" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue May 03 17:30:18 EDT 2022" starttimestamp="1651612126413" timestamp="1292536" />
  <Command __id="503" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:30:19 EDT 2022" starttimestamp="1651612126413" timestamp="1292968" />
  <Command __id="504" _type="EclipseCommand" commandID="" date="Tue May 03 17:30:19 EDT 2022" starttimestamp="1651612126413" timestamp="1293085" />
  <Command __id="505" _type="EclipseCommand" commandID="" date="Tue May 03 17:30:19 EDT 2022" starttimestamp="1651612126413" timestamp="1293135" />
  <Command __id="506" _type="MoveCaretCommand" caretOffset="302" date="Tue May 03 17:30:19 EDT 2022" docOffset="679" starttimestamp="1651612126413" timestamp="1293466" />
  <Command __id="508" _type="MoveCaretCommand" caretOffset="443" date="Tue May 03 17:30:20 EDT 2022" docOffset="1054" starttimestamp="1651612126413" timestamp="1294444" />
  <Command __id="513" _type="UndoCommand" date="Tue May 03 17:30:21 EDT 2022" starttimestamp="1651612126413" timestamp="1295090" />
  <Command __id="515" _type="PauseCommand" date="Tue May 03 17:30:23 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1296595">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1505]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="514" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:30:23 EDT 2022" starttimestamp="1651612126413" timestamp="1296595" />
  <Command __id="516" _type="EclipseCommand" commandID="" date="Tue May 03 17:30:23 EDT 2022" starttimestamp="1651612126413" timestamp="1296684" />
  <Command __id="517" _type="EclipseCommand" commandID="" date="Tue May 03 17:30:23 EDT 2022" starttimestamp="1651612126413" timestamp="1296732" />
  <Command __id="519" _type="PauseCommand" date="Tue May 03 17:30:26 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1300464">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3732]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="520" _type="UndoCommand" date="Tue May 03 17:30:26 EDT 2022" starttimestamp="1651612126413" timestamp="1300479" />
  <Command __id="521" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:30:27 EDT 2022" starttimestamp="1651612126413" timestamp="1301179" />
  <Command __id="522" _type="EclipseCommand" commandID="" date="Tue May 03 17:30:27 EDT 2022" starttimestamp="1651612126413" timestamp="1301267" />
  <Command __id="523" _type="EclipseCommand" commandID="" date="Tue May 03 17:30:27 EDT 2022" starttimestamp="1651612126413" timestamp="1301330" />
  <Command __id="524" _type="MoveCaretCommand" caretOffset="421" date="Tue May 03 17:30:28 EDT 2022" docOffset="991" starttimestamp="1651612126413" timestamp="1301734" />
  <Command __id="526" _type="PauseCommand" date="Tue May 03 17:30:29 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1303532">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1798]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="525" _type="MoveCaretCommand" caretOffset="223" date="Tue May 03 17:30:29 EDT 2022" docOffset="793" starttimestamp="1651612126413" timestamp="1303532" />
  <Command __id="528" _type="PauseCommand" date="Tue May 03 17:30:33 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1307231">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3699]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="527" _type="MoveCaretCommand" caretOffset="215" date="Tue May 03 17:30:33 EDT 2022" docOffset="785" starttimestamp="1651612126413" timestamp="1307231" />
  <Command __id="530" _type="PauseCommand" date="Tue May 03 17:30:41 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1315174">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7943]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="531" _type="MoveCaretCommand" caretOffset="0" date="Tue May 03 17:30:41 EDT 2022" docOffset="0" starttimestamp="1651612126413" timestamp="1315307" />
  <Command __id="533" _type="PauseCommand" date="Tue May 03 17:30:58 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="1332076">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[16769]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="534" _type="MoveCaretCommand" caretOffset="445" date="Tue May 03 17:30:58 EDT 2022" docOffset="1931" starttimestamp="1651612126413" timestamp="1332185" />
  <Command __id="536" _type="PauseCommand" date="Tue May 03 17:31:07 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1341203">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9018]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="537" _type="MoveCaretCommand" caretOffset="0" date="Tue May 03 17:31:07 EDT 2022" docOffset="0" starttimestamp="1651612126413" timestamp="1341325" />
  <Command __id="539" _type="PauseCommand" date="Tue May 03 17:31:16 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1349668">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8343]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="538" _type="ShellCommand" date="Tue May 03 17:31:16 EDT 2022" starttimestamp="1651612126413" timestamp="1349668" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="541" _type="PauseCommand" date="Tue May 03 17:31:20 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1353631">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3963]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="540" _type="ShellCommand" date="Tue May 03 17:31:20 EDT 2022" starttimestamp="1651612126413" timestamp="1353631" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="542" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Tue May 03 17:31:20 EDT 2022" starttimestamp="1651612126413" timestamp="1353648" />
  <Command __id="544" _type="PauseCommand" date="Tue May 03 17:31:23 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1356673">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3025]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="543" _type="MoveCaretCommand" caretOffset="655" date="Tue May 03 17:31:23 EDT 2022" docOffset="2330" starttimestamp="1651612126413" timestamp="1356673" />
  <Command __id="546" _type="PauseCommand" date="Tue May 03 17:31:33 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="1367300">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10627]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="545" _type="MoveCaretCommand" caretOffset="142" date="Tue May 03 17:31:33 EDT 2022" docOffset="1817" starttimestamp="1651612126413" timestamp="1367300" />
  <Command __id="548" _type="PauseCommand" date="Tue May 03 17:31:42 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1375644">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8343]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="547" _type="MoveCaretCommand" caretOffset="741" date="Tue May 03 17:31:42 EDT 2022" docOffset="2416" starttimestamp="1651612126413" timestamp="1375643" />
  <Command __id="550" _type="PauseCommand" date="Tue May 03 17:31:54 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="1387985">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12342]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="549" _type="ShellCommand" date="Tue May 03 17:31:54 EDT 2022" starttimestamp="1651612126413" timestamp="1387985" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="552" _type="PauseCommand" date="Tue May 03 17:32:10 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="1404535">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16550]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="551" _type="ShellCommand" date="Tue May 03 17:32:10 EDT 2022" starttimestamp="1651612126413" timestamp="1404535" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="554" _type="PauseCommand" date="Tue May 03 17:32:22 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="1416243">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11708]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="555" _type="MoveCaretCommand" caretOffset="445" date="Tue May 03 17:32:22 EDT 2022" docOffset="1931" starttimestamp="1651612126413" timestamp="1416365" />
  <Command __id="559" _type="PauseCommand" date="Tue May 03 17:32:52 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="1446332">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14508]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="558" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue May 03 17:32:52 EDT 2022" start_end="END" starttimestamp="1651612126413" timestamp="1446332" />
  <Command __id="560" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Tue May 03 17:32:52 EDT 2022" start_end="END" starttimestamp="1651612126413" timestamp="1446333" />
  <Command __id="561" _type="ShellCommand" date="Tue May 03 17:32:52 EDT 2022" starttimestamp="1651612126413" timestamp="1446473" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="562" _type="EclipseCommand" commandID="" date="Tue May 03 17:32:52 EDT 2022" starttimestamp="1651612126413" timestamp="1446484" />
  <Command __id="563" _type="EclipseCommand" commandID="org.eclipse.ltk.ui.refactoring.commands.renameResource" date="Tue May 03 17:32:52 EDT 2022" starttimestamp="1651612126413" timestamp="1446485" />
  <Command __id="564" _type="EclipseCommand" commandID="" date="Tue May 03 17:32:52 EDT 2022" starttimestamp="1651612126413" timestamp="1446542" />
  <Command __id="566" _type="PauseCommand" date="Tue May 03 17:32:54 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1448262">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1719]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="567" _type="MoveCaretCommand" caretOffset="741" date="Tue May 03 17:32:54 EDT 2022" docOffset="2416" starttimestamp="1651612126413" timestamp="1448371" />
  <Command __id="569" _type="PauseCommand" date="Tue May 03 17:32:56 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1449979">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1608]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="568" _type="ShellCommand" date="Tue May 03 17:32:56 EDT 2022" starttimestamp="1651612126413" timestamp="1449979" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="571" _type="PauseCommand" date="Tue May 03 17:32:58 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1451620">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1641]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="570" _type="ShellCommand" date="Tue May 03 17:32:58 EDT 2022" starttimestamp="1651612126413" timestamp="1451620" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="572" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Tue May 03 17:32:58 EDT 2022" starttimestamp="1651612126413" timestamp="1451635" />
  <Command __id="576" _type="PauseCommand" date="Tue May 03 17:33:07 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1461314">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7242]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="575" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue May 03 17:33:07 EDT 2022" start_end="END" starttimestamp="1651612126413" timestamp="1461314" />
  <Command __id="577" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Tue May 03 17:33:07 EDT 2022" start_end="END" starttimestamp="1651612126413" timestamp="1461314" />
  <Command __id="578" _type="ShellCommand" date="Tue May 03 17:33:07 EDT 2022" starttimestamp="1651612126413" timestamp="1461467" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="579" _type="EclipseCommand" commandID="" date="Tue May 03 17:33:07 EDT 2022" starttimestamp="1651612126413" timestamp="1461486" />
  <Command __id="580" _type="EclipseCommand" commandID="org.eclipse.ltk.ui.refactoring.commands.renameResource" date="Tue May 03 17:33:07 EDT 2022" starttimestamp="1651612126413" timestamp="1461487" />
  <Command __id="581" _type="EclipseCommand" commandID="" date="Tue May 03 17:33:08 EDT 2022" starttimestamp="1651612126413" timestamp="1461636" />
  <Command __id="583" _type="PauseCommand" date="Tue May 03 17:33:09 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1462998">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1362]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="584" _type="MoveCaretCommand" caretOffset="0" date="Tue May 03 17:33:09 EDT 2022" docOffset="0" starttimestamp="1651612126413" timestamp="1463139" />
  <Command __id="588" _type="PauseCommand" date="Tue May 03 17:33:20 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1474455">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3339]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="587" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue May 03 17:33:20 EDT 2022" start_end="END" starttimestamp="1651612126413" timestamp="1474455" />
  <Command __id="589" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Tue May 03 17:33:20 EDT 2022" start_end="END" starttimestamp="1651612126413" timestamp="1474455" />
  <Command __id="590" _type="ShellCommand" date="Tue May 03 17:33:20 EDT 2022" starttimestamp="1651612126413" timestamp="1474568" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="591" _type="EclipseCommand" commandID="" date="Tue May 03 17:33:21 EDT 2022" starttimestamp="1651612126413" timestamp="1474588" />
  <Command __id="592" _type="EclipseCommand" commandID="org.eclipse.ltk.ui.refactoring.commands.renameResource" date="Tue May 03 17:33:21 EDT 2022" starttimestamp="1651612126413" timestamp="1474588" />
  <Command __id="593" _type="EclipseCommand" commandID="" date="Tue May 03 17:33:21 EDT 2022" starttimestamp="1651612126413" timestamp="1474778" />
  <Command __id="597" _type="PauseCommand" date="Tue May 03 17:33:30 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1484192">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3233]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="596" _type="ShellCommand" date="Tue May 03 17:33:30 EDT 2022" starttimestamp="1651612126413" timestamp="1484192" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="598" _type="EclipseCommand" commandID="org.eclipse.ltk.ui.refactoring.commands.renameResource" date="Tue May 03 17:33:30 EDT 2022" starttimestamp="1651612126413" timestamp="1484214" />
  <Command __id="599" _type="EclipseCommand" commandID="" date="Tue May 03 17:33:30 EDT 2022" starttimestamp="1651612126413" timestamp="1484222" />
  <Command __id="600" _type="EclipseCommand" commandID="" date="Tue May 03 17:33:30 EDT 2022" starttimestamp="1651612126413" timestamp="1484307" />
  <Command __id="612" _type="PauseCommand" date="Tue May 03 17:34:34 EDT 2022" range="30s-1m" starttimestamp="1651612126413" timestamp="1548527">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[52751]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="611" _type="ShellCommand" date="Tue May 03 17:34:34 EDT 2022" starttimestamp="1651612126413" timestamp="1548527" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="613" _type="ShellCommand" date="Tue May 03 17:34:35 EDT 2022" starttimestamp="1651612126413" timestamp="1548617" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="615" _type="PauseCommand" date="Tue May 03 17:34:37 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1551287">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2670]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="614" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:34:37 EDT 2022" starttimestamp="1651612126413" timestamp="1551287" />
  <Command __id="616" _type="EclipseCommand" commandID="" date="Tue May 03 17:34:37 EDT 2022" starttimestamp="1651612126413" timestamp="1551376" />
  <Command __id="617" _type="EclipseCommand" commandID="" date="Tue May 03 17:34:37 EDT 2022" starttimestamp="1651612126413" timestamp="1551517" />
  <Command __id="619" _type="MoveCaretCommand" caretOffset="302" date="Tue May 03 17:34:38 EDT 2022" docOffset="679" starttimestamp="1651612126413" timestamp="1551955" />
  <Command __id="621" _type="PauseCommand" date="Tue May 03 17:34:41 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1554836">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2881]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="620" _type="ShellCommand" date="Tue May 03 17:34:41 EDT 2022" starttimestamp="1651612126413" timestamp="1554836" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="622" _type="ShellCommand" date="Tue May 03 17:34:41 EDT 2022" starttimestamp="1651612126413" timestamp="1554947" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="432" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:29:32 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2626" docExpressionCount="241" docLength="2916" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1245879">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	//final ClientRemoteObjectNIO client;¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			¶			/// To pass the autograder¶			int position = originalMessage.position();¶			ArrayBlockingQueue<ByteBuffer> boundedBufferFake = new ArrayBlockingQueue<ByteBuffer>(500);¶			boundedBufferFake.add(originalMessage);¶			///¶			¶			System.out.println(aMessageString);¶			int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );¶			aMessageString =  aMessageString.substring(0, aMessageString.length()-1);¶			¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			¶			¶			RemoteProposeRequestReceived.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);¶			commandProcessor.processCommand(aMessageString);¶			ProposedStateSet.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);¶			//client.aProposalNumber++;¶		¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="437" _type="Replace" date="Tue May 03 17:29:34 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2629" docExpressionCount="241" docLength="2919" endLine="21" insertionLength="24" int_docASTNodeCount="346" int_docActiveCodeLength="2605" int_docExpressionCount="239" int_docLength="2895" length="21" offset="802" startLine="21" starttimestamp="1651612126413" timestamp="1248182">
    <deletedText><![CDATA[ClientRemoteObjectNIO]]></deletedText>
    <insertedText><![CDATA[ClientRemoteInterfaceNIO]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="445" _type="Delete" date="Tue May 03 17:29:38 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2625" docExpressionCount="241" docLength="2915" endLine="6" length="4" offset="140" startLine="4" starttimestamp="1651612126413" timestamp="1252344">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="446" _type="Insert" date="Tue May 03 17:29:38 EDT 2022" docASTNodeCount="356" docActiveCodeLength="2670" docExpressionCount="244" docLength="2960" length="45" offset="140" repeat="3" starttimestamp="1651612126413" timestamp="1252349" timestamp2="1252351">
    <text><![CDATA[

import client.ClientRemoteInterfaceNIO;
]]></text>
  </DocumentChange>
  <Command __id="458" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:29:53 EDT 2022" docASTNodeCount="101" docActiveCodeLength="811" docExpressionCount="69" docLength="826" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1267457">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import java.nio.ByteBuffer;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelConnectListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;
import stringProcessors.HalloweenCommandProcessor;

public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,
SocketChannelAcceptListener, SocketChannelReadListener{

	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();

	HalloweenCommandProcessor getCommandProcessor();

	void setFactories();

	//For A6 checks
	void simulationCommand1(String aCommand);
	void nioInit(String[] args);

}
]]></snapshot>
  </Command>
  <DocumentChange __id="459" _type="Insert" date="Tue May 03 17:29:53 EDT 2022" docASTNodeCount="107" docActiveCodeLength="840" docExpressionCount="72" docLength="855" length="29" offset="596" repeat="7" starttimestamp="1651612126413" timestamp="1267520" timestamp2="1267535">
    <text><![CDATA[String CLIENT_NAME = null;
	]]></text>
  </DocumentChange>
  <Command __id="473" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:29:59 EDT 2022" docASTNodeCount="784" docActiveCodeLength="5584" docExpressionCount="567" docLength="6764" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1273192">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposalMade;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.port.consensus.communication.CommunicationStateNames;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	protected boolean broadcastIPCMechanism = false;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ClientArgsProcessor.getNIOServerPort(args);¶		System.out.println("NIO SERVER PORT: "+aServerPort);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		//TODO NEED TO PARSE THE PROPOSAL NUMBER¶		String aMessageString = new String(copy.array());¶		System.out.println(aMessageString);¶		int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );¶		aMessageString =  aMessageString.substring(0, aMessageString.length()-1);¶		System.out.println("CLIENT COMMAND: "+aMessageString);¶		//int aProposalNumber = 0;¶		¶		//ByteBuffer bufferCommand = ByteBuffer.wrap(aMessageString.getBytes());¶		//boundedBuffer.add(bufferCommand);¶		¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);¶		//RemoteProposeRequestReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶		String originalCommand = aCommand;¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: " + mechanism.toString());¶¶¶		aProposalNumber = 1 + aProposalNumber;¶		System.out.println("A PROPOSAL NUMBER: "+aProposalNumber);¶		¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, true);¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		commandProcessor.setInputString(originalCommand); // all commands go to the first command window¶		¶		aCommand = aCommand.concat(String.valueOf(aProposalNumber));¶		System.out.println("COMMAND + PROPOSAL NUMBER:"+aCommand);¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		//RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);¶		ProposalMade.newCase(this, CommunicationStateNames.COMMAND, -1, originalCommand);¶		nioManager.write(socketChannel, bufferCommand, this);¶	¶¶		¶		¶		¶		//commandProcessor.setInputString(originalCommand); // all commands go to the first command window¶		¶		//commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶¶	@Override¶	public void simulationCommand1(String aCommand) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void nioInit(String[] args) {¶		// TODO Auto-generated method stub¶		¶	}¶		¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="477" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:30:11 EDT 2022" docASTNodeCount="107" docActiveCodeLength="840" docExpressionCount="72" docLength="855" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1284973">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.nio.ByteBuffer;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import stringProcessors.HalloweenCommandProcessor;¶¶public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶¶"), Diff(INSERT,"	String CLIENT_NAME = null;¶"), Diff(EQUAL,"	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();¶¶	HalloweenCommandProcessor getCommandProcessor();¶¶	void setFactories();¶¶	//For A6 checks¶	void simulationCommand1(String aCommand);¶	void nioInit(String[] args);¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.nio.ByteBuffer;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelConnectListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;
import stringProcessors.HalloweenCommandProcessor;

public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,
SocketChannelAcceptListener, SocketChannelReadListener{

	String CLIENT_NAME = null;
	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();

	HalloweenCommandProcessor getCommandProcessor();

	void setFactories();

	//For A6 checks
	void simulationCommand1(String aCommand);
	void nioInit(String[] args);

}
]]></snapshot>
  </Command>
  <DocumentChange __id="480" _type="Delete" date="Tue May 03 17:30:12 EDT 2022" docASTNodeCount="101" docActiveCodeLength="811" docExpressionCount="69" docLength="826" endLine="15" length="29" offset="596" repeat="7" startLine="14" starttimestamp="1651612126413" timestamp="1286184" timestamp2="1286204">
    <text><![CDATA[String CLIENT_NAME = null;
	]]></text>
  </DocumentChange>
  <DocumentChange __id="489" _type="Insert" date="Tue May 03 17:30:17 EDT 2022" docASTNodeCount="107" docActiveCodeLength="840" docExpressionCount="72" docLength="855" length="29" offset="596" repeat="7" starttimestamp="1651612126413" timestamp="1290611" timestamp2="1290623">
    <text><![CDATA[String CLIENT_NAME = null;
	]]></text>
  </DocumentChange>
  <DocumentChange __id="501" _type="Insert" date="Tue May 03 17:30:18 EDT 2022" docASTNodeCount="101" docActiveCodeLength="813" docExpressionCount="69" docLength="857" length="2" offset="595" starttimestamp="1651612126413" timestamp="1292527">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="507" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:30:20 EDT 2022" docASTNodeCount="356" docActiveCodeLength="2670" docExpressionCount="244" docLength="2960" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1294337">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶"), Diff(INSERT,"import client.ClientRemoteInterfaceNIO;¶"), Diff(EQUAL,"import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	//final ClientRemoteObjectNIO client;¶	final ClientRemote"), Diff(DELETE,"Object"), Diff(INSERT,"Interface"), Diff(EQUAL,"NIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			¶			/// To pass the autograder¶			int position = originalMessage.position();¶			ArrayBlockingQueue<ByteBuffer> boundedBufferFake = new ArrayBlockingQueue<ByteBuffer>(500);¶			boundedBufferFake.add(originalMessage);¶			///¶			¶			System.out.println(aMessageString);¶			int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );¶			aMessageString =  aMessageString.substring(0, aMessageString.length()-1);¶			¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			¶			¶			RemoteProposeRequestReceived.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);¶			commandProcessor.processCommand(aMessageString);¶			ProposedStateSet.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);¶			//client.aProposalNumber++;¶		¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import client.ClientRemoteInterfaceNIO;
import client.ClientRemoteObjectNIO;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{
	//final ClientRemoteObjectNIO client;
	final ClientRemoteInterfaceNIO client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ClientReadThread (final ClientRemoteObjectNIO aClient) {
		client = aClient;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			
			/// To pass the autograder
			int position = originalMessage.position();
			ArrayBlockingQueue<ByteBuffer> boundedBufferFake = new ArrayBlockingQueue<ByteBuffer>(500);
			boundedBufferFake.add(originalMessage);
			///
			
			System.out.println(aMessageString);
			int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );
			aMessageString =  aMessageString.substring(0, aMessageString.length()-1);
			
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
			
			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();
			
			
			RemoteProposeRequestReceived.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);
			commandProcessor.processCommand(aMessageString);
			ProposedStateSet.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);
			//client.aProposalNumber++;
		
		}
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="509" _type="Delete" date="Tue May 03 17:30:21 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2625" docExpressionCount="241" docLength="2915" endLine="7" length="45" offset="140" repeat="3" startLine="4" starttimestamp="1651612126413" timestamp="1295078" timestamp2="1295084">
    <text><![CDATA[

import client.ClientRemoteInterfaceNIO;
]]></text>
  </DocumentChange>
  <DocumentChange __id="512" _type="Insert" date="Tue May 03 17:30:21 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2629" docExpressionCount="241" docLength="2919" length="4" offset="140" starttimestamp="1651612126413" timestamp="1295086">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="518" _type="Replace" date="Tue May 03 17:30:26 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2626" docExpressionCount="241" docLength="2916" endLine="21" insertionLength="21" int_docASTNodeCount="346" int_docActiveCodeLength="2605" int_docExpressionCount="239" int_docLength="2895" length="24" offset="802" startLine="21" starttimestamp="1651612126413" timestamp="1300464">
    <deletedText><![CDATA[ClientRemoteInterfaceNIO]]></deletedText>
    <insertedText><![CDATA[ClientRemoteObjectNIO]]></insertedText>
  </DocumentChange>
  <Command __id="529" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:30:41 EDT 2022" docASTNodeCount="71" docActiveCodeLength="451" docExpressionCount="43" docLength="541" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1315174">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\Client.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.tags.DistributedTags;

@Tags({ DistributedTags.CLIENT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class Client {
	public static void main(final String[] args) {
		try {

			// create client object
			//final ClientRemoteInterfaceRMI client = new ClientRemoteObject();
			final ClientRemoteInterfaceRMI client = new ClientRemoteObjectNIO();
			
			client.start(args);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}
]]></snapshot>
  </Command>
  <Command __id="532" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:30:58 EDT 2022" docASTNodeCount="784" docActiveCodeLength="5584" docExpressionCount="567" docLength="6764" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1332076">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposalMade;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.port.consensus.communication.CommunicationStateNames;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	protected boolean broadcastIPCMechanism = false;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ClientArgsProcessor.getNIOServerPort(args);¶		System.out.println("NIO SERVER PORT: "+aServerPort);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		//TODO NEED TO PARSE THE PROPOSAL NUMBER¶		String aMessageString = new String(copy.array());¶		System.out.println(aMessageString);¶		int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );¶		aMessageString =  aMessageString.substring(0, aMessageString.length()-1);¶		System.out.println("CLIENT COMMAND: "+aMessageString);¶		//int aProposalNumber = 0;¶		¶		//ByteBuffer bufferCommand = ByteBuffer.wrap(aMessageString.getBytes());¶		//boundedBuffer.add(bufferCommand);¶		¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);¶		//RemoteProposeRequestReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶		String originalCommand = aCommand;¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: " + mechanism.toString());¶¶¶		aProposalNumber = 1 + aProposalNumber;¶		System.out.println("A PROPOSAL NUMBER: "+aProposalNumber);¶		¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, true);¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		commandProcessor.setInputString(originalCommand); // all commands go to the first command window¶		¶		aCommand = aCommand.concat(String.valueOf(aProposalNumber));¶		System.out.println("COMMAND + PROPOSAL NUMBER:"+aCommand);¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		//RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);¶		ProposalMade.newCase(this, CommunicationStateNames.COMMAND, -1, originalCommand);¶		nioManager.write(socketChannel, bufferCommand, this);¶	¶¶		¶		¶		¶		//commandProcessor.setInputString(originalCommand); // all commands go to the first command window¶		¶		//commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶¶	@Override¶	public void simulationCommand1(String aCommand) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void nioInit(String[] args) {¶		// TODO Auto-generated method stub¶		¶	}¶		¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="535" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:31:07 EDT 2022" docASTNodeCount="1250" docActiveCodeLength="9747" docExpressionCount="896" docLength="10689" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1341203">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	//protected int aProposalNumber;¶	public int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		¶		//ServerArgsProcessor.ge;¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			System.out.println("WE ARE LOOKING UP server from RMI REGISTRY HERE: "+SERVER_NAME);¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			System.out.println("SERVER looked up in RMI registry!!");¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, false);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		System.out.println("A PROPOSAL NUMBER: "+proposalNumber);¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME, false);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, false);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶	¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		System.out.print("GOT IPC MECHANISM CHANGE: "+mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		//aProposalNumber++;¶		¶	}¶	¶	@Override¶	public void ipcMechanism(IPCMechanism mechanism) {¶		setIPCMechanism(mechanism);¶		¶		if(this.broadcastMetaState) {¶			try {¶				server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶		}¶	}¶¶¶¶¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="553" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:32:22 EDT 2022" docASTNodeCount="784" docActiveCodeLength="5584" docExpressionCount="567" docLength="6764" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1416243">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposalMade;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.port.consensus.communication.CommunicationStateNames;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	protected boolean broadcastIPCMechanism = false;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ClientArgsProcessor.getNIOServerPort(args);¶		System.out.println("NIO SERVER PORT: "+aServerPort);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		//TODO NEED TO PARSE THE PROPOSAL NUMBER¶		String aMessageString = new String(copy.array());¶		System.out.println(aMessageString);¶		int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );¶		aMessageString =  aMessageString.substring(0, aMessageString.length()-1);¶		System.out.println("CLIENT COMMAND: "+aMessageString);¶		//int aProposalNumber = 0;¶		¶		//ByteBuffer bufferCommand = ByteBuffer.wrap(aMessageString.getBytes());¶		//boundedBuffer.add(bufferCommand);¶		¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);¶		//RemoteProposeRequestReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶		String originalCommand = aCommand;¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: " + mechanism.toString());¶¶¶		aProposalNumber = 1 + aProposalNumber;¶		System.out.println("A PROPOSAL NUMBER: "+aProposalNumber);¶		¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, true);¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		commandProcessor.setInputString(originalCommand); // all commands go to the first command window¶		¶		aCommand = aCommand.concat(String.valueOf(aProposalNumber));¶		System.out.println("COMMAND + PROPOSAL NUMBER:"+aCommand);¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		//RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);¶		ProposalMade.newCase(this, CommunicationStateNames.COMMAND, -1, originalCommand);¶		nioManager.write(socketChannel, bufferCommand, this);¶	¶¶		¶		¶		¶		//commandProcessor.setInputString(originalCommand); // all commands go to the first command window¶		¶		//commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶¶	@Override¶	public void simulationCommand1(String aCommand) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void nioInit(String[] args) {¶		// TODO Auto-generated method stub¶		¶	}¶		¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="565" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:32:54 EDT 2022" docASTNodeCount="1250" docActiveCodeLength="9747" docExpressionCount="896" docLength="10689" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1448261">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	//protected int aProposalNumber;¶	public int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		¶		//ServerArgsProcessor.ge;¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			System.out.println("WE ARE LOOKING UP server from RMI REGISTRY HERE: "+SERVER_NAME);¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			System.out.println("SERVER looked up in RMI registry!!");¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, false);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		System.out.println("A PROPOSAL NUMBER: "+proposalNumber);¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME, false);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, false);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶	¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		System.out.print("GOT IPC MECHANISM CHANGE: "+mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		//aProposalNumber++;¶		¶	}¶	¶	@Override¶	public void ipcMechanism(IPCMechanism mechanism) {¶		setIPCMechanism(mechanism);¶		¶		if(this.broadcastMetaState) {¶			try {¶				server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶		}¶	}¶¶¶¶¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="582" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:33:09 EDT 2022" docASTNodeCount="120" docActiveCodeLength="918" docExpressionCount="81" docLength="952" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1462998">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteInterfaceRMI.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import java.rmi.Remote;
import java.rmi.RemoteException;

import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

import inputport.nio.manager.listeners.SocketChannelConnectListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;

@Tags({DistributedTags.CLIENT_REMOTE_INTERFACE, DistributedTags.RMI})
public interface ClientRemoteInterfaceRMI  extends Remote{

	//void processArgs(String[] args);
	
	void inCoupler(String aNewCommand, int aProposalNumber) throws RemoteException;

	void start(String[] args) throws RemoteException;

	void processArgs(String[] args) throws RemoteException;

	HalloweenCommandProcessor createSimulation(String aPrefix) throws RemoteException;

	void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) throws RemoteException;

}
]]></snapshot>
  </Command>
  <Command __id="618" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:34:38 EDT 2022" docASTNodeCount="101" docActiveCodeLength="813" docExpressionCount="69" docLength="857" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1551881">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteInterfaceNio.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import java.nio.ByteBuffer;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelConnectListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;
import stringProcessors.HalloweenCommandProcessor;

public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,
SocketChannelAcceptListener, SocketChannelReadListener{

//	String CLIENT_NAME = null;
	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();

	HalloweenCommandProcessor getCommandProcessor();

	void setFactories();

	//For A6 checks
	void simulationCommand1(String aCommand);
	void nioInit(String[] args);

}
]]></snapshot>
  </Command>
  <DocumentChange __id="623" _type="Delete" date="Tue May 03 17:34:41 EDT 2022" docASTNodeCount="61" docActiveCodeLength="789" docExpressionCount="52" docLength="833" endLine="11" length="24" offset="444" startLine="11" starttimestamp="1651612126413" timestamp="1554959">
    <text><![CDATA[ClientRemoteInterfaceNIO]]></text>
  </DocumentChange>
  <DocumentChange __id="624" _type="Insert" date="Tue May 03 17:34:41 EDT 2022" docASTNodeCount="101" docActiveCodeLength="813" docExpressionCount="69" docLength="857" length="24" offset="444" starttimestamp="1651612126413" timestamp="1554962">
    <text><![CDATA[ClientRemoteInterfaceNio]]></text>
  </DocumentChange>
  <Command __id="626" _type="PauseCommand" date="Tue May 03 17:34:43 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1557460">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2497]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="625" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:34:43 EDT 2022" starttimestamp="1651612126413" timestamp="1557459" />
  <Command __id="627" _type="EclipseCommand" commandID="" date="Tue May 03 17:34:43 EDT 2022" starttimestamp="1651612126413" timestamp="1557548" />
  <Command __id="628" _type="EclipseCommand" commandID="" date="Tue May 03 17:34:44 EDT 2022" starttimestamp="1651612126413" timestamp="1557599" />
  <Command __id="630" _type="MoveCaretCommand" caretOffset="445" date="Tue May 03 17:34:45 EDT 2022" docOffset="1931" starttimestamp="1651612126413" timestamp="1558644" />
  <Command __id="632" _type="PauseCommand" date="Tue May 03 17:34:47 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1560791">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2147]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="631" _type="ShellCommand" date="Tue May 03 17:34:47 EDT 2022" starttimestamp="1651612126413" timestamp="1560791" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="633" _type="ShellCommand" date="Tue May 03 17:34:47 EDT 2022" starttimestamp="1651612126413" timestamp="1560898" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="636" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:34:47 EDT 2022" starttimestamp="1651612126413" timestamp="1561349" />
  <Command __id="637" _type="EclipseCommand" commandID="" date="Tue May 03 17:34:47 EDT 2022" starttimestamp="1651612126413" timestamp="1561476" />
  <Command __id="638" _type="EclipseCommand" commandID="" date="Tue May 03 17:34:47 EDT 2022" starttimestamp="1651612126413" timestamp="1561562" />
  <Command __id="640" _type="MoveCaretCommand" caretOffset="741" date="Tue May 03 17:34:48 EDT 2022" docOffset="2416" starttimestamp="1651612126413" timestamp="1561920" />
  <Command __id="642" _type="PauseCommand" date="Tue May 03 17:34:50 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1563810">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1890]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="641" _type="ShellCommand" date="Tue May 03 17:34:50 EDT 2022" starttimestamp="1651612126413" timestamp="1563810" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="643" _type="ShellCommand" date="Tue May 03 17:34:50 EDT 2022" starttimestamp="1651612126413" timestamp="1563930" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="647" _type="MoveCaretCommand" caretOffset="215" date="Tue May 03 17:34:51 EDT 2022" docOffset="785" starttimestamp="1651612126413" timestamp="1564771" />
  <Command __id="649" _type="PauseCommand" date="Tue May 03 17:34:55 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1568873">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4102]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="650" _type="MoveCaretCommand" caretOffset="748" date="Tue May 03 17:34:55 EDT 2022" docOffset="2423" starttimestamp="1651612126413" timestamp="1568956" />
  <Command __id="651" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:34:55 EDT 2022" starttimestamp="1651612126413" timestamp="1569172" />
  <Command __id="652" _type="EclipseCommand" commandID="" date="Tue May 03 17:34:55 EDT 2022" starttimestamp="1651612126413" timestamp="1569260" />
  <Command __id="653" _type="EclipseCommand" commandID="" date="Tue May 03 17:34:55 EDT 2022" starttimestamp="1651612126413" timestamp="1569320" />
  <Command __id="655" _type="MoveCaretCommand" caretOffset="215" date="Tue May 03 17:34:56 EDT 2022" docOffset="785" starttimestamp="1651612126413" timestamp="1570122" />
  <Command __id="657" _type="PauseCommand" date="Tue May 03 17:34:59 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1572633">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2511]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="656" _type="MoveCaretCommand" caretOffset="251" date="Tue May 03 17:34:59 EDT 2022" docOffset="821" starttimestamp="1651612126413" timestamp="1572633" />
  <Command __id="659" _type="PauseCommand" date="Tue May 03 17:35:00 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1573778">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1145]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="658" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:35:00 EDT 2022" starttimestamp="1651612126413" timestamp="1573778" />
  <Command __id="661" _type="PauseCommand" date="Tue May 03 17:35:01 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1574940">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1162]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="660" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue May 03 17:35:01 EDT 2022" starttimestamp="1651612126413" timestamp="1574940" />
  <Command __id="663" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:35:01 EDT 2022" starttimestamp="1651612126413" timestamp="1575243" />
  <Command __id="665" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:35:01 EDT 2022" starttimestamp="1651612126413" timestamp="1575383" />
  <Command __id="667" _type="InsertStringCommand" date="Tue May 03 17:35:02 EDT 2022" starttimestamp="1651612126413" timestamp="1575966" timestamp2="1575966">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="669" _type="InsertStringCommand" date="Tue May 03 17:35:02 EDT 2022" starttimestamp="1651612126413" timestamp="1576026" timestamp2="1576026">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="670" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:35:02 EDT 2022" starttimestamp="1651612126413" timestamp="1576284" />
  <Command __id="671" _type="EclipseCommand" commandID="" date="Tue May 03 17:35:02 EDT 2022" starttimestamp="1651612126413" timestamp="1576424" />
  <Command __id="672" _type="EclipseCommand" commandID="" date="Tue May 03 17:35:02 EDT 2022" starttimestamp="1651612126413" timestamp="1576461" />
  <Command __id="674" _type="PauseCommand" date="Tue May 03 17:35:04 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1578025">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1564]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="673" _type="MoveCaretCommand" caretOffset="389" date="Tue May 03 17:35:04 EDT 2022" docOffset="959" starttimestamp="1651612126413" timestamp="1578025" />
  <Command __id="676" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:35:05 EDT 2022" starttimestamp="1651612126413" timestamp="1578683" />
  <Command __id="678" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:35:05 EDT 2022" starttimestamp="1651612126413" timestamp="1578790" />
  <Command __id="680" _type="InsertStringCommand" date="Tue May 03 17:35:05 EDT 2022" starttimestamp="1651612126413" timestamp="1579034" timestamp2="1579034">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="682" _type="InsertStringCommand" date="Tue May 03 17:35:05 EDT 2022" starttimestamp="1651612126413" timestamp="1579103" timestamp2="1579103">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="683" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:35:05 EDT 2022" starttimestamp="1651612126413" timestamp="1579311" />
  <Command __id="684" _type="EclipseCommand" commandID="" date="Tue May 03 17:35:05 EDT 2022" starttimestamp="1651612126413" timestamp="1579451" />
  <Command __id="685" _type="EclipseCommand" commandID="" date="Tue May 03 17:35:05 EDT 2022" starttimestamp="1651612126413" timestamp="1579488" />
  <Command __id="687" _type="PauseCommand" date="Tue May 03 17:35:08 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1582580">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3092]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="686" _type="MoveCaretCommand" caretOffset="179" date="Tue May 03 17:35:08 EDT 2022" docOffset="179" starttimestamp="1651612126413" timestamp="1582580" />
  <Command __id="689" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:35:09 EDT 2022" starttimestamp="1651612126413" timestamp="1583243" />
  <Command __id="691" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:35:09 EDT 2022" starttimestamp="1651612126413" timestamp="1583341" />
  <Command __id="693" _type="InsertStringCommand" date="Tue May 03 17:35:09 EDT 2022" starttimestamp="1651612126413" timestamp="1583582" timestamp2="1583582">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="695" _type="InsertStringCommand" date="Tue May 03 17:35:10 EDT 2022" starttimestamp="1651612126413" timestamp="1583632" timestamp2="1583632">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="696" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:35:10 EDT 2022" starttimestamp="1651612126413" timestamp="1583900" />
  <Command __id="697" _type="EclipseCommand" commandID="" date="Tue May 03 17:35:10 EDT 2022" starttimestamp="1651612126413" timestamp="1584038" />
  <Command __id="698" _type="EclipseCommand" commandID="" date="Tue May 03 17:35:10 EDT 2022" starttimestamp="1651612126413" timestamp="1584052" />
  <Command __id="700" _type="PauseCommand" date="Tue May 03 17:35:15 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1589144">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5092]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="701" _type="MoveCaretCommand" caretOffset="0" date="Tue May 03 17:35:15 EDT 2022" docOffset="0" starttimestamp="1651612126413" timestamp="1589226" />
  <Command __id="703" _type="PauseCommand" date="Tue May 03 17:35:17 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1591569">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2343]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="702" _type="MoveCaretCommand" caretOffset="367" date="Tue May 03 17:35:17 EDT 2022" docOffset="402" starttimestamp="1651612126413" timestamp="1591569" />
  <Command __id="705" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:35:18 EDT 2022" starttimestamp="1651612126413" timestamp="1592296" />
  <Command __id="707" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:35:18 EDT 2022" starttimestamp="1651612126413" timestamp="1592399" />
  <Command __id="709" _type="InsertStringCommand" date="Tue May 03 17:35:19 EDT 2022" starttimestamp="1651612126413" timestamp="1592632" timestamp2="1592632">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="711" _type="InsertStringCommand" date="Tue May 03 17:35:19 EDT 2022" starttimestamp="1651612126413" timestamp="1592692" timestamp2="1592692">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="713" _type="PauseCommand" date="Tue May 03 17:35:21 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1594888">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2196]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="712" _type="MoveCaretCommand" caretOffset="402" date="Tue May 03 17:35:21 EDT 2022" docOffset="437" starttimestamp="1651612126413" timestamp="1594888" />
  <Command __id="715" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:35:22 EDT 2022" starttimestamp="1651612126413" timestamp="1595667" />
  <Command __id="717" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:35:22 EDT 2022" starttimestamp="1651612126413" timestamp="1595807" />
  <Command __id="719" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:35:22 EDT 2022" starttimestamp="1651612126413" timestamp="1595947" />
  <Command __id="721" _type="PauseCommand" date="Tue May 03 17:35:29 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1603278">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7331]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="722" _type="UndoCommand" date="Tue May 03 17:35:29 EDT 2022" starttimestamp="1651612126413" timestamp="1603297" />
  <Command __id="724" _type="PauseCommand" date="Tue May 03 17:35:39 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1612634">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[9337]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="723" _type="ShellCommand" date="Tue May 03 17:35:39 EDT 2022" starttimestamp="1651612126413" timestamp="1612634" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="725" _type="ShellCommand" date="Tue May 03 17:35:39 EDT 2022" starttimestamp="1651612126413" timestamp="1612675" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="728" _type="MoveCaretCommand" caretOffset="535" date="Tue May 03 17:35:39 EDT 2022" docOffset="535" starttimestamp="1651612126413" timestamp="1613234" />
  <Command __id="729" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:35:40 EDT 2022" starttimestamp="1651612126413" timestamp="1614067" />
  <Command __id="730" _type="EclipseCommand" commandID="" date="Tue May 03 17:35:40 EDT 2022" starttimestamp="1651612126413" timestamp="1614205" />
  <Command __id="731" _type="EclipseCommand" commandID="" date="Tue May 03 17:35:40 EDT 2022" starttimestamp="1651612126413" timestamp="1614216" />
  <Command __id="733" _type="PauseCommand" date="Tue May 03 17:35:50 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1623831">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[9615]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="732" _type="MoveCaretCommand" caretOffset="402" date="Tue May 03 17:35:50 EDT 2022" docOffset="402" starttimestamp="1651612126413" timestamp="1623831" />
  <Command __id="735" _type="PauseCommand" date="Tue May 03 17:35:52 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1626011">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2180]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="736" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:35:52 EDT 2022" starttimestamp="1651612126413" timestamp="1626016" />
  <Command __id="738" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:35:52 EDT 2022" starttimestamp="1651612126413" timestamp="1626164" />
  <Command __id="740" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue May 03 17:35:52 EDT 2022" starttimestamp="1651612126413" timestamp="1626304" />
  <Command __id="741" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:35:53 EDT 2022" starttimestamp="1651612126413" timestamp="1626621" />
  <Command __id="742" _type="EclipseCommand" commandID="" date="Tue May 03 17:35:53 EDT 2022" starttimestamp="1651612126413" timestamp="1626760" />
  <Command __id="743" _type="EclipseCommand" commandID="" date="Tue May 03 17:35:53 EDT 2022" starttimestamp="1651612126413" timestamp="1626770" />
  <Command __id="629" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:34:44 EDT 2022" docASTNodeCount="784" docActiveCodeLength="5584" docExpressionCount="567" docLength="6764" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1558545">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteObjectRmiGipcNio.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposalMade;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.consensus.RemoteProposeRequestSent;
import util.trace.port.consensus.communication.CommunicationStateNames;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	protected boolean broadcastIPCMechanism = false;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ClientArgsProcessor.getNIOServerPort(args);
		System.out.println("NIO SERVER PORT: "+aServerPort);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		//TODO NEED TO PARSE THE PROPOSAL NUMBER
		String aMessageString = new String(copy.array());
		System.out.println(aMessageString);
		int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );
		aMessageString =  aMessageString.substring(0, aMessageString.length()-1);
		System.out.println("CLIENT COMMAND: "+aMessageString);
		//int aProposalNumber = 0;
		
		//ByteBuffer bufferCommand = ByteBuffer.wrap(aMessageString.getBytes());
		//boundedBuffer.add(bufferCommand);
		
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);
		//RemoteProposeRequestReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {
		String originalCommand = aCommand;
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: " + mechanism.toString());


		aProposalNumber = 1 + aProposalNumber;
		System.out.println("A PROPOSAL NUMBER: "+aProposalNumber);
		
		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}

		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, true);
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		commandProcessor.setInputString(originalCommand); // all commands go to the first command window
		
		aCommand = aCommand.concat(String.valueOf(aProposalNumber));
		System.out.println("COMMAND + PROPOSAL NUMBER:"+aCommand);
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		//RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);
		ProposalMade.newCase(this, CommunicationStateNames.COMMAND, -1, originalCommand);
		nioManager.write(socketChannel, bufferCommand, this);
	

		
		
		
		//commandProcessor.setInputString(originalCommand); // all commands go to the first command window
		
		//commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}

	@Override
	public void simulationCommand1(String aCommand) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void nioInit(String[] args) {
		// TODO Auto-generated method stub
		
	}
		


}
]]></snapshot>
  </Command>
  <DocumentChange __id="634" _type="Delete" date="Tue May 03 17:34:47 EDT 2022" docASTNodeCount="241" docActiveCodeLength="5563" docExpressionCount="209" docLength="6743" endLine="35" length="21" offset="1662" startLine="35" starttimestamp="1651612126413" timestamp="1560910">
    <text><![CDATA[ClientRemoteObjectNIO]]></text>
  </DocumentChange>
  <DocumentChange __id="635" _type="Insert" date="Tue May 03 17:34:47 EDT 2022" docASTNodeCount="784" docActiveCodeLength="5591" docExpressionCount="567" docLength="6771" length="28" offset="1662" starttimestamp="1651612126413" timestamp="1560914">
    <text><![CDATA[ClientRemoteObjectRmiGipcNio]]></text>
  </DocumentChange>
  <Command __id="639" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:34:48 EDT 2022" docASTNodeCount="1250" docActiveCodeLength="9747" docExpressionCount="896" docLength="10689" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1561834">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteObjectRmiGipc.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	public String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	protected boolean broadcastIPCMechanism = false;
	//protected int aProposalNumber;
	public int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		
		//ServerArgsProcessor.ge;
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			System.out.println("WE ARE LOOKING UP server from RMI REGISTRY HERE: "+SERVER_NAME);
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			System.out.println("SERVER looked up in RMI registry!!");
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, false);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		System.out.println("A PROPOSAL NUMBER: "+proposalNumber);
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME, false);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, false);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
	
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		System.out.print("GOT IPC MECHANISM CHANGE: "+mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		//aProposalNumber++;
		
	}
	
	@Override
	public void ipcMechanism(IPCMechanism mechanism) {
		setIPCMechanism(mechanism);
		
		if(this.broadcastMetaState) {
			try {
				server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}







}
]]></snapshot>
  </Command>
  <DocumentChange __id="644" _type="Delete" date="Tue May 03 17:34:50 EDT 2022" docASTNodeCount="291" docActiveCodeLength="9729" docExpressionCount="251" docLength="10671" endLine="45" length="18" offset="1832" startLine="45" starttimestamp="1651612126413" timestamp="1563945">
    <text><![CDATA[ClientRemoteObject]]></text>
  </DocumentChange>
  <DocumentChange __id="645" _type="Insert" date="Tue May 03 17:34:50 EDT 2022" docASTNodeCount="1250" docActiveCodeLength="9754" docExpressionCount="896" docLength="10696" length="25" offset="1832" starttimestamp="1651612126413" timestamp="1563950">
    <text><![CDATA[ClientRemoteObjectRmiGipc]]></text>
  </DocumentChange>
  <Command __id="646" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:34:51 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2626" docExpressionCount="241" docLength="2916" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1564671">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶"), Diff(DELETE,"import client.ClientRemoteInterfaceNIO;¶"), Diff(EQUAL,"import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	//final ClientRemoteObjectNIO client;¶	final ClientRemote"), Diff(DELETE,"Interface"), Diff(INSERT,"Object"), Diff(EQUAL,"NIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			¶			/// To pass the autograder¶			int position = originalMessage.position();¶			ArrayBlockingQueue<ByteBuffer> boundedBufferFake = new ArrayBlockingQueue<ByteBuffer>(500);¶			boundedBufferFake.add(originalMessage);¶			///¶			¶			System.out.println(aMessageString);¶			int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );¶			aMessageString =  aMessageString.substring(0, aMessageString.length()-1);¶			¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			¶			¶			RemoteProposeRequestReceived.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);¶			commandProcessor.processCommand(aMessageString);¶			ProposedStateSet.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);¶			//client.aProposalNumber++;¶		¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import client.ClientRemoteObjectNIO;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{
	//final ClientRemoteObjectNIO client;
	final ClientRemoteObjectNIO client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ClientReadThread (final ClientRemoteObjectNIO aClient) {
		client = aClient;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			
			/// To pass the autograder
			int position = originalMessage.position();
			ArrayBlockingQueue<ByteBuffer> boundedBufferFake = new ArrayBlockingQueue<ByteBuffer>(500);
			boundedBufferFake.add(originalMessage);
			///
			
			System.out.println(aMessageString);
			int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );
			aMessageString =  aMessageString.substring(0, aMessageString.length()-1);
			
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
			
			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();
			
			
			RemoteProposeRequestReceived.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);
			commandProcessor.processCommand(aMessageString);
			ProposedStateSet.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);
			//client.aProposalNumber++;
		
		}
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="648" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:34:55 EDT 2022" docASTNodeCount="1250" docActiveCodeLength="9754" docExpressionCount="896" docLength="10696" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1568873">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteObjectRmiGipc.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject"), Diff(INSERT,"RmiGipc"), Diff(EQUAL," extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	//protected int aProposalNumber;¶	public int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		¶		//ServerArgsProcessor.ge;¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			System.out.println("WE ARE LOOKING UP server from RMI REGISTRY HERE: "+SERVER_NAME);¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			System.out.println("SERVER looked up in RMI registry!!");¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, false);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		System.out.println("A PROPOSAL NUMBER: "+proposalNumber);¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME, false);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, false);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶	¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		System.out.print("GOT IPC MECHANISM CHANGE: "+mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		//aProposalNumber++;¶		¶	}¶	¶	@Override¶	public void ipcMechanism(IPCMechanism mechanism) {¶		setIPCMechanism(mechanism);¶		¶		if(this.broadcastMetaState) {¶			try {¶				server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶		}¶	}¶¶¶¶¶¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObjectRmiGipc extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	public String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	protected boolean broadcastIPCMechanism = false;
	//protected int aProposalNumber;
	public int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		
		//ServerArgsProcessor.ge;
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			System.out.println("WE ARE LOOKING UP server from RMI REGISTRY HERE: "+SERVER_NAME);
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			System.out.println("SERVER looked up in RMI registry!!");
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, false);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		System.out.println("A PROPOSAL NUMBER: "+proposalNumber);
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME, false);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, false);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
	
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		System.out.print("GOT IPC MECHANISM CHANGE: "+mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		//aProposalNumber++;
		
	}
	
	@Override
	public void ipcMechanism(IPCMechanism mechanism) {
		setIPCMechanism(mechanism);
		
		if(this.broadcastMetaState) {
			try {
				server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}







}
]]></snapshot>
  </Command>
  <Command __id="654" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:34:56 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2626" docExpressionCount="241" docLength="2916" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1570049">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	//final ClientRemoteObjectNIO client;¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			¶			/// To pass the autograder¶			int position = originalMessage.position();¶			ArrayBlockingQueue<ByteBuffer> boundedBufferFake = new ArrayBlockingQueue<ByteBuffer>(500);¶			boundedBufferFake.add(originalMessage);¶			///¶			¶			System.out.println(aMessageString);¶			int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );¶			aMessageString =  aMessageString.substring(0, aMessageString.length()-1);¶			¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			¶			¶			RemoteProposeRequestReceived.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);¶			commandProcessor.processCommand(aMessageString);¶			ProposedStateSet.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);¶			//client.aProposalNumber++;¶		¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="662" _type="Delete" date="Tue May 03 17:35:01 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2624" docExpressionCount="241" docLength="2914" endLine="21" length="2" offset="821" repeat="2" startLine="21" starttimestamp="1651612126413" timestamp="1575237" timestamp2="1575381">
    <text><![CDATA[IO]]></text>
  </DocumentChange>
  <DocumentChange __id="666" _type="Insert" date="Tue May 03 17:35:02 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2626" docExpressionCount="241" docLength="2916" length="2" offset="821" repeat="2" starttimestamp="1651612126413" timestamp="1575963" timestamp2="1576023">
    <text><![CDATA[io]]></text>
  </DocumentChange>
  <DocumentChange __id="675" _type="Delete" date="Tue May 03 17:35:05 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2624" docExpressionCount="241" docLength="2914" endLine="24" length="2" offset="957" repeat="2" startLine="24" starttimestamp="1651612126413" timestamp="1578679" timestamp2="1578788">
    <text><![CDATA[IO]]></text>
  </DocumentChange>
  <DocumentChange __id="679" _type="Insert" date="Tue May 03 17:35:05 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2626" docExpressionCount="241" docLength="2916" length="2" offset="957" repeat="2" starttimestamp="1651612126413" timestamp="1579030" timestamp2="1579099">
    <text><![CDATA[io]]></text>
  </DocumentChange>
  <DocumentChange __id="688" _type="Delete" date="Tue May 03 17:35:09 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2624" docExpressionCount="241" docLength="2914" endLine="6" length="2" offset="177" repeat="2" startLine="6" starttimestamp="1651612126413" timestamp="1583239" timestamp2="1583339">
    <text><![CDATA[IO]]></text>
  </DocumentChange>
  <DocumentChange __id="692" _type="Insert" date="Tue May 03 17:35:09 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2626" docExpressionCount="241" docLength="2916" length="2" offset="177" repeat="2" starttimestamp="1651612126413" timestamp="1583579" timestamp2="1583629">
    <text><![CDATA[io]]></text>
  </DocumentChange>
  <Command __id="699" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:35:15 EDT 2022" docASTNodeCount="71" docActiveCodeLength="451" docExpressionCount="43" docLength="541" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1589144">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\Client.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶@Tags({ DistributedTags.CLIENT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })¶public class Client {¶	public static void main(final String[] args) {¶		try {¶¶			// create client object¶			//final ClientRemoteInterfaceRMI client = new ClientRemoteObject();¶			final ClientRemoteInterfaceRMI client = new ClientRemoteObjectNIO();¶			¶			client.start(args);¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="704" _type="Delete" date="Tue May 03 17:35:18 EDT 2022" docASTNodeCount="71" docActiveCodeLength="449" docExpressionCount="43" docLength="539" endLine="12" length="2" offset="400" repeat="2" startLine="12" starttimestamp="1651612126413" timestamp="1592290" timestamp2="1592397">
    <text><![CDATA[MI]]></text>
  </DocumentChange>
  <DocumentChange __id="708" _type="Insert" date="Tue May 03 17:35:19 EDT 2022" docASTNodeCount="71" docActiveCodeLength="451" docExpressionCount="43" docLength="541" length="2" offset="400" repeat="2" starttimestamp="1651612126413" timestamp="1592629" timestamp2="1592688">
    <text><![CDATA[mi]]></text>
  </DocumentChange>
  <DocumentChange __id="714" _type="Delete" date="Tue May 03 17:35:22 EDT 2022" docASTNodeCount="71" docActiveCodeLength="448" docExpressionCount="43" docLength="538" endLine="12" length="3" offset="434" repeat="3" startLine="12" starttimestamp="1651612126413" timestamp="1595665" timestamp2="1595945">
    <text><![CDATA[NIO]]></text>
  </DocumentChange>
  <DocumentChange __id="720" _type="Insert" date="Tue May 03 17:35:29 EDT 2022" docASTNodeCount="71" docActiveCodeLength="451" docExpressionCount="43" docLength="541" length="3" offset="434" starttimestamp="1651612126413" timestamp="1603278">
    <text><![CDATA[NIO]]></text>
  </DocumentChange>
  <DocumentChange __id="726" _type="Delete" date="Tue May 03 17:35:39 EDT 2022" docASTNodeCount="51" docActiveCodeLength="430" docExpressionCount="32" docLength="520" endLine="12" length="21" offset="416" startLine="12" starttimestamp="1651612126413" timestamp="1612686">
    <text><![CDATA[ClientRemoteObjectNIO]]></text>
  </DocumentChange>
  <DocumentChange __id="727" _type="Insert" date="Tue May 03 17:35:39 EDT 2022" docASTNodeCount="71" docActiveCodeLength="458" docExpressionCount="43" docLength="548" length="28" offset="416" starttimestamp="1651612126413" timestamp="1612687">
    <text><![CDATA[ClientRemoteObjectRmiGipcNio]]></text>
  </DocumentChange>
  <DocumentChange __id="734" _type="Delete" date="Tue May 03 17:35:52 EDT 2022" docASTNodeCount="71" docActiveCodeLength="455" docExpressionCount="43" docLength="545" endLine="12" length="3" offset="399" repeat="3" startLine="12" starttimestamp="1651612126413" timestamp="1626011" timestamp2="1626302">
    <text><![CDATA[Rmi]]></text>
  </DocumentChange>
  <DocumentChange __id="747" _type="Delete" date="Tue May 03 17:36:08 EDT 2022" docASTNodeCount="69" docActiveCodeLength="434" docExpressionCount="42" docLength="524" endLine="12" length="21" offset="378" startLine="12" starttimestamp="1651612126413" timestamp="1641844">
    <text><![CDATA[ClientRemoteInterface]]></text>
  </DocumentChange>
  <Command __id="745" _type="PauseCommand" date="Tue May 03 17:36:08 EDT 2022" range="10s-20s" starttimestamp="1651612126413" timestamp="1641713">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[14943]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="744" _type="ShellCommand" date="Tue May 03 17:36:08 EDT 2022" starttimestamp="1651612126413" timestamp="1641713" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="746" _type="ShellCommand" date="Tue May 03 17:36:08 EDT 2022" starttimestamp="1651612126413" timestamp="1641833" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="750" _type="PauseCommand" date="Tue May 03 17:36:10 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1643768">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1920]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="749" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:36:10 EDT 2022" starttimestamp="1651612126413" timestamp="1643768" />
  <Command __id="751" _type="EclipseCommand" commandID="" date="Tue May 03 17:36:10 EDT 2022" starttimestamp="1651612126413" timestamp="1643906" />
  <Command __id="752" _type="EclipseCommand" commandID="" date="Tue May 03 17:36:10 EDT 2022" starttimestamp="1651612126413" timestamp="1643918" />
  <Command __id="754" _type="PauseCommand" date="Tue May 03 17:36:13 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1646872">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2954]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="755" _type="SelectTextCommand" caretOffset="204" date="Tue May 03 17:36:13 EDT 2022" end="204" start="176" starttimestamp="1651612126413" timestamp="1646974" />
  <Command __id="757" _type="PauseCommand" date="Tue May 03 17:36:22 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1656375">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[9401]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="758" _type="MoveCaretCommand" caretOffset="179" date="Tue May 03 17:36:22 EDT 2022" docOffset="179" starttimestamp="1651612126413" timestamp="1656445" />
  <Command __id="760" _type="PauseCommand" date="Tue May 03 17:36:45 EDT 2022" range="20s-30s" starttimestamp="1651612126413" timestamp="1678673">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[22228]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="759" _type="ShellCommand" date="Tue May 03 17:36:45 EDT 2022" starttimestamp="1651612126413" timestamp="1678673" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="762" _type="PauseCommand" date="Tue May 03 17:36:46 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1680396">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1723]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="761" _type="ShellCommand" date="Tue May 03 17:36:46 EDT 2022" starttimestamp="1651612126413" timestamp="1680396" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="763" _type="ShellCommand" date="Tue May 03 17:36:47 EDT 2022" starttimestamp="1651612126413" timestamp="1680808" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="765" _type="PauseCommand" date="Tue May 03 17:36:48 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1682507">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1699]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="764" _type="ShellCommand" date="Tue May 03 17:36:48 EDT 2022" starttimestamp="1651612126413" timestamp="1682507" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="766" _type="MoveCaretCommand" caretOffset="620" date="Tue May 03 17:36:48 EDT 2022" docOffset="620" starttimestamp="1651612126413" timestamp="1682579" />
  <Command __id="768" _type="PauseCommand" date="Tue May 03 17:36:54 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1687718">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5139]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="767" _type="ShellCommand" date="Tue May 03 17:36:54 EDT 2022" starttimestamp="1651612126413" timestamp="1687718" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="770" _type="PauseCommand" date="Tue May 03 17:36:58 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1691744">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4026]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="769" _type="ShellCommand" date="Tue May 03 17:36:58 EDT 2022" starttimestamp="1651612126413" timestamp="1691744" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="771" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Tue May 03 17:36:58 EDT 2022" starttimestamp="1651612126413" timestamp="1691757" />
  <Command __id="773" _type="PauseCommand" date="Tue May 03 17:37:01 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1695492">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3735]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="772" _type="MoveCaretCommand" caretOffset="398" date="Tue May 03 17:37:01 EDT 2022" docOffset="398" starttimestamp="1651612126413" timestamp="1695492" />
  <Command __id="775" _type="PauseCommand" date="Tue May 03 17:37:03 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1697400">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1908]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="774" _type="MoveCaretCommand" caretOffset="165" date="Tue May 03 17:37:03 EDT 2022" docOffset="165" starttimestamp="1651612126413" timestamp="1697400" />
  <Command __id="777" _type="PauseCommand" date="Tue May 03 17:37:05 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1698968">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1568]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="776" _type="MoveCaretCommand" caretOffset="180" date="Tue May 03 17:37:05 EDT 2022" docOffset="180" starttimestamp="1651612126413" timestamp="1698968" />
  <Command __id="779" _type="UndoCommand" date="Tue May 03 17:37:06 EDT 2022" starttimestamp="1651612126413" timestamp="1699830" />
  <Command __id="781" _type="UndoCommand" date="Tue May 03 17:37:06 EDT 2022" starttimestamp="1651612126413" timestamp="1700392" />
  <Command __id="783" _type="UndoCommand" date="Tue May 03 17:37:07 EDT 2022" starttimestamp="1651612126413" timestamp="1700761" />
  <Command __id="785" _type="UndoCommand" date="Tue May 03 17:37:07 EDT 2022" starttimestamp="1651612126413" timestamp="1701280" />
  <Command __id="787" _type="UndoCommand" date="Tue May 03 17:37:08 EDT 2022" starttimestamp="1651612126413" timestamp="1701657" />
  <Command __id="789" _type="UndoCommand" date="Tue May 03 17:37:08 EDT 2022" starttimestamp="1651612126413" timestamp="1702244" />
  <Command __id="791" _type="PauseCommand" date="Tue May 03 17:37:11 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1705104">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[2860]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="790" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:37:11 EDT 2022" starttimestamp="1651612126413" timestamp="1705104" />
  <Command __id="792" _type="EclipseCommand" commandID="" date="Tue May 03 17:37:11 EDT 2022" starttimestamp="1651612126413" timestamp="1705192" />
  <Command __id="793" _type="EclipseCommand" commandID="" date="Tue May 03 17:37:11 EDT 2022" starttimestamp="1651612126413" timestamp="1705247" />
  <Command __id="795" _type="MoveCaretCommand" caretOffset="748" date="Tue May 03 17:37:12 EDT 2022" docOffset="2423" starttimestamp="1651612126413" timestamp="1706184" />
  <Command __id="798" _type="UndoCommand" date="Tue May 03 17:37:12 EDT 2022" starttimestamp="1651612126413" timestamp="1706553" />
  <Command __id="799" _type="UndoCommand" date="Tue May 03 17:37:13 EDT 2022" starttimestamp="1651612126413" timestamp="1707395" />
  <Command __id="801" _type="PauseCommand" date="Tue May 03 17:37:16 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1710345">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[2950]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="800" _type="ShellCommand" date="Tue May 03 17:37:16 EDT 2022" starttimestamp="1651612126413" timestamp="1710345" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="802" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:37:16 EDT 2022" starttimestamp="1651612126413" timestamp="1710372" />
  <Command __id="803" _type="EclipseCommand" commandID="" date="Tue May 03 17:37:16 EDT 2022" starttimestamp="1651612126413" timestamp="1710395" />
  <Command __id="804" _type="EclipseCommand" commandID="" date="Tue May 03 17:37:16 EDT 2022" starttimestamp="1651612126413" timestamp="1710513" />
  <Command __id="806" _type="PauseCommand" date="Tue May 03 17:37:17 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1711542">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1029]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="805" _type="ShellCommand" date="Tue May 03 17:37:17 EDT 2022" starttimestamp="1651612126413" timestamp="1711542" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="807" _type="ShellCommand" date="Tue May 03 17:37:17 EDT 2022" starttimestamp="1651612126413" timestamp="1711583" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="809" _type="PauseCommand" date="Tue May 03 17:37:19 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1712851">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1268]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="808" _type="ShellCommand" date="Tue May 03 17:37:19 EDT 2022" starttimestamp="1651612126413" timestamp="1712851" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="811" _type="PauseCommand" date="Tue May 03 17:37:22 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1716335">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3484]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="810" _type="ShellCommand" date="Tue May 03 17:37:22 EDT 2022" starttimestamp="1651612126413" timestamp="1716335" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="812" _type="ShellCommand" date="Tue May 03 17:37:22 EDT 2022" starttimestamp="1651612126413" timestamp="1716423" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="813" _type="ShellCommand" date="Tue May 03 17:37:22 EDT 2022" starttimestamp="1651612126413" timestamp="1716461" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="815" _type="PauseCommand" date="Tue May 03 17:37:27 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1720777">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4316]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="814" _type="ShellCommand" date="Tue May 03 17:37:27 EDT 2022" starttimestamp="1651612126413" timestamp="1720777" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="817" _type="PauseCommand" date="Tue May 03 17:37:31 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1725552">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4775]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="816" _type="ShellCommand" date="Tue May 03 17:37:31 EDT 2022" starttimestamp="1651612126413" timestamp="1725552" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="818" _type="ShellCommand" date="Tue May 03 17:37:32 EDT 2022" starttimestamp="1651612126413" timestamp="1725646" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="819" _type="ShellCommand" date="Tue May 03 17:37:32 EDT 2022" starttimestamp="1651612126413" timestamp="1725668" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="821" _type="PauseCommand" date="Tue May 03 17:37:33 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1727515">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1847]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="820" _type="ShellCommand" date="Tue May 03 17:37:33 EDT 2022" starttimestamp="1651612126413" timestamp="1727515" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="823" _type="SelectTextCommand" caretOffset="204" date="Tue May 03 17:37:34 EDT 2022" end="204" start="176" starttimestamp="1651612126413" timestamp="1728319" />
  <Command __id="826" _type="UndoCommand" date="Tue May 03 17:37:35 EDT 2022" starttimestamp="1651612126413" timestamp="1728912" />
  <Command __id="828" _type="PauseCommand" date="Tue May 03 17:37:36 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1729950">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1038]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[UndoCommand]]></next>
  </Command>
  <Command __id="827" _type="UndoCommand" date="Tue May 03 17:37:36 EDT 2022" starttimestamp="1651612126413" timestamp="1729950" />
  <Command __id="830" _type="PauseCommand" date="Tue May 03 17:37:38 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1732056">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[2106]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="829" _type="ShellCommand" date="Tue May 03 17:37:38 EDT 2022" starttimestamp="1651612126413" timestamp="1732056" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="831" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:37:38 EDT 2022" starttimestamp="1651612126413" timestamp="1732099" />
  <Command __id="832" _type="EclipseCommand" commandID="" date="Tue May 03 17:37:38 EDT 2022" starttimestamp="1651612126413" timestamp="1732124" />
  <Command __id="833" _type="EclipseCommand" commandID="" date="Tue May 03 17:37:38 EDT 2022" starttimestamp="1651612126413" timestamp="1732396" />
  <Command __id="835" _type="PauseCommand" date="Tue May 03 17:37:40 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1734254">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1858]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="834" _type="ShellCommand" date="Tue May 03 17:37:40 EDT 2022" starttimestamp="1651612126413" timestamp="1734254" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="836" _type="ShellCommand" date="Tue May 03 17:37:40 EDT 2022" starttimestamp="1651612126413" timestamp="1734289" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="838" _type="PauseCommand" date="Tue May 03 17:37:41 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1735463">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1174]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="837" _type="ShellCommand" date="Tue May 03 17:37:41 EDT 2022" starttimestamp="1651612126413" timestamp="1735463" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="840" _type="PauseCommand" date="Tue May 03 17:37:44 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1738144">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2681]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="841" _type="MoveCaretCommand" caretOffset="302" date="Tue May 03 17:37:44 EDT 2022" docOffset="679" starttimestamp="1651612126413" timestamp="1738222" />
  <Command __id="843" _type="PauseCommand" date="Tue May 03 17:37:46 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1739666">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1444]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="845" _type="UndoCommand" date="Tue May 03 17:37:46 EDT 2022" starttimestamp="1651612126413" timestamp="1739673" />
  <Command __id="847" _type="PauseCommand" date="Tue May 03 17:37:47 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1740958">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1285]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[UndoCommand]]></next>
  </Command>
  <Command __id="846" _type="UndoCommand" date="Tue May 03 17:37:47 EDT 2022" starttimestamp="1651612126413" timestamp="1740958" />
  <Command __id="849" _type="PauseCommand" date="Tue May 03 17:37:51 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1744698">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[3740]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="848" _type="ShellCommand" date="Tue May 03 17:37:51 EDT 2022" starttimestamp="1651612126413" timestamp="1744698" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="850" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:37:51 EDT 2022" starttimestamp="1651612126413" timestamp="1744722" />
  <Command __id="851" _type="EclipseCommand" commandID="" date="Tue May 03 17:37:51 EDT 2022" starttimestamp="1651612126413" timestamp="1744761" />
  <Command __id="852" _type="EclipseCommand" commandID="" date="Tue May 03 17:37:51 EDT 2022" starttimestamp="1651612126413" timestamp="1744945" />
  <Command __id="854" _type="PauseCommand" date="Tue May 03 17:37:54 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1747829">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2884]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="853" _type="ShellCommand" date="Tue May 03 17:37:54 EDT 2022" starttimestamp="1651612126413" timestamp="1747829" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="855" _type="ShellCommand" date="Tue May 03 17:37:54 EDT 2022" starttimestamp="1651612126413" timestamp="1747867" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="856" _type="ShellCommand" date="Tue May 03 17:37:55 EDT 2022" starttimestamp="1651612126413" timestamp="1748855" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="858" _type="PauseCommand" date="Tue May 03 17:37:56 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1750134">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1279]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="857" _type="ShellCommand" date="Tue May 03 17:37:56 EDT 2022" starttimestamp="1651612126413" timestamp="1750134" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="859" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:37:56 EDT 2022" starttimestamp="1651612126413" timestamp="1750159" />
  <Command __id="860" _type="EclipseCommand" commandID="" date="Tue May 03 17:37:56 EDT 2022" starttimestamp="1651612126413" timestamp="1750200" />
  <Command __id="861" _type="EclipseCommand" commandID="" date="Tue May 03 17:37:56 EDT 2022" starttimestamp="1651612126413" timestamp="1750212" />
  <Command __id="863" _type="PauseCommand" date="Tue May 03 17:37:57 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1751294">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1082]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="862" _type="ShellCommand" date="Tue May 03 17:37:57 EDT 2022" starttimestamp="1651612126413" timestamp="1751294" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="864" _type="ShellCommand" date="Tue May 03 17:37:57 EDT 2022" starttimestamp="1651612126413" timestamp="1751345" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="866" _type="PauseCommand" date="Tue May 03 17:38:05 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1759007">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7662]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="865" _type="ShellCommand" date="Tue May 03 17:38:05 EDT 2022" starttimestamp="1651612126413" timestamp="1759007" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="868" _type="PauseCommand" date="Tue May 03 17:38:06 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1760279">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1272]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="867" _type="ShellCommand" date="Tue May 03 17:38:06 EDT 2022" starttimestamp="1651612126413" timestamp="1760279" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="870" _type="PauseCommand" date="Tue May 03 17:38:08 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1762474">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2195]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="869" _type="ShellCommand" date="Tue May 03 17:38:08 EDT 2022" starttimestamp="1651612126413" timestamp="1762474" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="871" _type="ShellCommand" date="Tue May 03 17:38:08 EDT 2022" starttimestamp="1651612126413" timestamp="1762493" type="ECLIPSE_CLOSED" />
  <Command __id="873" _type="MoveCaretCommand" caretOffset="426" date="Tue May 03 17:38:09 EDT 2022" docOffset="426" starttimestamp="1651612126413" timestamp="1763157" />
  <Command __id="876" _type="UndoCommand" date="Tue May 03 17:38:09 EDT 2022" starttimestamp="1651612126413" timestamp="1763569" />
  <Command __id="878" _type="UndoCommand" date="Tue May 03 17:38:10 EDT 2022" starttimestamp="1651612126413" timestamp="1764206" />
  <DocumentChange __id="748" _type="Insert" date="Tue May 03 17:36:08 EDT 2022" docASTNodeCount="71" docActiveCodeLength="458" docExpressionCount="43" docLength="548" length="24" offset="378" starttimestamp="1651612126413" timestamp="1641848">
    <text><![CDATA[ClientRemoteInterfaceNio]]></text>
  </DocumentChange>
  <Command __id="753" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:36:13 EDT 2022" docASTNodeCount="784" docActiveCodeLength="5591" docExpressionCount="567" docLength="6771" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1646872">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteObjectRmiGipcNio.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposalMade;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.port.consensus.communication.CommunicationStateNames;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })¶public class ClientRemoteObject"), Diff(DELETE,"NIO"), Diff(INSERT,"RmiGipcNio"), Diff(EQUAL," extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	protected boolean broadcastIPCMechanism = false;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ClientArgsProcessor.getNIOServerPort(args);¶		System.out.println("NIO SERVER PORT: "+aServerPort);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		//TODO NEED TO PARSE THE PROPOSAL NUMBER¶		String aMessageString = new String(copy.array());¶		System.out.println(aMessageString);¶		int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );¶		aMessageString =  aMessageString.substring(0, aMessageString.length()-1);¶		System.out.println("CLIENT COMMAND: "+aMessageString);¶		//int aProposalNumber = 0;¶		¶		//ByteBuffer bufferCommand = ByteBuffer.wrap(aMessageString.getBytes());¶		//boundedBuffer.add(bufferCommand);¶		¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);¶		//RemoteProposeRequestReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶		String originalCommand = aCommand;¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: " + mechanism.toString());¶¶¶		aProposalNumber = 1 + aProposalNumber;¶		System.out.println("A PROPOSAL NUMBER: "+aProposalNumber);¶		¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, true);¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		commandProcessor.setInputString(originalCommand); // all commands go to the first command window¶		¶		aCommand = aCommand.concat(String.valueOf(aProposalNumber));¶		System.out.println("COMMAND + PROPOSAL NUMBER:"+aCommand);¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		//RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);¶		ProposalMade.newCase(this, CommunicationStateNames.COMMAND, -1, originalCommand);¶		nioManager.write(socketChannel, bufferCommand, this);¶	¶¶		¶		¶		¶		//commandProcessor.setInputString(originalCommand); // all commands go to the first command window¶		¶		//commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶¶	@Override¶	public void simulationCommand1(String aCommand) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void nioInit(String[] args) {¶		// TODO Auto-generated method stub¶		¶	}¶		¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposalMade;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.consensus.RemoteProposeRequestSent;
import util.trace.port.consensus.communication.CommunicationStateNames;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class ClientRemoteObjectRmiGipcNio extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	protected boolean broadcastIPCMechanism = false;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ClientArgsProcessor.getNIOServerPort(args);
		System.out.println("NIO SERVER PORT: "+aServerPort);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		//TODO NEED TO PARSE THE PROPOSAL NUMBER
		String aMessageString = new String(copy.array());
		System.out.println(aMessageString);
		int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );
		aMessageString =  aMessageString.substring(0, aMessageString.length()-1);
		System.out.println("CLIENT COMMAND: "+aMessageString);
		//int aProposalNumber = 0;
		
		//ByteBuffer bufferCommand = ByteBuffer.wrap(aMessageString.getBytes());
		//boundedBuffer.add(bufferCommand);
		
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);
		//RemoteProposeRequestReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {
		String originalCommand = aCommand;
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: " + mechanism.toString());


		aProposalNumber = 1 + aProposalNumber;
		System.out.println("A PROPOSAL NUMBER: "+aProposalNumber);
		
		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}

		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, true);
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		commandProcessor.setInputString(originalCommand); // all commands go to the first command window
		
		aCommand = aCommand.concat(String.valueOf(aProposalNumber));
		System.out.println("COMMAND + PROPOSAL NUMBER:"+aCommand);
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		//RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);
		ProposalMade.newCase(this, CommunicationStateNames.COMMAND, -1, originalCommand);
		nioManager.write(socketChannel, bufferCommand, this);
	

		
		
		
		//commandProcessor.setInputString(originalCommand); // all commands go to the first command window
		
		//commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}

	@Override
	public void simulationCommand1(String aCommand) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void nioInit(String[] args) {
		// TODO Auto-generated method stub
		
	}
		


}
]]></snapshot>
  </Command>
  <Command __id="756" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:36:22 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2626" docExpressionCount="241" docLength="2916" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1656375">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import client.ClientRemoteObjectN"), Diff(DELETE,"IO"), Diff(INSERT,"io"), Diff(EQUAL,";¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	//final ClientRemoteObjectNIO client;¶	final ClientRemoteObjectN"), Diff(DELETE,"IO"), Diff(INSERT,"io"), Diff(EQUAL," client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectN"), Diff(DELETE,"IO"), Diff(INSERT,"io"), Diff(EQUAL," aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			¶			/// To pass the autograder¶			int position = originalMessage.position();¶			ArrayBlockingQueue<ByteBuffer> boundedBufferFake = new ArrayBlockingQueue<ByteBuffer>(500);¶			boundedBufferFake.add(originalMessage);¶			///¶			¶			System.out.println(aMessageString);¶			int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );¶			aMessageString =  aMessageString.substring(0, aMessageString.length()-1);¶			¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			¶			¶			RemoteProposeRequestReceived.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);¶			commandProcessor.processCommand(aMessageString);¶			ProposedStateSet.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);¶			//client.aProposalNumber++;¶		¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import client.ClientRemoteObjectNio;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{
	//final ClientRemoteObjectNIO client;
	final ClientRemoteObjectNio client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ClientReadThread (final ClientRemoteObjectNio aClient) {
		client = aClient;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			
			/// To pass the autograder
			int position = originalMessage.position();
			ArrayBlockingQueue<ByteBuffer> boundedBufferFake = new ArrayBlockingQueue<ByteBuffer>(500);
			boundedBufferFake.add(originalMessage);
			///
			
			System.out.println(aMessageString);
			int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );
			aMessageString =  aMessageString.substring(0, aMessageString.length()-1);
			
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
			
			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();
			
			
			RemoteProposeRequestReceived.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);
			commandProcessor.processCommand(aMessageString);
			ProposedStateSet.newCase(this, client.CLIENT_NAME, aProposalNumber, aMessageString);
			//client.aProposalNumber++;
		
		}
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="778" _type="Delete" date="Tue May 03 17:37:06 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2624" docExpressionCount="241" docLength="2914" endLine="6" length="2" offset="177" startLine="6" starttimestamp="1651612126413" timestamp="1699821">
    <text><![CDATA[io]]></text>
  </DocumentChange>
  <DocumentChange __id="780" _type="Insert" date="Tue May 03 17:37:06 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2626" docExpressionCount="241" docLength="2916" length="2" offset="177" starttimestamp="1651612126413" timestamp="1700386">
    <text><![CDATA[IO]]></text>
  </DocumentChange>
  <DocumentChange __id="782" _type="Delete" date="Tue May 03 17:37:07 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2624" docExpressionCount="241" docLength="2914" endLine="24" length="2" offset="957" startLine="24" starttimestamp="1651612126413" timestamp="1700754">
    <text><![CDATA[io]]></text>
  </DocumentChange>
  <DocumentChange __id="784" _type="Insert" date="Tue May 03 17:37:07 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2626" docExpressionCount="241" docLength="2916" length="2" offset="957" starttimestamp="1651612126413" timestamp="1701276">
    <text><![CDATA[IO]]></text>
  </DocumentChange>
  <DocumentChange __id="786" _type="Delete" date="Tue May 03 17:37:08 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2624" docExpressionCount="241" docLength="2914" endLine="21" length="2" offset="821" startLine="21" starttimestamp="1651612126413" timestamp="1701646">
    <text><![CDATA[io]]></text>
  </DocumentChange>
  <DocumentChange __id="788" _type="Insert" date="Tue May 03 17:37:08 EDT 2022" docASTNodeCount="352" docActiveCodeLength="2626" docExpressionCount="241" docLength="2916" length="2" offset="821" starttimestamp="1651612126413" timestamp="1702239">
    <text><![CDATA[IO]]></text>
  </DocumentChange>
  <Command __id="794" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:37:12 EDT 2022" docASTNodeCount="1250" docActiveCodeLength="9754" docExpressionCount="896" docLength="10696" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1706067">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteObjectRmiGipc.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObjectRmiGipc extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	//protected int aProposalNumber;¶	public int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		¶		//ServerArgsProcessor.ge;¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			System.out.println("WE ARE LOOKING UP server from RMI REGISTRY HERE: "+SERVER_NAME);¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			System.out.println("SERVER looked up in RMI registry!!");¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, false);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		System.out.println("A PROPOSAL NUMBER: "+proposalNumber);¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME, false);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, false);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶	¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		System.out.print("GOT IPC MECHANISM CHANGE: "+mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		//aProposalNumber++;¶		¶	}¶	¶	@Override¶	public void ipcMechanism(IPCMechanism mechanism) {¶		setIPCMechanism(mechanism);¶		¶		if(this.broadcastMetaState) {¶			try {¶				server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶		}¶	}¶¶¶¶¶¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="796" _type="Delete" date="Tue May 03 17:37:12 EDT 2022" docASTNodeCount="291" docActiveCodeLength="9729" docExpressionCount="251" docLength="10671" endLine="45" length="25" offset="1832" startLine="45" starttimestamp="1651612126413" timestamp="1706529">
    <text><![CDATA[ClientRemoteObjectRmiGipc]]></text>
  </DocumentChange>
  <DocumentChange __id="797" _type="Insert" date="Tue May 03 17:37:12 EDT 2022" docASTNodeCount="1250" docActiveCodeLength="9747" docExpressionCount="896" docLength="10689" length="18" offset="1832" starttimestamp="1651612126413" timestamp="1706544">
    <text><![CDATA[ClientRemoteObject]]></text>
  </DocumentChange>
  <Command __id="822" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:37:34 EDT 2022" docASTNodeCount="784" docActiveCodeLength="5591" docExpressionCount="567" docLength="6771" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1728217">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteObjectRmiGipcNio.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposalMade;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.port.consensus.communication.CommunicationStateNames;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })¶public class ClientRemoteObjectRmiGipcNio extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	protected boolean broadcastIPCMechanism = false;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ClientArgsProcessor.getNIOServerPort(args);¶		System.out.println("NIO SERVER PORT: "+aServerPort);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		//TODO NEED TO PARSE THE PROPOSAL NUMBER¶		String aMessageString = new String(copy.array());¶		System.out.println(aMessageString);¶		int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );¶		aMessageString =  aMessageString.substring(0, aMessageString.length()-1);¶		System.out.println("CLIENT COMMAND: "+aMessageString);¶		//int aProposalNumber = 0;¶		¶		//ByteBuffer bufferCommand = ByteBuffer.wrap(aMessageString.getBytes());¶		//boundedBuffer.add(bufferCommand);¶		¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);¶		//RemoteProposeRequestReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶		String originalCommand = aCommand;¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: " + mechanism.toString());¶¶¶		aProposalNumber = 1 + aProposalNumber;¶		System.out.println("A PROPOSAL NUMBER: "+aProposalNumber);¶		¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, true);¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		commandProcessor.setInputString(originalCommand); // all commands go to the first command window¶		¶		aCommand = aCommand.concat(String.valueOf(aProposalNumber));¶		System.out.println("COMMAND + PROPOSAL NUMBER:"+aCommand);¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		//RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);¶		ProposalMade.newCase(this, CommunicationStateNames.COMMAND, -1, originalCommand);¶		nioManager.write(socketChannel, bufferCommand, this);¶	¶¶		¶		¶		¶		//commandProcessor.setInputString(originalCommand); // all commands go to the first command window¶		¶		//commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶¶	@Override¶	public void simulationCommand1(String aCommand) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void nioInit(String[] args) {¶		// TODO Auto-generated method stub¶		¶	}¶		¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="824" _type="Delete" date="Tue May 03 17:37:35 EDT 2022" docASTNodeCount="241" docActiveCodeLength="5563" docExpressionCount="209" docLength="6743" endLine="35" length="28" offset="1662" startLine="35" starttimestamp="1651612126413" timestamp="1728898">
    <text><![CDATA[ClientRemoteObjectRmiGipcNio]]></text>
  </DocumentChange>
  <DocumentChange __id="825" _type="Insert" date="Tue May 03 17:37:35 EDT 2022" docASTNodeCount="784" docActiveCodeLength="5584" docExpressionCount="567" docLength="6764" length="21" offset="1662" starttimestamp="1651612126413" timestamp="1728907">
    <text><![CDATA[ClientRemoteObjectNIO]]></text>
  </DocumentChange>
  <Command __id="839" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:37:44 EDT 2022" docASTNodeCount="101" docActiveCodeLength="813" docExpressionCount="69" docLength="857" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1738144">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\ClientRemoteInterfaceNio.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.nio.ByteBuffer;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import stringProcessors.HalloweenCommandProcessor;¶¶public interface ClientRemoteInterfaceN"), Diff(DELETE,"IO"), Diff(INSERT,"io"), Diff(EQUAL," extends SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶¶//	String CLIENT_NAME = null;¶	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();¶¶	HalloweenCommandProcessor getCommandProcessor();¶¶	void setFactories();¶¶	//For A6 checks¶	void simulationCommand1(String aCommand);¶	void nioInit(String[] args);¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.nio.ByteBuffer;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelConnectListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;
import stringProcessors.HalloweenCommandProcessor;

public interface ClientRemoteInterfaceNio extends SocketChannelConnectListener, SocketChannelWriteListener,
SocketChannelAcceptListener, SocketChannelReadListener{

//	String CLIENT_NAME = null;
	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();

	HalloweenCommandProcessor getCommandProcessor();

	void setFactories();

	//For A6 checks
	void simulationCommand1(String aCommand);
	void nioInit(String[] args);

}
]]></snapshot>
  </Command>
  <DocumentChange __id="842" _type="Delete" date="Tue May 03 17:37:46 EDT 2022" docASTNodeCount="61" docActiveCodeLength="789" docExpressionCount="52" docLength="833" endLine="11" length="24" offset="444" startLine="11" starttimestamp="1651612126413" timestamp="1739666">
    <text><![CDATA[ClientRemoteInterfaceNio]]></text>
  </DocumentChange>
  <DocumentChange __id="844" _type="Insert" date="Tue May 03 17:37:46 EDT 2022" docASTNodeCount="101" docActiveCodeLength="813" docExpressionCount="69" docLength="857" length="24" offset="444" starttimestamp="1651612126413" timestamp="1739670">
    <text><![CDATA[ClientRemoteInterfaceNIO]]></text>
  </DocumentChange>
  <Command __id="872" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:38:09 EDT 2022" docASTNodeCount="71" docActiveCodeLength="458" docExpressionCount="43" docLength="548" projectName="533Assignment060" starttimestamp="1651612126413" timestamp="1763076">
    <filePath><![CDATA[C:\Users\KaihaoLiu\eclipse-workspace\533Assignment060\src\client\Client.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶@Tags({ DistributedTags.CLIENT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })¶public class Client {¶	public static void main(final String[] args) {¶		try {¶¶			// create client object¶			//final ClientRemoteInterfaceRMI client = new ClientRemoteObject();¶			final ClientRemoteInterface"), Diff(DELETE,"RMI"), Diff(INSERT,"Nio"), Diff(EQUAL," client = new ClientRemoteObject"), Diff(DELETE,"NIO"), Diff(INSERT,"RmiGipcNio"), Diff(EQUAL,"();¶			¶			client.start(args);¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.tags.DistributedTags;

@Tags({ DistributedTags.CLIENT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class Client {
	public static void main(final String[] args) {
		try {

			// create client object
			//final ClientRemoteInterfaceRMI client = new ClientRemoteObject();
			final ClientRemoteInterfaceNio client = new ClientRemoteObjectRmiGipcNio();
			
			client.start(args);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="874" _type="Delete" date="Tue May 03 17:38:09 EDT 2022" docASTNodeCount="69" docActiveCodeLength="434" docExpressionCount="42" docLength="524" endLine="12" length="24" offset="378" startLine="12" starttimestamp="1651612126413" timestamp="1763555">
    <text><![CDATA[ClientRemoteInterfaceNio]]></text>
  </DocumentChange>
  <DocumentChange __id="875" _type="Insert" date="Tue May 03 17:38:09 EDT 2022" docASTNodeCount="71" docActiveCodeLength="458" docExpressionCount="43" docLength="548" length="24" offset="378" repeat="2" starttimestamp="1651612126413" timestamp="1763564" timestamp2="1764197">
    <text><![CDATA[ClientRemoteInterfaceRmi]]></text>
  </DocumentChange>
  <DocumentChange __id="879" _type="Delete" date="Tue May 03 17:38:11 EDT 2022" docASTNodeCount="51" docActiveCodeLength="430" docExpressionCount="32" docLength="520" endLine="12" length="28" offset="416" startLine="12" starttimestamp="1651612126413" timestamp="1765571">
    <text><![CDATA[ClientRemoteObjectRmiGipcNio]]></text>
  </DocumentChange>
  <DocumentChange __id="881" _type="Insert" date="Tue May 03 17:38:11 EDT 2022" docASTNodeCount="71" docActiveCodeLength="451" docExpressionCount="43" docLength="541" length="21" offset="416" starttimestamp="1651612126413" timestamp="1765575">
    <text><![CDATA[ClientRemoteObjectNIO]]></text>
  </DocumentChange>
  <DocumentChange __id="883" _type="Delete" date="Tue May 03 17:38:12 EDT 2022" docASTNodeCount="71" docActiveCodeLength="449" docExpressionCount="43" docLength="539" endLine="12" length="2" offset="400" startLine="12" starttimestamp="1651612126413" timestamp="1766133">
    <text><![CDATA[mi]]></text>
  </DocumentChange>
  <Command __id="880" _type="PauseCommand" date="Tue May 03 17:38:11 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1765571">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1365]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="882" _type="UndoCommand" date="Tue May 03 17:38:11 EDT 2022" starttimestamp="1651612126413" timestamp="1765582" />
  <Command __id="884" _type="UndoCommand" date="Tue May 03 17:38:12 EDT 2022" starttimestamp="1651612126413" timestamp="1766141" />
  <Command __id="886" _type="UndoCommand" date="Tue May 03 17:38:13 EDT 2022" starttimestamp="1651612126413" timestamp="1767114" />
  <Command __id="888" _type="PauseCommand" date="Tue May 03 17:38:14 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1768287">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1173]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="887" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:38:14 EDT 2022" starttimestamp="1651612126413" timestamp="1768287" />
  <Command __id="889" _type="EclipseCommand" commandID="" date="Tue May 03 17:38:14 EDT 2022" starttimestamp="1651612126413" timestamp="1768375" />
  <Command __id="890" _type="EclipseCommand" commandID="" date="Tue May 03 17:38:14 EDT 2022" starttimestamp="1651612126413" timestamp="1768392" />
  <Command __id="892" _type="PauseCommand" date="Tue May 03 17:38:17 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1771318">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2926]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="893" _type="MoveCaretCommand" caretOffset="0" date="Tue May 03 17:38:17 EDT 2022" docOffset="0" starttimestamp="1651612126413" timestamp="1771392" />
  <Command __id="895" _type="PauseCommand" date="Tue May 03 17:38:19 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1773197">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1805]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="894" _type="ShellCommand" date="Tue May 03 17:38:19 EDT 2022" starttimestamp="1651612126413" timestamp="1773197" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="896" _type="ShellCommand" date="Tue May 03 17:38:20 EDT 2022" starttimestamp="1651612126413" timestamp="1774167" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="897" _type="ShellCommand" date="Tue May 03 17:38:20 EDT 2022" starttimestamp="1651612126413" timestamp="1774316" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="899" _type="PauseCommand" date="Tue May 03 17:38:24 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1778438">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4122]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="898" _type="ShellCommand" date="Tue May 03 17:38:24 EDT 2022" starttimestamp="1651612126413" timestamp="1778438" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="900" _type="ShellCommand" date="Tue May 03 17:38:24 EDT 2022" starttimestamp="1651612126413" timestamp="1778456" type="ECLIPSE_CLOSED" />
  <Command __id="902" _type="MoveCaretCommand" caretOffset="0" date="Tue May 03 17:38:25 EDT 2022" docOffset="0" starttimestamp="1651612126413" timestamp="1779526" />
  <Command __id="904" _type="PauseCommand" date="Tue May 03 17:38:27 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1780628">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1102]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="903" _type="ShellCommand" date="Tue May 03 17:38:27 EDT 2022" starttimestamp="1651612126413" timestamp="1780628" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="905" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:38:27 EDT 2022" starttimestamp="1651612126413" timestamp="1780655" />
  <Command __id="906" _type="EclipseCommand" commandID="" date="Tue May 03 17:38:27 EDT 2022" starttimestamp="1651612126413" timestamp="1780691" />
  <Command __id="907" _type="EclipseCommand" commandID="" date="Tue May 03 17:38:27 EDT 2022" starttimestamp="1651612126413" timestamp="1780713" />
  <Command __id="909" _type="PauseCommand" date="Tue May 03 17:38:28 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1781754">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1041]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="908" _type="ShellCommand" date="Tue May 03 17:38:28 EDT 2022" starttimestamp="1651612126413" timestamp="1781754" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="910" _type="ShellCommand" date="Tue May 03 17:38:28 EDT 2022" starttimestamp="1651612126413" timestamp="1781791" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="912" _type="PauseCommand" date="Tue May 03 17:38:31 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1785350">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3559]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="911" _type="ShellCommand" date="Tue May 03 17:38:31 EDT 2022" starttimestamp="1651612126413" timestamp="1785350" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="914" _type="PauseCommand" date="Tue May 03 17:38:34 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1787747">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2397]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="915" _type="MoveCaretCommand" caretOffset="0" date="Tue May 03 17:38:34 EDT 2022" docOffset="0" starttimestamp="1651612126413" timestamp="1787817" />
  <Command __id="916" _type="ShellCommand" date="Tue May 03 17:38:34 EDT 2022" starttimestamp="1651612126413" timestamp="1788193" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="917" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:38:34 EDT 2022" starttimestamp="1651612126413" timestamp="1788227" />
  <Command __id="918" _type="EclipseCommand" commandID="" date="Tue May 03 17:38:34 EDT 2022" starttimestamp="1651612126413" timestamp="1788253" />
  <Command __id="919" _type="EclipseCommand" commandID="" date="Tue May 03 17:38:34 EDT 2022" starttimestamp="1651612126413" timestamp="1788264" />
  <Command __id="920" _type="ShellCommand" date="Tue May 03 17:38:35 EDT 2022" starttimestamp="1651612126413" timestamp="1789081" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="921" _type="ShellCommand" date="Tue May 03 17:38:35 EDT 2022" starttimestamp="1651612126413" timestamp="1789117" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="922" _type="ShellCommand" date="Tue May 03 17:38:36 EDT 2022" starttimestamp="1651612126413" timestamp="1789795" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="923" _type="MoveCaretCommand" caretOffset="378" date="Tue May 03 17:38:36 EDT 2022" docOffset="755" starttimestamp="1651612126413" timestamp="1790190" />
  <Command __id="925" _type="PauseCommand" date="Tue May 03 17:38:39 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1793196">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3006]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="924" _type="ShellCommand" date="Tue May 03 17:38:39 EDT 2022" starttimestamp="1651612126413" timestamp="1793196" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="926" _type="ShellCommand" date="Tue May 03 17:38:39 EDT 2022" starttimestamp="1651612126413" timestamp="1793303" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="927" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue May 03 17:38:39 EDT 2022" start_end="END" starttimestamp="1651612126413" timestamp="1793333" />
  <Command __id="928" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Tue May 03 17:38:39 EDT 2022" start_end="END" starttimestamp="1651612126413" timestamp="1793333" />
  <Command __id="929" _type="EclipseCommand" commandID="" date="Tue May 03 17:38:39 EDT 2022" starttimestamp="1651612126413" timestamp="1793531" />
  <Command __id="930" _type="EclipseCommand" commandID="" date="Tue May 03 17:38:39 EDT 2022" starttimestamp="1651612126413" timestamp="1793564" />
  <Command __id="932" _type="PauseCommand" date="Tue May 03 17:38:41 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1794603">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1038]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="933" _type="MoveCaretCommand" caretOffset="0" date="Tue May 03 17:38:41 EDT 2022" docOffset="0" starttimestamp="1651612126413" timestamp="1794709" />
  <Command __id="935" _type="PauseCommand" date="Tue May 03 17:38:42 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1796526">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1817]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="934" _type="MoveCaretCommand" caretOffset="190" date="Tue May 03 17:38:42 EDT 2022" docOffset="1676" starttimestamp="1651612126413" timestamp="1796526" />
  <Command __id="937" _type="PauseCommand" date="Tue May 03 17:38:47 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1801041">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4515]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="938" _type="SelectTextCommand" caretOffset="402" date="Tue May 03 17:38:47 EDT 2022" end="402" start="400" starttimestamp="1651612126413" timestamp="1801115" />
  <Command __id="940" _type="PauseCommand" date="Tue May 03 17:38:51 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1804852">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3737]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="941" _type="SelectTextCommand" caretOffset="823" date="Tue May 03 17:38:51 EDT 2022" end="823" start="821" starttimestamp="1651612126413" timestamp="1804944" />
  <Command __id="943" _type="PauseCommand" date="Tue May 03 17:38:54 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1807880">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2936]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="942" _type="MoveCaretCommand" caretOffset="814" date="Tue May 03 17:38:54 EDT 2022" docOffset="814" starttimestamp="1651612126413" timestamp="1807880" />
  <Command __id="945" _type="PauseCommand" date="Tue May 03 17:38:57 EDT 2022" range="2s-5s" starttimestamp="1651612126413" timestamp="1810727">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2847]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="944" _type="MoveCaretCommand" caretOffset="712" date="Tue May 03 17:38:57 EDT 2022" docOffset="712" starttimestamp="1651612126413" timestamp="1810727" />
  <Command __id="946" _type="SelectTextCommand" caretOffset="721" date="Tue May 03 17:38:57 EDT 2022" end="721" start="705" starttimestamp="1651612126413" timestamp="1810867" />
  <Command __id="948" _type="PauseCommand" date="Tue May 03 17:39:04 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1817906">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[7039]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="947" _type="ShellCommand" date="Tue May 03 17:39:04 EDT 2022" starttimestamp="1651612126413" timestamp="1817906" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="949" _type="ShellCommand" date="Tue May 03 17:39:04 EDT 2022" starttimestamp="1651612126413" timestamp="1818010" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="952" _type="PauseCommand" date="Tue May 03 17:39:05 EDT 2022" range="1s-2s" starttimestamp="1651612126413" timestamp="1819556">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Replace]]></prev>
    <pause><![CDATA[1532]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="951" _type="ShellCommand" date="Tue May 03 17:39:05 EDT 2022" starttimestamp="1651612126413" timestamp="1819556" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="953" _type="ShellCommand" date="Tue May 03 17:39:06 EDT 2022" starttimestamp="1651612126413" timestamp="1819659" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="955" _type="MoveCaretCommand" caretOffset="2624" date="Tue May 03 17:39:06 EDT 2022" docOffset="2624" starttimestamp="1651612126413" timestamp="1820076" />
  <Command __id="956" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue May 03 17:39:07 EDT 2022" starttimestamp="1651612126413" timestamp="1820666" />
  <Command __id="957" _type="EclipseCommand" commandID="" date="Tue May 03 17:39:07 EDT 2022" starttimestamp="1651612126413" timestamp="1820754" />
  <Command __id="958" _type="EclipseCommand" commandID="" date="Tue May 03 17:39:07 EDT 2022" starttimestamp="1651612126413" timestamp="1820768" />
  <Command __id="960" _type="PauseCommand" date="Tue May 03 17:39:13 EDT 2022" range="5s-10s" starttimestamp="1651612126413" timestamp="1827381">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6613]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="959" _type="ShellCommand" date="Tue May 03 17:39:13 EDT 2022" starttimestamp="1651612126413" timestamp="1827381" type="ECLIPSE_LOST_FOCUS" />
